// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                @id @default(cuid())
  name                    String
  email                   String                @unique
  password                String
  role                    String                @default("Requester")
  departmentId            String?
  department              Department?           @relation(fields: [departmentId], references: [id])
  vendorId                String?               @unique
  vendor                  Vendor?               @relation(fields: [vendorId], references: [id])
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  createdRequisitions     PurchaseRequisition[] @relation("Requester")
  approvedRequisitions    PurchaseRequisition[] @relation("Approver")
  currentApprovals        PurchaseRequisition[] @relation("CurrentApprover")
  auditLogs               AuditLog[]
  receipts                GoodsReceiptNote[]
  contractsSent           Contract[]            @relation("Sender")
  CommitteeAssignment     CommitteeAssignment[]
  CommitteeScoreSet       CommitteeScoreSet[]
  financialCommitteeOn    PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommitteeOn    PurchaseRequisition[] @relation("TechnicalCommitteeMembers")
  reviews                 Review[]
  approvalLimit           Float?
  managerId               String?
  manager                 User?                 @relation("Manager", fields: [managerId], references: [id])
  subordinates            User[]                @relation("Manager")
}

model Department {
  id           String                @id @default(cuid())
  name         String                @unique
  description  String?
  headId       String?               @unique
  head         User?                 @relation(fields: [headId], references: [id])
  users        User[]
  requisitions PurchaseRequisition[]
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value Json
}

model PurchaseRequisition {
  id                           String                 @id @default(cuid())
  transactionId                String?                @unique
  requester                    User                   @relation("Requester", fields: [requesterId], references: [id])
  requesterId                  String
  requesterName                String? // Denormalized for easy display
  approver                     User?                  @relation("Approver", fields: [approverId], references: [id])
  approverId                   String?
  currentApprover              User?                  @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  currentApproverId            String?
  department                   Department             @relation(fields: [departmentId], references: [id])
  departmentId                 String
  title                        String
  justification                String
  status                       String                 @default("Draft")
  urgency                      String                 @default("Low")
  totalPrice                   Float
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  approverComment              String?
  purchaseOrderId              String?
  items                        RequisitionItem[]
  customQuestions              CustomQuestion[]
  allowedVendorIds             String[]
  awardedQuoteItemIds          String[]               @default([])
  deadline                     DateTime?
  scoringDeadline              DateTime?
  awardResponseDeadline        DateTime?
  awardResponseDurationMinutes Int?
  evaluationCriteria           EvaluationCriteria?
  quotations                   Quotation[]
  contracts                    Contract[]
  purchaseOrders               PurchaseOrder[]
  financialCommitteeMembers    User[]                 @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers    User[]                 @relation("TechnicalCommitteeMembers")
tteeMembers")
  committeeName                String?
  committeePurpose             String?
  cpoAmount                    Float?
  rfqSettings                  Json?
  reviews                      Review[]
  committeeAssignments         CommitteeAssignment[]
}

model CommitteeAssignment {
  user              User                @relation(fields: [userId], references: [id])
  userId            String
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId     String
  scoresSubmitted   Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@id([userId, requisitionId])
}

model Review {
  id            String              @id @default(cuid())
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId String
  reviewer      User                @relation(fields: [reviewerId], references: [id])
  reviewerId    String
  decision      String // "Approved", "Rejected"
  comment       String?
  createdAt     DateTime            @default(now())
}

model RequisitionItem {
  id              String              @id @default(cuid())
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId   String
  name            String
  quantity        Int
  unitPrice       Float
  description     String?
  quoteItems      QuoteItem[]
  poItems         POItem[]
}

model CustomQuestion {
  id            String              @id @default(cuid())
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId String
  questionText  String
  questionType  String
  isRequired    Boolean             @default(false)
  options       String[]
  answers       QuoteAnswer[]
}

model EvaluationCriteria {
  id                  String                 @id @default(cuid())
  requisition         PurchaseRequisition    @relation(fields: [requisitionId], references: [id])
  requisitionId       String                 @unique
  financialWeight     Int
  technicalWeight     Int
  financialCriteria   FinancialCriterion[]
  technicalCriteria   TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Int
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Int
}

model Vendor {
  id            String        @id @default(cuid())
  user          User?
  name          String
  contactPerson String
  email         String        @unique
  phone         String
  address       String
  kycStatus     String        @default("Pending")
  rejectionReason String?
  kycDocuments  KYC_Document[]
  quotations    Quotation[]
  contracts     Contract[]
  purchaseOrders PurchaseOrder[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  vendorId    String
  name        String
  url         String
  submittedAt DateTime @default(now())
}

model Quotation {
  id                    String              @id @default(cuid())
  transactionId         String?
  requisition           PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId         String
  vendor                Vendor              @relation(fields: [vendorId], references: [id])
  vendorId              String
  vendorName            String // Denormalized for easy display
  totalPrice            Float
  deliveryDate          DateTime
  status                String              @default("Submitted")
  rank                  Int? // 1 for winner, 2 for 2nd, 3 for 3rd
  notes                 String?
  finalAverageScore     Float?
  cpoDocumentUrl        String?
  experienceDocumentUrl String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  items                 QuoteItem[]
  answers               QuoteAnswer[]
  scores                CommitteeScoreSet[]
}

model QuoteItem {
  id                String          @id @default(cuid())
  quotation         Quotation       @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId       String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  itemScores        ItemScore[]
}

model QuoteAnswer {
  id          String         @id @default(cuid())
  quotation   Quotation      @relation(fields: [quotationId], references