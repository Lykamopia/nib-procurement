
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  users       User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model User {
  id                      String                @id @default(cuid())
  name                    String
  email                   String                @unique
  password                String?
  role                    String
  vendor                  Vendor?
  vendorId                String?               @unique
  department              Department?           @relation(fields: [departmentId], references: [id])
  departmentId            String?
  createdRequisitions     PurchaseRequisition[] @relation("Requester")
  approvedRequisitions    PurchaseRequisition[] @relation("Approver")
  auditLogs               AuditLog[]
  goodsReceipts           GoodsReceiptNote[]
  committeeAssignments    CommitteeAssignment[]
  financialCommitteeFor   PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommitteeFor   PurchaseRequisition[] @relation("TechnicalCommitteeMembers")
  scoreSets               CommitteeScoreSet[]
  approvalLimit           Float?
  manager                 User?                 @relation("ManagerSubordinates", fields: [managerId], references: [id])
  managerId               String?
  subordinates            User[]                @relation("ManagerSubordinates")
  departmentHeadOf        Department?           @relation("DepartmentHead")
  currentApproverFor      PurchaseRequisition[] @relation("CurrentApprover")


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id           String                @id @default(cuid())
  name         String                @unique
  description  String?
  users        User[]
  requisitions PurchaseRequisition[]
  head         User?                 @relation("DepartmentHead", fields: [headId], references: [id])
  headId       String?               @unique
}

model PurchaseRequisition {
  id                   String      @id @default(cuid())
  transactionId        String?
  requester            User        @relation("Requester", fields: [requesterId], references: [id])
  requesterId          String
  requesterName        String
  title                String
  department           Department  @relation(fields: [departmentId], references: [id])
  departmentId         String
  items                RequisitionItem[]
  totalPrice           Float
  justification        String
  status               String      @default("Draft")
  urgency              String      @default("Low")
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  approver             User?       @relation("Approver", fields: [approverId], references: [id])
  approverId           String?
  approverComment      String?
  currentApprover      User?       @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  currentApproverId    String?
  contract             Contract?
  purchaseOrder        PurchaseOrder?
  purchaseOrderId      String?      @unique
  quotations           Quotation[]
  allowedVendorIds     String[]
  awardedQuoteItemIds  String[]
  customQuestions      CustomQuestion[]
  committeeAssignments CommitteeAssignment[]
  evaluationCriteria   EvaluationCriteria?

  financialCommitteeMembers   User[] @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers   User[] @relation("TechnicalCommitteeMembers")

  deadline                    DateTime?
  scoringDeadline             DateTime?
  awardResponseDeadline       DateTime?
  awardResponseDurationMinutes Int?
  committeeName               String?
  committeePurpose            String?
  cpoAmount                   Float?

  rfqSettings Json?

  @@index([requesterId])
  @@index([departmentId])
  @@index([status])
}

model RequisitionItem {
  id              String             @id @default(cuid())
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId   String
  name            String
  quantity        Int
  unitPrice       Float
  description     String?
  quoteItems      QuoteItem[]
  poItems         POItem[]           @relation("POItemToReqItem")
}

model EvaluationCriteria {
  id                String                 @id @default(cuid())
  requisition       PurchaseRequisition    @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId     String                 @unique
  financialWeight   Int
  technicalWeight   Int
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                    String                @id @default(cuid())
  evaluationCriteria    EvaluationCriteria    @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId  String
  name                  String
  weight                Int
  scores                FinancialScore[]
}

model TechnicalCriterion {
  id                    String                @id @default(cuid())
  evaluationCriteria    EvaluationCriteria    @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId  String
  name                  String
  weight                Int
  scores                TechnicalScore[]
}


model CustomQuestion {
  id              String             @id @default(cuid())
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references  : [id], onDelete: Cascade)
  requisitionId   String
  questionText    String
  questionType    String // 'text', 'boolean', 'multiple-choice', 'file'
  isRequired      Boolean            @default(true)
  options         String[]
  answers         QuoteAnswer[]
  requisitionItemId String? // Optional: link question to a specific item
}

model Vendor {
  id            String         @id @default(cuid())
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @unique
  name          String
  contactPerson String
  email         String         @unique
  phone         String
  address       String
  kycStatus     String         @default("Pending") // Pending, Verified, Rejected
  rejectionReason String?
  kycDocuments  KYC_Document[]
  quotations    Quotation[]
  contracts     Contract[]
  purchaseOrders PurchaseOrder[]
}

model KYC_Document {
    id          String   @id @default(cuid())
    vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
    vendorId    String
    name        String
    url         String
    submittedAt DateTime
}


model Quotation {
  id                      String              @id @default(cuid())
  transactionId           String?
  requisition             PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId           String
  vendor                  Vendor              @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId                String
  vendorName              String
  items                   QuoteItem[]
  totalPrice              Float
  deliveryDate            DateTime
  createdAt               DateTime            @default(now())
  status                  String              @default("Submitted")
  notes                   String?
  rank                    Int?
  answers                 QuoteAnswer[]
  scores                  CommitteeScoreSet[]
  finalAverageScore       Float?
  cpoDocumentUrl          String?
  experienceDocumentUrl   String?
}

model QuoteItem {
  id                String       @id @default(cuid())
  quotation         Quotation    @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId       String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id], onDelete: Restrict) // Don't delete req item if quote item exists
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  itemScores        ItemScore[]
}

model QuoteAnswer {
  id          String   @id @default(cuid())
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId String
  question    CustomQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String
  answer      String
}

model CommitteeScoreSet {
    id                String        @id @default(cuid())
    quotation         Quotation     @relation(fields: [quotationId], references: [id], onDelete: Cascade)
    quotationId       String
    scorer            User          @relation(fields: [scorerId], references: [id])
    scorerId          String
    scorerName        String
    itemScores        ItemScore[]
    committeeComment  String?
    finalScore        Float
    submittedAt       DateTime      @default(now())
}

model ItemScore {
    id              String            @id @default(cuid())
    scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
    scoreSetId      String
    quoteItem       QuoteItem         @relation(fields: [quoteItemId], references: [id], onDelete: Cascade)
    quoteItemId     String
    financialScores FinancialScore[]
    technicalScores TechnicalScore[]
    finalScore      Float

    @@unique([scoreSetId, quoteItemId])
}


model FinancialScore {
  id             String             @id @default(cuid())
  itemScore      ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId    String
  criterion      FinancialCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  criterionId    String
  score          Int
  comment        String?
}

model TechnicalScore {
  id             String             @id @default(cuid())
  itemScore      ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId    String
  criterion      TechnicalCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  criterionId    String
  score          Int
  comment        String?
}


model PurchaseOrder {
  id              String             @id @default(cuid())
  transactionId   String?
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId   String             @unique
  requisitionTitle String
  vendor          Vendor             @relation(fields: [vendorId], references: [id])
  vendorId        String
  items           POItem[]
  totalAmount     Float
  status          String             @default("Issued")
  createdAt       DateTime           @default(now())
  receipts        GoodsReceiptNote[]
  invoices        Invoice[]
}

model POItem {
    id String @id @default(cuid())
    purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
    purchaseOrderId String
    requisitionItem RequisitionItem @relation("POItemToReqItem", fields: [requisitionItemId], references: [id])
    requisitionItemId String @unique
    name String
    quantity Int
    unitPrice Float
    totalPrice Float
    receivedQuantity Int
    receiptItems ReceiptItem[]
}

model GoodsReceiptNote {
    id String @id @default(cuid())
    transactionId   String?
    purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
    purchaseOrderId String
    receivedBy User @relation(fields: [receivedById], references: [id])
    receivedById String
    receivedDate DateTime @default(now())
    items ReceiptItem[]
}

model ReceiptItem {
    id String @id @default(cuid())
    goodsReceiptNote GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
    goodsReceiptNoteId String
    poItem POItem @relation(fields: [poItemId], references: [id])
    poItemId String
    quantityReceived Int
    condition String
    notes String?
}

model Invoice {
  id                String        @id @default(cuid())
  transactionId     String?
  po                PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId   String
  vendorId          String
  invoiceDate       DateTime
  items             InvoiceItem[]
  totalAmount       Float
  status            String        @default("Pending")
  documentUrl       String?
  paymentDate       DateTime?
  paymentReference  String?
}

model InvoiceItem {
    id String @id @default(cuid())
    invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    invoiceId String
    name String
    quantity Int
    unitPrice Float
    totalPrice Float
}

model Contract {
    id              String    @id @default(cuid())
    contractNumber  String    @unique @default(cuid())
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    requisitionId   String    @unique
    vendor          Vendor    @relation(fields: [vendorId], references: [id])
    vendorId        String
    startDate       DateTime
    endDate         DateTime
    filePath        String?
    status          String    @default("Draft") // Draft, Active, Expired
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
}

model AuditLog {
  id            String   @id @default(cuid())
  transactionId String?
  timestamp     DateTime
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String
}

model CommitteeAssignment {
  userId          String
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  scoresSubmitted Boolean             @default(false)
  
  @@id([userId, requisitionId])
}
