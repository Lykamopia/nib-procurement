// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                @id @default(cuid())
  name                      String
  email                     String                @unique
  password                  String
  roleName                  UserRole
  role                      Role                  @relation(fields: [roleName], references: [name])
  departmentId              String?
  department                Department?           @relation(fields: [departmentId], references: [id])
  approvalLimit             Float?
  managerId                 String?
  manager                   User?                 @relation("UserHierarchy", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reports                   User[]                @relation("UserHierarchy")
  vendorId                  String?               @unique
  vendor                    Vendor?
  createdRequisitions       PurchaseRequisition[] @relation("Requester")
  approvedRequisitions      PurchaseRequisition[] @relation("Approver")
  currentApprovals          PurchaseRequisition[] @relation("CurrentApprover")
  committeeAssignments      CommitteeAssignment[]
  createdContracts          Contract[]
  scoredQuotes              CommitteeScoreSet[]
  goodsReceipts             GoodsReceiptNote[]    @relation("ReceivedBy")
  auditLogs                 AuditLog[]
  financialCommitteeOn      PurchaseRequisition[] @relation("FinancialCommittee")
  technicalCommitteeOn      PurchaseRequisition[] @relation("TechnicalCommittee")
}

model Department {
  id           String                @id @default(cuid())
  name         String                @unique
  users        User[]
  requisitions PurchaseRequisition[]
}

model Role {
  name        UserRole      @id @unique
  permissions PermissionsOnRoles[]
  users       User[]
}

model Permission {
  id        String    @id @default(cuid())
  action    PermissionAction
  subject   PermissionSubject
  roles     PermissionsOnRoles[]
  @@unique([action, subject])
}

model PermissionsOnRoles {
    role         Role       @relation(fields: [roleName], references: [name])
    roleName     UserRole
    permission   Permission @relation(fields: [permissionId], references: [id])
    permissionId String
    assignedAt   DateTime   @default(now())

    @@id([roleName, permissionId])
}

model Vendor {
  id              String                @id @default(cuid())
  user            User                  @relation(fields: [userId], references: [id])
  userId          String                @unique
  name            String
  contactPerson   String
  email           String                @unique
  phone           String
  address         String
  kycStatus       KycStatus             @default(Pending)
  rejectionReason String?
  kycDocuments    KYC_Document[]
  quotations      Quotation[]
  contracts       Contract[]
  purchaseOrders  PurchaseOrder[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  vendorId    String
  name        String
  url         String
  submittedAt DateTime @default(now())
}

model PurchaseRequisition {
  id                        String                @id @default(cuid())
  transactionId             String?               @unique
  requester                 User                  @relation("Requester", fields: [requesterId], references: [id])
  requesterId               String
  title                     String
  department                Department            @relation(fields: [departmentId], references: [id])
  departmentId              String
  status                    RequisitionStatus
  justification             String
  totalPrice                Float
  items                     RequisitionItem[]
  customQuestions           CustomQuestion[]
  committeeAssignments      CommitteeAssignment[]
  approver                  User?                 @relation("Approver", fields: [approverId], references: [id])
  approverId                String?
  approverComment           String?
  currentApprover           User?                 @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  currentApproverId         String?
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime              @updatedAt
  quotations                Quotation[]
  evaluationCriteria        EvaluationCriteria?
  financialCommitteeMembers User[]                @relation("FinancialCommittee")
  technicalCommitteeMembers User[]                @relation("TechnicalCommittee")
  committeeName             String?
  committeePurpose          String?
  negotiationNotes          String?
  allowedVendorIds          String[]
  awardedQuoteItemIds       String[]
  deadline                  DateTime?
  scoringDeadline           DateTime?
  awardResponseDeadline     DateTime?
  awardResponseDurationMinutes Int?
  cpoAmount                 Float?
  rfqSettings               Json?
  purchaseOrderId           String?               @unique
  purchaseOrder             PurchaseOrder?
  contracts                 Contract[]
}

model RequisitionItem {
  id            String              @id @default(cuid())
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId String
  name          String
  description   String?
  quantity      Int
  unitPrice     Float
  quoteItems    QuoteItem[]
}

model CustomQuestion {
  id            String              @id @default(cuid())
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId String
  questionText  String
  questionType  QuestionType
  options       String[]
  isRequired    Boolean             @default(true)
  answers       QuoteAnswer[]
}

model EvaluationCriteria {
  id                String               @id @default(cuid())
  requisition       PurchaseRequisition  @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId     String               @unique
  financialWeight   Float
  technicalWeight   Float
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String        @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Float
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String         @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Float
  scores               TechnicalScore[]
}

model Quotation {
  id                    String              @id @default(cuid())
  transactionId         String?
  requisition           PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId         String
  vendor                Vendor              @relation(fields: [vendorId], references: [id])
  vendorId              String
  vendorName            String
  totalPrice            Float
  deliveryDate          DateTime
  status                QuotationStatus
  notes                 String?
  rank                  Int?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  items                 QuoteItem[]
  answers               QuoteAnswer[]
  scores                CommitteeScoreSet[]
  finalAverageScore     Float?
  cpoDocumentUrl        String?
  experienceDocumentUrl String?
}

model QuoteItem {
  id                String        @id @default(cuid())
  quotation         Quotation     @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId       String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  itemScores        ItemScore[]
}

model QuoteAnswer {
  id          String         @id @default(cuid())
  quotation   Quotation      @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId String
  question    CustomQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String
  answer      String
}

model CommitteeScoreSet {
  id               String      @id @default(cuid())
  quotation        Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId      String
  scorer           User        @relation(fields: [scorerId], references: [id])
  scorerId         String
  scorerName       String
  committeeComment String?
  finalScore       Float
  itemScores       ItemScore[]
  submittedAt      DateTime    @default(now())
}

model ItemScore {
  id              String           @id @default(cuid())
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  scoreSetId      String
  quoteItem       QuoteItem        @relation(fields: [quoteItemId], references: [id], onDelete: Cascade)
  quoteItemId     String           @unique
  finalScore      Float
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
}

model FinancialScore {
  id          String             @id @default(cuid())
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId String
  criterion   FinancialCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  criterionId String
  score       Float
  comment     String?
}

model TechnicalScore {
  id          String             @id @default(cuid())
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId String
  criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  criterionId String
  score       Float
  comment     String?
}

model Contract {
  id              String              @id @default(cuid())
  contractNumber  String              @unique @default(cuid())
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId   String
  vendor          Vendor              @relation(fields: [vendorId], references: [id])
  vendorId        String
  startDate       DateTime
  endDate         DateTime
  status          String
  filePath        String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  createdBy       User                @relation(fields: [createdById], references: [id])
  createdById     String
}

model PurchaseOrder {
  id               String             @id @default(cuid())
  transactionId    String?
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId    String             @unique
  requisitionTitle String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  vendorId         String
  totalAmount      Float
  status           PurchaseOrderStatus
  items            POItem[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id                String         @id @default(cuid())
  purchaseOrder     PurchaseOrder  @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  purchaseOrderId   String
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int            @default(0)
  receiptItems      ReceiptItem[]
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  receivedBy      User          @relation("ReceivedBy", fields: [receivedById], references: [id])
  receivedById    String
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]
}

model ReceiptItem {
  id               String           @id @default(cuid())
  grn              GoodsReceiptNote @relation(fields: [grnId], references: [id], onDelete: Cascade)
  grnId            String
  poItem           POItem           @relation(fields: [poItemId], references: [id])
  poItemId         String
  quantityReceived Int
  condition        ReceiptCondition
  notes            String?
}

model Invoice {
  id               String        @id @default(cuid())
  transactionId    String?
  po               PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId  String
  vendorId         String
  invoiceDate      DateTime
  totalAmount      Float
  status           InvoiceStatus
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  items            InvoiceItem[]
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId   String
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime  @default(now())
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String
}

model CommitteeAssignment {
  user            User                @relation(fields: [userId], references: [id])
  userId          String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId   String
  scoresSubmitted Boolean             @default(false)

  @@id([userId, requisitionId])
}

enum QuestionType {
  text
  boolean
  multiple_choice
  file
}

enum ReceiptCondition {
  Good
  Damaged
  Incorrect
}

enum InvoiceStatus {
  Pending
  Approved_for_Payment
  Paid
  Disputed
}

enum PurchaseOrderStatus {
  Issued
  Acknowledged
  Shipped
  Partially_Delivered
  Delivered
  Cancelled
  Matched
  Mismatched
  On_Hold
}

enum KycStatus {
  Pending
  Verified
  Rejected
}

enum QuotationStatus {
  Submitted
  Awarded
  Partially_Awarded
  Rejected
  Standby
  Invoice_Submitted
  Failed
  Accepted
  Declined
}

enum RequisitionStatus {
  Draft
  Pending_Approval
  Pending_Managerial_Approval
  Approved
  Rejected
  RFQ_In_Progress
  PO_Created
  Fulfilled
  Closed
}

enum UserRole {
  Admin
  Procurement_Officer
  Requester
  Approver
  Finance
  Receiving
  Committee_Member
  Committee
  Vendor
}

enum PermissionAction {
  VIEW
  CREATE
  EDIT
  DELETE
  APPROVE
  REJECT
  SUBMIT
  VERIFY
  SEND
  MANAGE
  FINALIZE_SCORES
  SCORE
  SUBMIT_SCORES
  PROCESS
}

enum PermissionSubject {
  DASHBOARD
  REQUISITIONS
  APPROVALS
  VENDORS
  QUOTATIONS
  CONTRACTS
  PURCHASE_ORDERS
  INVOICES
  GOODS_RECEIPT
  RECORDS
  AUDIT_LOG
  SETTINGS
  REQUISITION
  VENDOR
  RFQ
  COMMITTEE
  PAYMENT
  PERMISSIONS
}
