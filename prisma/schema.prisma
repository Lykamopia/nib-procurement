
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  name           String
  email          String        @unique
  password       String
  role           String
  departmentId   String?
  department     Department?   @relation(fields: [departmentId], references: [id])
  vendorId       String?       @unique
  vendor         Vendor?       @relation(fields: [vendorId], references: [id])
  managerId      String?
  manager        User?         @relation("ManagerSubordinates", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates   User[]        @relation("ManagerSubordinates")
  approvalLimit  Float?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  requisitions   PurchaseRequisition[] @relation("Requester")
  approvedRequisitions PurchaseRequisition[] @relation("Approver")
  currentApprovals PurchaseRequisition[] @relation("CurrentApprover")
  financialCommitteeFor PurchaseRequisition[] @relation("FinancialCommittee")
  technicalCommitteeFor PurchaseRequisition[] @relation("TechnicalCommittee")

  receipts       GoodsReceiptNote[]
  committeeAssignments CommitteeAssignment[]
  auditLogs      AuditLog[]
  reviews        Review[]
}

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  headId      String?  @unique
  head        User?    @relation(fields: [headId], references: [id])
  users       User[]
  requisitions PurchaseRequisition[]
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String?
}

model Vendor {
  id            String         @id @default(cuid())
  name          String
  contactPerson String
  email         String         @unique
  phone         String
  address       String
  userId        String         @unique
  user          User?
  kycStatus     String
  rejectionReason String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  kycDocuments  KYC_Document[]
  quotations    Quotation[]
  purchaseOrders PurchaseOrder[]
  contracts     Contract[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  name        String
  url         String
  submittedAt DateTime
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model PurchaseRequisition {
  id            String       @id @default(cuid())
  transactionId String?      @unique
  requesterId   String
  requester     User         @relation("Requester", fields: [requesterId], references: [id])
  approverId    String?
  approver      User?        @relation("Approver", fields: [approverId], references: [id])
  currentApproverId String?
  currentApprover User?      @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  
  departmentId  String?
  department    Department?  @relation(fields: [departmentId], references: [id])

  title         String
  justification String
  totalPrice    Float
  status        String
  urgency       String
  
  deadline      DateTime?
  scoringDeadline DateTime?
  awardResponseDeadline DateTime?
  awardResponseDurationMinutes Int?
  
  items         RequisitionItem[]
  customQuestions CustomQuestion[]
  evaluationCriteria EvaluationCriteria?
  
  allowedVendorIds String[]
  awardedQuoteItemIds String[]
  rfqSettings Json?

  committeeName     String?
  committeePurpose  String?
  financialCommitteeMembers User[] @relation("FinancialCommittee")
  technicalCommitteeMembers User[] @relation("TechnicalCommittee")
  committeeAssignments CommitteeAssignment[]
  
  purchaseOrderId String?
  quotations    Quotation[]
  contract      Contract?
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  reviews       Review[] // ADDED THIS
}

model RequisitionItem {
  id              String   @id @default(cuid())
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  name            String
  quantity        Int
  unitPrice       Float
  description     String?
  
  quoteItems    QuoteItem[]
  poItems       POItem[]
}

model CustomQuestion {
  id                String    @id @default(cuid())
  requisitionId     String
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  questionText      String
  questionType      String
  isRequired        Boolean   @default(true)
  options           String[]
  requisitionItemId String?
  answers           QuoteAnswer[]
}

model EvaluationCriteria {
  id                String       @id @default(cuid())
  requisitionId     String       @unique
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  financialWeight   Float
  technicalWeight   Float
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                    String   @id @default(cuid())
  evaluationCriteriaId  String
  evaluationCriteria    EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                  String
  weight                Float
  scores                FinancialScore[]
}

model TechnicalCriterion {
  id                    String   @id @default(cuid())
  evaluationCriteriaId  String
  evaluationCriteria    EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                  String
  weight                Float
  scores                TechnicalScore[]
}

model Quotation {
  id            String   @id @default(cuid())
  transactionId String?
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  vendorId      String
  vendor        Vendor   @relation(fields: [vendorId], references: [id])
  vendorName    String
  totalPrice    Float
  deliveryDate  DateTime
  status        String
  notes         String?
  rank          Int?
  cpoDocumentUrl String?
  experienceDocumentUrl String?
  finalAverageScore Float?
  
  items         QuoteItem[]
  answers       QuoteAnswer[]
  scores        CommitteeScoreSet[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model QuoteItem {
  id                String   @id @default(cuid())
  quotationId       String
  quotation         Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  requisitionItemId String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  scores            ItemScore[]
}

model QuoteAnswer {
  id          String   @id @default(cuid())
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  questionId  String
  question    CustomQuestion @relation(fields: [questionId], references: [id])
  answer      String
}

model CommitteeAssignment {
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  scoresSubmitted Boolean  @default(false)

  @@id([userId, requisitionId])
}

model CommitteeScoreSet {
  id            String   @id @default(cuid())
  quotationId   String
  quotation     Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  scorerId      String
  scorer        User     @relation(fields: [scorerId], references: [id])
  scorerName    String
  committeeComment String?
  finalScore    Float
  submittedAt   DateTime @default(now())
  
  itemScores    ItemScore[]
  
  @@unique([quotationId, scorerId])
}

model ItemScore {
  id              String  @id @default(cuid())
  scoreSetId      String
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  quoteItemId     String
  quoteItem       QuoteItem @relation(fields: [quoteItemId], references: [id])
  finalScore      Float
  
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
}

model FinancialScore {
  id           String      @id @default(cuid())
  itemScoreId  String
  itemScore    ItemScore   @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  criterionId  String
  criterion    FinancialCriterion @relation(fields: [criterionId], references: [id])
  score        Int
  comment      String?
}

model TechnicalScore {
  id           String      @id @default(cuid())
  itemScoreId  String
  itemScore    ItemScore   @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  criterionId  String
  criterion    TechnicalCriterion @relation(fields: [criterionId], references: [id])
  score        Int
  comment      String?
}

model PurchaseOrder {
  id                String    @id @default(cuid())
  transactionId     String?
  requisitionId     String
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionTitle  String
  vendorId          String
  vendor            Vendor    @relation(fields: [vendorId], references: [id])
  totalAmount       Float
  status            String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  items             POItem[]
  receipts          GoodsReceiptNote[]
  invoices          Invoice[]
}

model POItem {
  id                String   @id @default(cuid())
  poId              String
  purchaseOrder     PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)
  requisitionItemId String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int
  
  receiptItems      ReceiptItem[]
}

model GoodsReceiptNote {
  id                String      @id @default(cuid())
  transactionId     String?
  purchaseOrderId   String
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedById      String
  receivedBy        User        @relation(fields: [receivedById], references: [id])
  receivedDate      DateTime    @default(now())
  
  items             ReceiptItem[]
}

model ReceiptItem {
  id                  String   @id @default(cuid())
  goodsReceiptNoteId  String
  goodsReceiptNote    GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  poItemId            String
  poItem              POItem   @relation(fields: [poItemId], references: [id])
  quantityReceived    Int
  condition           String
  notes               String?
}

model Invoice {
  id                String    @id @default(cuid())
  transactionId     String?
  purchaseOrderId   String
  po                PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  vendorId          String
  invoiceDate       DateTime
  totalAmount       Float
  status            String
  documentUrl       String?
  paymentDate       DateTime?
  paymentReference  String?
  
  items             InvoiceItem[]
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model Contract {
  id              String   @id @default(cuid())
  contractNumber  String   @unique @default(cuid())
  requisitionId   String   @unique
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendorId        String
  vendor          Vendor   @relation(fields: [vendorId], references: [id])
  startDate       DateTime
  endDate         DateTime
  status          String
  filePath        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Review {
  id            String   @id @default(cuid())
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  reviewerId    String
  reviewer      User     @relation(fields: [reviewerId], references: [id])
  committeeType String
  decision      String
  comment       String
  createdAt     DateTime @default(now())
}


model AuditLog {
  id            String   @id @default(cuid())
  transactionId String?
  timestamp     DateTime @default(now())
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
  action        String
  entity        String
  entityId      String
  details       String
}
