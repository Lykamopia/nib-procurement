
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  users       User[]
}

model Department {
  id           String   @id @default(cuid())
  name         String   @unique
  description  String?
  users        User[]   @relation("UserToDepartment")
  requisitions PurchaseRequisition[]
  head         User?    @relation("DepartmentHead", fields: [headId], references: [id])
  headId       String?  @unique
}

model User {
  id                       String                 @id @default(cuid())
  name                     String
  email                    String                 @unique
  password                 String
  role                     Role                   @relation(fields: [roleName], references: [name])
  roleName                 String
  department               Department?            @relation("UserToDepartment", fields: [departmentId], references: [id])
  departmentId             String?
  vendor                   Vendor?                @relation(fields: [vendorId], references: [id])
  vendorId                 String?                @unique
  createdRequisitions      PurchaseRequisition[]  @relation("Requester")
  approvedRequisitions     PurchaseRequisition[]  @relation("Approver")
  currentApproverForReqs   PurchaseRequisition[]  @relation("CurrentApprover")
  managedDepartment        Department?            @relation("DepartmentHead")
  committeeAssignments     CommitteeAssignment[]
  createdAuditLogs         AuditLog[]
  goodsReceipts            GoodsReceiptNote[]
  financialCommitteeFor    PurchaseRequisition[]  @relation("FinancialCommitteeMembers")
  technicalCommitteeFor    PurchaseRequisition[]  @relation("TechnicalCommitteeMembers")
  committeeScoreSets       CommitteeScoreSet[]
  manager                  User?                  @relation("ManagerSubordinate", fields: [managerId], references: [id])
  managerId                String?
  subordinates             User[]                 @relation("ManagerSubordinate")
  approvalLimit            Float?

  @@index([departmentId])
  @@index([roleName])
  @@index([managerId])
}

model Vendor {
  id            String         @id @default(cuid())
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @unique
  name          String
  contactPerson String
  email         String         @unique
  phone         String
  address       String
  kycStatus     String         @default("Pending") // Pending, Verified, Rejected
  rejectionReason String?
  kycDocuments  KYC_Document[]
  quotations    Quotation[]
  purchaseOrders PurchaseOrder[]
  contracts     Contract[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId    String
  name        String
  url         String
  submittedAt DateTime @default(now())

  @@index([vendorId])
}

model PurchaseRequisition {
  id                           String                 @id @default(cuid())
  transactionId                String?                @unique
  requester                    User                   @relation("Requester", fields: [requesterId], references: [id])
  requesterId                  String
  requesterName                String
  department                   Department?            @relation(fields: [departmentId], references: [id])
  departmentId                 String?
  title                        String
  justification                String
  status                       String                 @default("Draft")
  urgency                      String                 @default("Low")
  totalPrice                   Float
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  approver                     User?                  @relation("Approver", fields: [approverId], references: [id])
  approverId                   String?
  approverComment              String?
  currentApprover              User?                  @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  currentApproverId            String?                @unique
  purchaseOrderId              String?                @unique
  deadline                     DateTime?
  scoringDeadline              DateTime?
  awardResponseDeadline        DateTime?
  awardResponseDurationMinutes Int?
  committeeName                String?
  committeePurpose             String?
  cpoAmount                    Float?
  rfqSettings                  Json                   @default("{}")
  allowedVendorIds             String[]
  awardedQuoteItemIds          String[]
  items                        RequisitionItem[]
  customQuestions              CustomQuestion[]
  evaluationCriteria           EvaluationCriteria?
  quotations                   Quotation[]
  purchaseOrder                PurchaseOrder?
  financialCommitteeMembers    User[]                 @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers    User[]                 @relation("TechnicalCommitteeMembers")
  committeeAssignments         CommitteeAssignment[]
  contract                     Contract?

  @@index([requesterId])
  @@index([approverId])
  @@index([departmentId])
}

model RequisitionItem {
  id              String            @id @default(cuid())
  purchaseRequisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId   String
  name            String
  quantity        Int
  unitPrice       Float
  description     String?
  quoteItems      QuoteItem[]
  poItems         POItem[]

  @@index([requisitionId])
}

model CustomQuestion {
  id            String            @id @default(cuid())
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId String
  questionText  String
  questionType  String
  isRequired    Boolean           @default(true)
  options       String[]
  answers       QuoteAnswer[]

  @@index([requisitionId])
}

model EvaluationCriteria {
  id                String                 @id @default(cuid())
  requisition       PurchaseRequisition    @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId     String                 @unique
  financialWeight   Int
  technicalWeight   Int
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Int
  scores               FinancialScore[]

  @@index([evaluationCriteriaId])
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Int
  scores               TechnicalScore[]

  @@index([evaluationCriteriaId])
}

model Quotation {
  id             String              @id @default(cuid())
  transactionId  String?
  requisition    PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId  String
  vendor         Vendor              @relation(fields: [vendorId], references: [id])
  vendorId       String
  vendorName     String
  totalPrice     Float
  deliveryDate   DateTime
  createdAt      DateTime            @default(now())
  status         String              @default("Submitted")
  rank           Int?
  notes          String?
  items          QuoteItem[]
  answers        QuoteAnswer[]
  scores         CommitteeScoreSet[]
  finalAverageScore Float?
  cpoDocumentUrl String?
  experienceDocumentUrl String?


  @@index([requisitionId])
  @@index([vendorId])
}

model QuoteItem {
  id                String       @id @default(cuid())
  quotation         Quotation    @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId       String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  scores            ItemScore[]

  @@index([quotationId])
  @@index([requisitionItemId])
}

model QuoteAnswer {
  id          String    @id @default(cuid())
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId String
  question    CustomQuestion @relation(fields: [questionId], references: [id])
  questionId  String
  answer      String

  @@index([quotationId])
  @@index([questionId])
}

model CommitteeAssignment {
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId String
  scoresSubmitted Boolean @default(false)

  @@id([userId, requisitionId])
  @@index([userId])
  @@index([requisitionId])
}

model CommitteeScoreSet {
  id               String       @id @default(cuid())
  quotation        Quotation    @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId      String
  scorer           User         @relation(fields: [scorerId], references: [id])
  scorerId         String
  scorerName       String
  committeeComment String?
  itemScores       ItemScore[]
  finalScore       Float
  submittedAt      DateTime     @default(now())

  @@index([quotationId])
  @@index([scorerId])
}

model ItemScore {
  id              String            @id @default(cuid())
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  scoreSetId      String
  quoteItem       QuoteItem         @relation(fields: [quoteItemId], references: [id])
  quoteItemId     String            @unique
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
  finalScore      Float

  @@index([scoreSetId])
}


model FinancialScore {
  id        String             @id @default(cuid())
  itemScore ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId String
  criterion FinancialCriterion @relation(fields: [criterionId], references: [id])
  criterionId String
  score     Int
  comment   String?

  @@index([itemScoreId])
  @@index([criterionId])
}

model TechnicalScore {
  id        String             @id @default(cuid())
  itemScore ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId String
  criterion TechnicalCriterion @relation(fields: [criterionId], references: [id])
  criterionId String
  score     Int
  comment   String?

  @@index([itemScoreId])
  @@index([criterionId])
}

model PurchaseOrder {
  id               String             @id @default(cuid())
  transactionId    String?
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId    String             @unique
  requisitionTitle String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  vendorId         String
  totalAmount      Float
  status           String             @default("Issued")
  createdAt        DateTime           @default(now())
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]

  @@index([requisitionId])
  @@index([vendorId])
}

model POItem {
  id                 String          @id @default(cuid())
  purchaseOrder      PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  purchaseOrderId  String
  requisitionItem    RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId  String          @unique
  name               String
  quantity           Int
  unitPrice          Float
  totalPrice         Float
  receivedQuantity   Int             @default(0)
  receiptItems       ReceiptItem[]

  @@index([purchaseOrderId])
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedById    String
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]

  @@index([purchaseOrderId])
  @@index([receivedById])
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  goodsReceiptNoteId String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  poItemId           String
  quantityReceived   Int
  condition          String
  notes              String?

  @@index([goodsReceiptNoteId])
  @@index([poItemId])
}

model Invoice {
  id               String        @id @default(cuid())
  transactionId    String?
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId  String
  vendorId         String
  invoiceDate      DateTime
  totalAmount      Float
  status           String        @default("Pending")
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  items            InvoiceItem[]
  po               PurchaseOrder @relation(name: "InvoiceToPO", fields: [purchaseOrderId], references: [id])


  @@index([purchaseOrderId])
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId   String
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float

  @@index([invoiceId])
}

model Contract {
    id              String @id @default(cuid())
    contractNumber  String @unique @default(cuid())
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    requisitionId   String @unique
    vendor          Vendor @relation(fields: [vendorId], references: [id])
    vendorId        String
    startDate       DateTime
    endDate         DateTime
    filePath        String?
    status          String @default("Draft")
    createdAt       DateTime @default(now())

    @@index([requisitionId])
    @@index([vendorId])
}


model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime  @default(now())
  user          User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String

  @@index([userId])
  @@index([transactionId])
}
