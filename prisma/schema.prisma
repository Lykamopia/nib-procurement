
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String                @id @default(cuid())
  name                       String
  email                      String                @unique
  password                   String
  role                       String
  vendorId                   String?               @unique
  vendor                     Vendor?
  departmentId               String?
  department                 Department?           @relation(fields: [departmentId], references: [id])
  approvalLimit              Float?
  managerId                  String?
  manager                    User?                 @relation("UserHierarchy", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates               User[]                @relation("UserHierarchy")
  headOf                     Department[]          @relation("DepartmentHead")
  createdRequisitions        PurchaseRequisition[] @relation("Requester")
  approvedRequisitions       PurchaseRequisition[] @relation("Approver")
  currentApproverForReqs     PurchaseRequisition[] @relation("CurrentApprover")
  receipts                   GoodsReceiptNote[]
  financialCommitteeFor      PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommitteeFor      PurchaseRequisition[] @relation("TechnicalCommitteeMembers")
  committeeAssignments       CommitteeAssignment[]
  scores                     CommitteeScoreSet[]
  auditLogs                  AuditLog[]
}

model Department {
  id           String                @id @default(cuid())
  name         String                @unique
  description  String?
  headId       String?               @unique
  head         User?                 @relation("DepartmentHead", fields: [headId], references: [id])
  users        User[]
  requisitions PurchaseRequisition[]
}

model Vendor {
  id              String                @id @default(cuid())
  user            User                  @relation(fields: [userId], references: [id])
  userId          String                @unique
  name            String
  contactPerson   String
  email           String                @unique
  phone           String
  address         String
  kycStatus       String
  rejectionReason String?
  kycDocuments    KYC_Document[]
  quotations      Quotation[]
  purchaseOrders  PurchaseOrder[]
  contracts       Contract[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  vendorId    String
  name        String
  url         String
  submittedAt DateTime @default(now())
}

model PurchaseRequisition {
  id                           String                 @id @default(cuid())
  transactionId                String?
  requester                    User                   @relation("Requester", fields: [requesterId], references: [id])
  requesterId                  String
  requesterName                String
  department                   Department             @relation(fields: [departmentId], references: [id])
  departmentId                 String
  title                        String
  justification                String
  status                       String
  urgency                      String
  totalPrice                   Float
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  approver                     User?                  @relation("Approver", fields: [approverId], references: [id])
  approverId                   String?
  approverComment              String?
  currentApprover              User?                  @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  currentApproverId            String?
  purchaseOrderId              String?                @unique
  purchaseOrder                PurchaseOrder?
  deadline                     DateTime?
  scoringDeadline              DateTime?
  awardResponseDeadline        DateTime?
  awardResponseDurationMinutes Int?
  committeeName                String?
  committeePurpose             String?
  cpoAmount                    Float?
  rfqSettings                  Json?
  allowedVendorIds             String[]
  awardedQuoteItemIds          String[]
  items                        RequisitionItem[]
  customQuestions              CustomQuestion[]
  evaluationCriteria           EvaluationCriteria?
  quotations                   Quotation[]
  financialCommitteeMembers    User[]                 @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers    User[]                 @relation("TechnicalCommitteeMembers")
  committeeAssignments         CommitteeAssignment[]
  contract                     Contract?
}

model RequisitionItem {
  id                      String              @id @default(cuid())
  purchaseRequisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId           String
  name                    String
  description             String?
  quantity                Int
  unitPrice               Float
  purchaseOrderItem       POItem?
}

model CustomQuestion {
  id            String              @id @default(cuid())
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId String
  questionText  String
  questionType  String
  isRequired    Boolean             @default(true)
  options       String[]
  answers       QuoteAnswer[]
}

model EvaluationCriteria {
  id                String                 @id @default(cuid())
  requisition       PurchaseRequisition    @relation(fields: [requisitionId], references: [id])
  requisitionId     String                 @unique
  financialWeight   Float
  technicalWeight   Float
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                     String             @id @default(cuid())
  evaluationCriteria     EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  evaluationCriteriaId   String
  name                   String
  weight                 Float
  scores                 FinancialScore[]
}

model TechnicalCriterion {
  id                     String             @id @default(cuid())
  evaluationCriteria     EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  evaluationCriteriaId   String
  name                   String
  weight                 Float
  scores                 TechnicalScore[]
}

model Quotation {
  id                    String              @id @default(cuid())
  transactionId         String?
  requisition           PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId         String
  vendor                Vendor              @relation(fields: [vendorId], references: [id])
  vendorId              String
  vendorName            String
  totalPrice            Float
  deliveryDate          DateTime
  status                String
  notes                 String?
  rank                  Int?
  cpoDocumentUrl        String?
  experienceDocumentUrl String?
  finalAverageScore     Float?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  items                 QuoteItem[]
  answers               QuoteAnswer[]
  scores                CommitteeScoreSet[]
}

model QuoteItem {
  id               String      @id @default(cuid())
  quotation        Quotation   @relation(fields: [quotationId], references: [id])
  quotationId      String
  requisitionItemId String
  name             String
  brandDetails     String?
  quantity         Int
  unitPrice        Float
  leadTimeDays     Int
  scores           ItemScore[]
}

model QuoteAnswer {
  id          String         @id @default(cuid())
  quotation   Quotation      @relation(fields: [quotationId], references: [id])
  quotationId String
  question    CustomQuestion @relation(fields: [questionId], references: [id])
  questionId  String
  answer      String
}

model CommitteeAssignment {
  user            User                @relation(fields: [userId], references: [id])
  userId          String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId   String
  scoresSubmitted Boolean             @default(false)

  @@id([userId, requisitionId])
}

model CommitteeScoreSet {
  id               String      @id @default(cuid())
  quotation        Quotation   @relation(fields: [quotationId], references: [id])
  quotationId      String
  scorer           User        @relation(fields: [scorerId], references: [id])
  scorerId         String
  scorerName       String
  committeeComment String?
  finalScore       Float
  submittedAt      DateTime    @default(now())
  itemScores       ItemScore[]
}

model ItemScore {
  id              String            @id @default(cuid())
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id])
  scoreSetId      String
  quoteItem       QuoteItem         @relation(fields: [quoteItemId], references: [id])
  quoteItemId     String            @unique
  finalScore      Float
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
}

model FinancialScore {
  id          String             @id @default(cuid())
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id])
  itemScoreId String
  criterion   FinancialCriterion @relation(fields: [criterionId], references: [id])
  criterionId String
  score       Float
  comment     String?

  @@unique([itemScoreId, criterionId])
}

model TechnicalScore {
  id          String             @id @default(cuid())
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id])
  itemScoreId String
  criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id])
  criterionId String
  score       Float
  comment     String?

  @@unique([itemScoreId, criterionId])
}

model PurchaseOrder {
  id               String             @id @default(cuid())
  transactionId    String?
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId    String             @unique
  requisitionTitle String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  vendorId         String
  totalAmount      Float
  status           String
  notes            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id                String          @id @default(cuid())
  purchaseOrder     PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId   String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId String          @unique
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int             @default(0)
  receiptItems      ReceiptItem[]
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedById    String
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id])
  goodsReceiptNoteId String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  poItemId           String
  quantityReceived   Int
  condition          String
  notes              String?
}

model Invoice {
  id                String        @id @default(cuid())
  transactionId     String?
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId   String
  vendorId          String
  invoiceDate       DateTime
  totalAmount       Float
  status            String
  documentUrl       String?
  paymentDate       DateTime?
  paymentReference  String?
  items             InvoiceItem[]
}

model InvoiceItem {
  id        String  @id @default(cuid())
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId String
  name      String
  quantity  Int
  unitPrice Float
  totalPrice Float
}


model Contract {
  id              String              @id @default(cuid())
  contractNumber  String              @unique @default(cuid())
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId   String              @unique
  vendor          Vendor              @relation(fields: [vendorId], references: [id])
  vendorId        String
  startDate       DateTime
  endDate         DateTime
  filePath        String?
  status          String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime  @default(now())
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
}
