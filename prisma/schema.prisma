
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  name        String    @id @unique
  description String?
  users       User[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model User {
  id                      String                @id @default(cuid())
  name                    String
  email                   String                @unique
  password                String
  roleName                String
  role                    Role                  @relation(fields: [roleName], references: [name])
  vendorId                String?               @unique
  vendor                  Vendor?
  departmentId            String?
  department              Department?           @relation("DepartmentUsers", fields: [departmentId], references: [id])
  approvalLimit           Float?
  managerId               String?
  manager                 User?                 @relation("ManagerSubordinates", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates            User[]                @relation("ManagerSubordinates")
  headedDepartment        Department?           @relation("DepartmentHead")
  createdRequisitions     PurchaseRequisition[] @relation("Requester")
  approvedRequisitions    PurchaseRequisition[] @relation("Approver")
  currentApprovals        PurchaseRequisition[] @relation("CurrentApprover")
  receiptsReceived        GoodsReceiptNote[]
  auditLogs               AuditLog[]
  committeeAssignments    CommitteeAssignment[]
  createdContracts        Contract[]
  financialCommitteeOn    PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommitteeOn    PurchaseRequisition[] @relation("TechnicalCommitteeMembers")
  scores                  CommitteeScoreSet[]
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
}

model Department {
  id          String                @id @default(cuid())
  name        String                @unique
  description String?
  headId      String?               @unique
  head        User?                 @relation("DepartmentHead", fields: [headId], references: [id])
  users       User[]                @relation("DepartmentUsers")
  requisitions PurchaseRequisition[]
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
}

model Vendor {
  id              String                @id @default(cuid())
  name            String
  contactPerson   String
  email           String                @unique
  phone           String
  address         String
  kycStatus       String                @default("Pending")
  rejectionReason String?
  kycDocuments    KYC_Document[]
  userId          String                @unique
  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  quotations      Quotation[]
  purchaseOrders  PurchaseOrder[]
  contracts       Contract[]
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId    String
  name        String
  url         String
  submittedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PurchaseRequisition {
  id                        String                @id @default(cuid())
  transactionId             String?               @unique
  requester                 User                  @relation("Requester", fields: [requesterId], references: [id])
  requesterId               String
  requesterName             String
  title                     String
  department                Department            @relation(fields: [departmentId], references: [id])
  departmentId              String
  urgency                   String                @default("Low")
  items                     RequisitionItem[]
  totalPrice                Float
  justification             String
  status                    String
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime              @updatedAt
  approverId                String?
  approver                  User?                 @relation("Approver", fields: [approverId], references: [id])
  approverComment           String?
  currentApproverId         String?
  currentApprover           User?                 @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  purchaseOrderId           String?
  purchaseOrder             PurchaseOrder?
  allowedVendorIds          String[]
  awardedQuoteItemIds       String[]              @default([])
  customQuestions           CustomQuestion[]
  deadline                  DateTime?
  scoringDeadline           DateTime?
  awardResponseDeadline     DateTime?
  awardResponseDurationMinutes Int?
  evaluationCriteria        EvaluationCriteria?
  financialCommitteeMembers User[]                @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers User[]                @relation("TechnicalCommitteeMembers")
  committeeName             String?
  committeePurpose          String?
  cpoAmount                 Float?
  rfqSettings               Json?
  quotations                Quotation[]
  committeeAssignments      CommitteeAssignment[]
  contract                  Contract?
}

model RequisitionItem {
  id              String              @id @default(cuid())
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId   String
  name            String
  description     String?
  quantity        Int
  unitPrice       Float
  quoteItems      QuoteItem[]
  poItems         POItem[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

model CustomQuestion {
  id            String              @id @default(cuid())
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId String
  questionText  String
  questionType  String
  isRequired    Boolean             @default(true)
  options       String[]
  answers       QuoteAnswer[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

model EvaluationCriteria {
  id                String                 @id @default(cuid())
  requisition       PurchaseRequisition    @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId     String                 @unique
  financialWeight   Int
  technicalWeight   Int
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
}

model FinancialCriterion {
  id                   String               @id @default(cuid())
  evaluationCriteria   EvaluationCriteria   @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Int
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String               @id @default(cuid())
  evaluationCriteria   EvaluationCriteria   @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Int
  scores               TechnicalScore[]
}

model Quotation {
  id                    String              @id @default(cuid())
  transactionId         String?
  requisition           PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId         String
  vendor                Vendor              @relation(fields: [vendorId], references: [id])
  vendorId              String
  vendorName            String
  items                 QuoteItem[]
  totalPrice            Float
  deliveryDate          DateTime
  createdAt             DateTime            @default(now())
  status                String
  notes                 String?
  rank                  Int?
  finalAverageScore     Float?
  cpoDocumentUrl        String?
  experienceDocumentUrl String?
  answers               QuoteAnswer[]
  scores                CommitteeScoreSet[]
  updatedAt             DateTime            @updatedAt
}

model QuoteItem {
  id                String          @id @default(cuid())
  quotation         Quotation       @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId       String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  scores            ItemScore[]
}

model QuoteAnswer {
  id          String         @id @default(cuid())
  quotation   Quotation      @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId String
  question    CustomQuestion @relation(fields: [questionId], references: [id])
  questionId  String
  answer      String
}

model CommitteeScoreSet {
  id               String      @id @default(cuid())
  quotation        Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId      String
  scorer           User        @relation(fields: [scorerId], references: [id])
  scorerId         String
  scorerName       String
  committeeComment String?
  finalScore       Float
  itemScores       ItemScore[]
  submittedAt      DateTime    @default(now())

  @@unique([quotationId, scorerId])
}

model ItemScore {
  id              String           @id @default(cuid())
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  scoreSetId      String
  quoteItem       QuoteItem        @relation(fields: [quoteItemId], references: [id])
  quoteItemId     String
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
  finalScore      Float

  @@unique([scoreSetId, quoteItemId])
}

model FinancialScore {
  id          String             @id @default(cuid())
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId String
  criterion   FinancialCriterion @relation(fields: [criterionId], references: [id])
  criterionId String
  score       Int
  comment     String?

  @@unique([itemScoreId, criterionId])
}

model TechnicalScore {
  id          String             @id @default(cuid())
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId String
  criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id])
  criterionId String
  score       Int
  comment     String?

  @@unique([itemScoreId, criterionId])
}

model PurchaseOrder {
  id               String             @id @default(cuid())
  transactionId    String?
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId    String             @unique
  requisitionTitle String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  vendorId         String
  items            POItem[]
  totalAmount      Float
  status           String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id                String          @id @default(cuid())
  purchaseOrder     PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  purchaseOrderId   String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int             @default(0)
  receiptItems      ReceiptItem[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedById    String
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  goodsReceiptNoteId String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  poItemId           String
  quantityReceived   Int
  condition          String
  notes              String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model Invoice {
  id               String        @id @default(cuid())
  transactionId    String?
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId  String
  vendorId         String
  invoiceDate      DateTime
  items            InvoiceItem[]
  totalAmount      Float
  status           String
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId   String
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AuditLog {
  id            String   @id @default(cuid())
  transactionId String?
  timestamp     DateTime @default(now())
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String
}

model CommitteeAssignment {
  user          User                @relation(fields: [userId], references: [id])
  userId        String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId String
  scoresSubmitted Boolean @default(false)
  
  @@id([userId, requisitionId])
}

model Contract {
  id              String              @id @default(cuid())
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId   String              @unique
  vendor          Vendor              @relation(fields: [vendorId], references: [id])
  vendorId        String
  contractNumber  String              @unique @default(cuid())
  startDate       DateTime
  endDate         DateTime
  status          String              @default("Draft")
  filePath        String?
  notes           String?
  createdBy       User                @relation(fields: [createdById], references: [id])
  createdById     String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}
