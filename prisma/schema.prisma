// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String                @id @default(cuid())
  name                    String
  email                   String                @unique
  password                String
  role                    UserRole
  departmentId            String?
  department              Department?           @relation(fields: [departmentId], references: [id])
  vendorId                String?               @unique
  vendor                  Vendor?               @relation(fields: [vendorId], references: [id])
  createdRequisitions     PurchaseRequisition[] @relation("Requester")
  approvedRequisitions    PurchaseRequisition[] @relation("Approver")
  receipts                GoodsReceiptNote[]
  auditLogs               AuditLog[]
  financialCommitteeOn    PurchaseRequisition[] @relation("FinancialCommittee")
  technicalCommitteeOn    PurchaseRequisition[] @relation("TechnicalCommittee")
  scores                  CommitteeScoreSet[]
  committeeAssignments    CommitteeAssignment[]
}

model Department {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
  purchaseRequisitions PurchaseRequisition[]
}

model Vendor {
  id              String           @id @default(cuid())
  name            String
  contactPerson   String
  email           String           @unique
  phone           String
  address         String
  user            User?
  userId          String           @unique
  kycStatus       KycStatus
  rejectionReason String?
  kycDocuments    KYC_Document[]
  quotations      Quotation[]
  purchaseOrders  PurchaseOrder[]
  contracts       Contract[]
}

model KYC_Document {
  id         String   @id @default(cuid())
  vendor     Vendor   @relation(fields: [vendorId], references: [id])
  vendorId   String
  name       String
  url        String
  submittedAt DateTime @default(now())
}

enum UserRole {
  Requester
  Approver
  Procurement_Officer
  Finance
  Admin
  Receiving
  Vendor
  Committee_Member
  Committee
}

enum KycStatus {
  Pending
  Verified
  Rejected
}

model PurchaseRequisition {
  id                            String           @id @default(cuid())
  transactionId                 String?
  requester                     User             @relation("Requester", fields: [requesterId], references: [id])
  requesterId                   String
  requesterName                 String
  title                         String
  justification                 String
  departmentId                  String?
  department                    Department?      @relation(fields: [departmentId], references: [id])
  status                        RequisitionStatus
  totalPrice                    Float
  createdAt                     DateTime         @default(now())
  updatedAt                     DateTime         @updatedAt
  approver                      User?            @relation("Approver", fields: [approverId], references: [id])
  approverId                    String?
  approverComment               String?
  purchaseOrderId               String?          @unique
  purchaseOrder                 PurchaseOrder?
  allowedVendorIds              String[]
  deadline                      DateTime?
  scoringDeadline               DateTime?
  awardResponseDeadline         DateTime?
  awardResponseDurationMinutes  Int?
  cpoAmount                     Float?
  committeeName                 String?
  committeePurpose              String?
  rfqSettings                   Json?
  items                         RequisitionItem[]
  customQuestions               CustomQuestion[]
  evaluationCriteria            EvaluationCriteria?
  quotations                    Quotation[]
  financialCommitteeMembers     User[]           @relation("FinancialCommittee")
  technicalCommitteeMembers     User[]           @relation("TechnicalCommittee")
  committeeAssignments          CommitteeAssignment[]
  awardedQuoteItemIds           String[]
  contracts                     Contract[]
}

model CommitteeAssignment {
  user            User                @relation(fields: [userId], references: [id])
  userId          String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId   String
  scoresSubmitted Boolean             @default(false)
  @@id([userId, requisitionId])
}

model RequisitionItem {
  id            String             @id @default(cuid())
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId String
  name          String
  description   String?
  quantity      Int
  unitPrice     Float
  purchaseOrderItems POItem[]
}

model CustomQuestion {
  id             String             @id @default(cuid())
  requisition    PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId  String
  questionText   String
  questionType   String
  isRequired     Boolean            @default(true)
  options        String[]
  answers        QuoteAnswer[]
}

model EvaluationCriteria {
  id                String                 @id @default(cuid())
  requisition       PurchaseRequisition    @relation(fields: [requisitionId], references: [id])
  requisitionId     String                 @unique
  financialWeight   Int
  technicalWeight   Int
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  evaluationCriteriaId String
  name                 String
  weight               Int
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  evaluationCriteriaId String
  name                 String
  weight               Int
  scores               TechnicalScore[]
}

enum RequisitionStatus {
  Draft
  Pending_Approval
  Approved
  Rejected
  RFQ_In_Progress
  PO_Created
  Fulfilled
  Closed
}

model Quotation {
  id                String              @id @default(cuid())
  transactionId     String?
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId     String
  vendor            Vendor              @relation(fields: [vendorId], references: [id])
  vendorId          String
  vendorName        String
  totalPrice        Float
  deliveryDate      DateTime
  status            QuotationStatus
  notes             String?
  rank              Int?
  cpoDocumentUrl    String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  finalAverageScore Float?
  items             QuoteItem[]
  answers           QuoteAnswer[]
  scores            CommitteeScoreSet[]
}

model QuoteItem {
  id                String       @id @default(cuid())
  quotation         Quotation    @relation(fields: [quotationId], references: [id])
  quotationId       String
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  scores            ItemScore[]
}

model QuoteAnswer {
  id          String   @id @default(cuid())
  quotation   Quotation @relation(fields: [quotationId], references: [id])
  quotationId String
  question    CustomQuestion @relation(fields: [questionId], references: [id])
  questionId  String
  answer      String
}

model CommitteeScoreSet {
  id               String       @id @default(cuid())
  quotation        Quotation    @relation(fields: [quotationId], references: [id])
  quotationId      String
  scorer           User         @relation(fields: [scorerId], references: [id])
  scorerId         String
  scorerName       String
  committeeComment String?
  finalScore       Float
  submittedAt      DateTime     @default(now())
  itemScores       ItemScore[]
}

model ItemScore {
  id              String           @id @default(cuid())
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id])
  scoreSetId      String
  quoteItem       QuoteItem        @relation(fields: [quoteItemId], references: [id])
  quoteItemId     String           @unique
  finalScore      Float
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
}

model FinancialScore {
  id          String             @id @default(cuid())
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id])
  itemScoreId String
  criterion   FinancialCriterion @relation(fields: [criterionId], references: [id])
  criterionId String
  score       Int
  comment     String?
}

model TechnicalScore {
  id          String             @id @default(cuid())
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id])
  itemScoreId String
  criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id])
  criterionId String
  score       Int
  comment     String?
}

enum QuotationStatus {
  Submitted
  Awarded
  Partially_Awarded
  Rejected
  Standby
  Invoice_Submitted
  Failed
  Accepted
  Declined
}

model PurchaseOrder {
  id               String             @id @default(cuid())
  transactionId    String?
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId    String             @unique
  requisitionTitle String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  vendorId         String
  totalAmount      Float
  status           PurchaseOrderStatus
  createdAt        DateTime           @default(now())
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id                String           @id @default(cuid())
  purchaseOrder     PurchaseOrder    @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId   String
  requisitionItem   RequisitionItem  @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int              @default(0)
  receiptItems      ReceiptItem[]
}

enum PurchaseOrderStatus {
  Issued
  Acknowledged
  Shipped
  Partially_Delivered
  Delivered
  Cancelled
  Matched
  Mismatched
  On_Hold
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedById    String
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id])
  goodsReceiptNoteId String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  poItemId           String
  quantityReceived   Int
  condition          ReceiptCondition
  notes              String?
}

enum ReceiptCondition {
  Good
  Damaged
  Incorrect
}

model Invoice {
  id                String       @id @default(cuid())
  transactionId     String?
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId   String
  vendorId          String
  invoiceDate       DateTime
  totalAmount       Float
  status            InvoiceStatus
  documentUrl       String?
  paymentDate       DateTime?
  paymentReference  String?
  items             InvoiceItem[]
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId   String
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

enum InvoiceStatus {
  Pending
  Approved_for_Payment
  Paid
  Disputed
}

model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime  @default(now())
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String
}

model Contract {
    id             String                @id @default(cuid())
    contractNumber String                @unique @default(cuid())
    requisition    PurchaseRequisition   @relation(fields: [requisitionId], references: [id])
    requisitionId  String
    vendor         Vendor                @relation(fields: [vendorId], references: [id])
    vendorId       String
    startDate      DateTime
    endDate        DateTime
    filePath       String?
    status         String
    createdAt      DateTime              @default(now())
}
