// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(cuid())
  name                 String
  email                String                @unique
  password             String
  role                 String // e.g., 'Requester', 'Approver', 'Admin'
  department           Department?           @relation(fields: [departmentId], references: [id])
  departmentId         String?
  requisitions         PurchaseRequisition[] @relation("Requester")
  approvals            PurchaseRequisition[] @relation("Approver")
  vendor               Vendor?               @relation(fields: [vendorId], references: [id])
  vendorId             String?               @unique
  receipts             GoodsReceiptNote[]
  auditLogs            AuditLog[]
  financialCommittees  PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommittees  PurchaseRequisition[] @relation("TechnicalCommitteeMembers")
  committeeAssignments CommitteeAssignment[]
  scores               CommitteeScoreSet[]
}

model Department {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
  PurchaseRequisition PurchaseRequisition[]
}

model PurchaseRequisition {
  id                   String    @id @default(cuid())
  transactionId        String?   @unique
  requester            User      @relation("Requester", fields: [requesterId], references: [id])
  requesterId          String
  requesterName        String
  title                String
  department           Department? @relation(fields: [departmentId], references: [id])
  departmentId         String?
  items                RequisitionItem[]
  totalPrice           Float
  justification        String
  status               String    @default("Draft") // e.g., 'Draft', 'Pending Approval', 'Approved'
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  approver             User?     @relation("Approver", fields: [approverId], references: [id])
  approverId           String?
  approverComment      String?
  quotations           Quotation[]
  purchaseOrder        PurchaseOrder?
  purchaseOrderId      String?             @unique
  allowedVendorIds     String[]
  customQuestions      CustomQuestion[]
  deadline             DateTime?
  scoringDeadline      DateTime?
  awardResponseDeadline DateTime?
  awardResponseDurationMinutes Int?
  cpoAmount            Float?
  evaluationCriteria   EvaluationCriteria?
  financialCommitteeMembers User[] @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers User[] @relation("TechnicalCommitteeMembers")
  committeeName        String?
  committeePurpose     String?
  rfqSettings          Json?
  committeeAssignments CommitteeAssignment[]
  contracts            Contract[]
}

model RequisitionItem {
  id           String           @id @default(cuid())
  requisition  PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId String
  name         String
  description  String?
  quantity     Int
  unitPrice    Float
  quoteItems   QuoteItem[]
  poItems      POItem[]
  customQuestions CustomQuestion[]
}

model CustomQuestion {
  id                String           @id @default(cuid())
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId     String
  questionText      String
  questionType      String // 'text', 'boolean', 'multiple-choice', 'file'
  options           String[]
  isRequired        Boolean          @default(true)
  answers           QuoteAnswer[]
  requisitionItem   RequisitionItem? @relation(fields: [requisitionItemId], references: [id], onDelete: SetNull)
  requisitionItemId String?
}

model Vendor {
  id            String      @id @default(cuid())
  name          String
  contactPerson String
  email         String      @unique
  phone         String
  address       String
  kycStatus     String      @default("Pending") // Pending, Verified, Rejected
  rejectionReason String?
  kycDocuments  KYC_Document[]
  quotations    Quotation[]
  user          User?
  userId        String?     @unique
  purchaseOrders PurchaseOrder[]
  contracts     Contract[]
  createdAt     DateTime    @default(now())
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  vendorId    String
  name        String
  url         String
  submittedAt DateTime @default(now())
}

model Quotation {
  id                String              @id @default(cuid())
  transactionId     String?
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId     String
  vendor            Vendor              @relation(fields: [vendorId], references: [id])
  vendorId          String
  vendorName        String
  items             QuoteItem[]
  totalPrice        Float
  deliveryDate      DateTime
  status            String
  notes             String?
  rank              Int?
  cpoDocumentUrl    String?
  finalAverageScore Float?
  createdAt         DateTime            @default(now())
  answers           QuoteAnswer[]
  scores            CommitteeScoreSet[]
}

model QuoteItem {
  id                String    @id @default(cuid())
  quotation         Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId       String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id], onDelete: Cascade)
  requisitionItemId String
  name              String
  brandDetails      String?
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
}

model QuoteAnswer {
  id          String   @id @default(cuid())
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId String
  question    CustomQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String
  answer      String
}

model PurchaseOrder {
  id               String             @id @default(cuid())
  transactionId    String?
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId    String             @unique
  requisitionTitle String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  vendorId         String
  items            POItem[]
  totalAmount      Float
  status           String
  notes            String?
  createdAt        DateTime           @default(now())
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id                String          @id @default(cuid())
  purchaseOrder     PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  purchaseOrderId   String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id], onDelete: Cascade)
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int
  receiptItems      ReceiptItem[]
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedById    String
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  goodsReceiptNoteId String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  poItemId           String
  quantityReceived   Int
  condition          String // Good, Damaged, Incorrect
  notes              String?
}

model Invoice {
  id               String       @id @default(cuid())
  transactionId    String?
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId  String
  vendorId         String
  invoiceDate      DateTime
  totalAmount      Float
  status           String // Pending, Approved for Payment, Paid, Disputed
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  items            InvoiceItem[]
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId   String
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime  @default(now())
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String
}

model Contract {
  id             String    @id @default(cuid())
  contractNumber String    @unique @default(cuid())
  requisition    PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId  String
  vendor         Vendor    @relation(fields: [vendorId], references: [id])
  vendorId       String
  startDate      DateTime
  endDate        DateTime
  filePath       String?
  status         String // Draft, Active, Expired
  createdAt      DateTime  @default(now())
}

model CommitteeAssignment {
  userId          String
  requisitionId   String
  scoresSubmitted Boolean  @default(false)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)

  @@id([userId, requisitionId])
}

model EvaluationCriteria {
  id                String               @id @default(cuid())
  requisition       PurchaseRequisition? @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId     String?              @unique
  financialWeight   Int
  technicalWeight   Int
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String              @id @default(cuid())
  name                 String
  weight               Int
  evaluationCriteria   EvaluationCriteria? @relation(fields: [evaluationCriteriaId], references: [id])
  evaluationCriteriaId String?
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String              @id @default(cuid())
  name                 String
  weight               Int
  evaluationCriteria   EvaluationCriteria? @relation(fields: [evaluationCriteriaId], references: [id])
  evaluationCriteriaId String?
  scores               TechnicalScore[]
}

model CommitteeScoreSet {
  id               String           @id @default(cuid())
  quotation        Quotation        @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId      String
  scorer           User             @relation(fields: [scorerId], references: [id])
  scorerId         String
  scorerName       String
  finalScore       Float
  committeeComment String?
  submittedAt      DateTime         @default(now())
  financialScores  FinancialScore[]
  technicalScores  TechnicalScore[]
}

model FinancialScore {
  id                String             @id @default(cuid())
  scoreSet          CommitteeScoreSet  @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  scoreSetId        String
  criterion         FinancialCriterion @relation(fields: [criterionId], references: [id])
  criterionId       String
  score             Int
  comment           String?
}

model TechnicalScore {
  id          String             @id @default(cuid())
  scoreSet    CommitteeScoreSet  @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  scoreSetId  String
  criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id])
  criterionId String
  score       Int
  comment     String?
}
