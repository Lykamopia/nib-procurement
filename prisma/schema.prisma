// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  users       User[]
}

model User {
  id            String  @id @default(cuid())
  name          String
  email         String  @unique
  password      String
  approvalLimit Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Self-referencing for manager hierarchy
  managerId     String?
  manager       User?   @relation("ManagerSubordinates", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates  User[]  @relation("ManagerSubordinates")

  // Foreign key for Role
  roleId   String
  role     Role     @relation(fields: [roleId], references: [id])

  // One-to-one with Vendor (optional)
  vendorId                          String?                     @unique
  vendor                            Vendor?
  departmentId                      String?
  department                        Department?                 @relation("DepartmentMembers", fields: [departmentId], references: [id])
  requisitions                      PurchaseRequisition[]       @relation("Requester")
  approvalsGiven                    Approval[]                  @relation("Approver")
  headedDepartment                  Department?                 @relation("DepartmentHead")
  scoresGiven                       CommitteeScoreSet[]
  financialCommitteesRequisitions   RequisitionFinancialCommittee[]
  technicalCommitteesRequisitions   RequisitionTechnicalCommittee[]
  receivedGoodsNotes                GoodsReceiptNote[]
  committeeRecommendations          CommitteeRecommendation[]
  committeeAssignments              CommitteeAssignment[]
}

model Vendor {
  id            String   @id @default(cuid())
  name          String
  contactPerson String
  email         String   @unique
  phone         String
  address       String
  kycStatus     String   @default("Pending") // Pending, Verified, Rejected
  rejectionReason String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userId        String        @unique
  user          User          @relation(fields: [userId], references: [id])

  quotations    Quotation[]
  purchaseOrders PurchaseOrder[]
  contracts      Contract[]
  kycDocuments   KYC_Document[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  name        String
  url         String
  submittedAt DateTime
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
}

model PurchaseRequisition {
  id                          String    @id @default(cuid())
  transactionId               String?   @unique
  title                       String
  justification               String
  status                      String    @default("Draft")
  totalPrice                  Float
  urgency                     String    @default("Low")
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  approverComment             String?
  negotiationNotes            String?
  deadline                    DateTime?
  scoringDeadline             DateTime?
  awardResponseDeadline       DateTime?
  awardResponseDurationMinutes Int?
  committeeName               String?
  committeePurpose            String?
  cpoAmount                   Float?
  rfqSettings                 Json?
  allowedVendorIds            String[]
  awardedQuoteItemIds         String[]  @default([])
  
  requesterId     String
  requester       User      @relation("Requester", fields: [requesterId], references: [id])
  approverId      String?
  approver        User?     @relation("Approver", fields: [approverId], references: [id])
  currentApproverId String?
  currentApprover   User?     @relation(fields: [currentApproverId], references: [id])

  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])

  // One-to-one with PurchaseOrder
  purchaseOrderId String?        @unique
  purchaseOrder   PurchaseOrder?

  items                     RequisitionItem[]
  quotations                Quotation[]
  contracts                 Contract[]
  customQuestions           CustomQuestion[]
  evaluationCriteria        EvaluationCriteria?
  financialCommitteeMembers RequisitionFinancialCommittee[]
  technicalCommitteeMembers RequisitionTechnicalCommittee[]
  recommendations           CommitteeRecommendation[]
}

model RequisitionItem {
  id            String   @id @default(cuid())
  name          String
  quantity      Int
  unitPrice     Float?
  description   String?
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  quoteItems    QuoteItem[]
  poItems       POItem[]
}

model CustomQuestion {
  id            String   @id @default(cuid())
  questionText  String
  questionType  String
  isRequired    Boolean  @default(true)
  options       String[]
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  answers       QuoteAnswer[]
}

model EvaluationCriteria {
  id              String   @id @default(cuid())
  financialWeight Float
  technicalWeight Float
  requisitionId   String   @unique
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String   @id @default(cuid())
  name                 String
  weight               Float
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String   @id @default(cuid())
  name                 String
  weight               Float
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  scores               TechnicalScore[]
}

model Quotation {
  id                    String    @id @default(cuid())
  transactionId         String?
  vendorName            String
  totalPrice            Float
  deliveryDate          DateTime
  status                String
  notes                 String?
  rank                  Int?
  finalAverageScore     Float?
  cpoDocumentUrl        String?
  experienceDocumentUrl String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  
  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id])

  items   QuoteItem[]
  answers QuoteAnswer[]
  scores  CommitteeScoreSet[]
}

model QuoteItem {
  id                String    @id @default(cuid())
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  quotationId       String
  quotation         Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  itemScores        ItemScore[]
}

model QuoteAnswer {
  id          String   @id @default(cuid())
  answer      String
  questionId  String
  quotationId String
  question    CustomQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  quotation   Quotation      @relation(fields: [quotationId], references: [id], onDelete: Cascade)
}

model PurchaseOrder {
  id               String   @id @default(cuid())
  transactionId    String?
  requisitionTitle String
  totalAmount      Float
  status           String
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  requisitionId String              @unique
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  
  items     POItem[]
  receipts  GoodsReceiptNote[]
  invoices  Invoice[]
}

model POItem {
  id                String   @id @default(cuid())
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int
  purchaseOrderId   String
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  requisitionItemId String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  receiptItems      ReceiptItem[]
}

model GoodsReceiptNote {
  id              String   @id @default(cuid())
  transactionId   String?
  receivedDate    DateTime @default(now())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedById    String
  receivedBy      User     @relation(fields: [receivedById], references: [id])
  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String   @id @default(cuid())
  quantityReceived   Int
  condition          String
  notes              String?
  poItemId           String
  poItem             POItem   @relation(fields: [poItemId], references: [id])
  goodsReceiptNoteId String
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
}

model Invoice {
  id                String   @id @default(cuid())
  transactionId     String?
  invoiceDate       DateTime
  totalAmount       Float
  status            String
  documentUrl       String?
  paymentDate       DateTime?
  paymentReference  String?
  purchaseOrderId   String
  po                PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  vendorId          String
  items             InvoiceItem[]
}

model InvoiceItem {
  id          String  @id @default(cuid())
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model CommitteeScoreSet {
    id                  String   @id @default(cuid())
    quotationId         String
    scorerId            String
    scorerName          String
    finalScore          Float
    committeeComment    String?
    submittedAt         DateTime @default(now())

    quotation       Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
    scorer          User        @relation(fields: [scorerId], references: [id])
    itemScores      ItemScore[]
}

model ItemScore {
    id              String      @id @default(cuid())
    quoteItemId     String      @unique
    finalScore      Float
    scoreSetId      String

    scoreSet        CommitteeScoreSet   @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
    quoteItem       QuoteItem           @relation(fields: [quoteItemId], references: [id])
    financialScores FinancialScore[]
    technicalScores TechnicalScore[]
}

model FinancialScore {
    id          String @id @default(cuid())
    score       Float
    comment     String?
    itemScoreId String
    criterionId String
    
    itemScore   ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
    criterion   FinancialCriterion @relation(fields: [criterionId], references: [id])
}

model TechnicalScore {
    id          String @id @default(cuid())
    score       Float
    comment     String?
    itemScoreId String
    criterionId String
    
    itemScore   ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
    criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id])
}

model AuditLog {
  id            String   @id @default(cuid())
  transactionId String?
  timestamp     DateTime @default(now())
  action        String
  entity        String
  entityId      String
  details       String
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
}

model Department {
  id           String @id @default(cuid())
  name         String @unique
  description  String?
  headId       String? @unique
  head         User?   @relation("DepartmentHead", fields: [headId], references: [id])
  users        User[]  @relation("DepartmentMembers")
  requisitions PurchaseRequisition[]
}

model Contract {
  id              String   @id @default(cuid())
  contractNumber  String   @unique @default(cuid()) // Or some other unique logic
  startDate       DateTime
  endDate         DateTime
  status          String
  filePath        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id])
}

model CommitteeRecommendation {
    id              String      @id @default(cuid())
    requisitionId   String
    userId          String
    committeeRole   String
    recommendation  String // e.g. "Recommend for Approval", "Request Changes"
    comment         String?
    createdAt       DateTime @default(now())
    
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    user            User                @relation(fields: [userId], references: [id])
}

model CommitteeAssignment {
    id              String      @id @default(cuid())
    userId          String
    requisitionId   String
    scoresSubmitted Boolean     @default(false)
    
    user            User                @relation(fields: [userId], references: [id])
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    
    @@unique([userId, requisitionId])
}

//--- Explicit Many-to-Many Tables for Committee Membership ---

model RequisitionFinancialCommittee {
    requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    requisitionId String
    user          User                @relation(fields: [userId], references: [id])
    userId        String
    assignedAt    DateTime            @default(now())

    @@id([requisitionId, userId])
}

model RequisitionTechnicalCommittee {
    requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    requisitionId String
    user          User                @relation(fields: [userId], references: [id])
    userId        String
    assignedAt    DateTime            @default(now())

    @@id([requisitionId, userId])
}

//--- Approval Models for Hierarchical Flow ---
model Approval {
  id            String    @id @default(cuid())
  decision      String // Approved, Rejected, Escalated
  comment       String?
  createdAt     DateTime  @default(now())

  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])

  approverId    String
  approver      User      @relation(fields: [approverId], references: [id])
}
