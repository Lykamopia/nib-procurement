// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                @id @default(cuid())
  name                      String
  email                     String                @unique
  password                  String
  approvalLimit             Float?
  managerId                 String?
  manager                   User?                 @relation("ManagerSubordinate", fields: [managerId], references: [id])
  subordinates              User[]                @relation("ManagerSubordinate")
  vendorId                  String?               @unique
  vendor                    Vendor?
  roleName                  UserRole
  role                      Role                  @relation(fields: [roleName], references: [name])
  departmentId              String?
  department                Department?           @relation(fields: [departmentId], references: [id])
  committeeAssignments      CommitteeAssignment[]
  createdContracts          Contract[]
  scoredQuotes              CommitteeScoreSet[]
  requisitions              PurchaseRequisition[] @relation("Requisitions")
  approvedRequisitions      PurchaseRequisition[] @relation("Approvals")
  currentApprovals          PurchaseRequisition[] @relation("CurrentApprovals")
  auditLogEntries           AuditLog[]
  createdGoodsReceipts      GoodsReceiptNote[]
  financialCommitteeForReqs PurchaseRequisition[] @relation("FinancialCommittee")
  technicalCommitteeForReqs PurchaseRequisition[] @relation("TechnicalCommittee")

  @@map("users")
}

model Department {
  id           String                @id @default(cuid())
  name         String                @unique
  users        User[]
  requisitions PurchaseRequisition[]

  @@map("departments")
}

model PurchaseRequisition {
  id                          String                @id @default(cuid())
  transactionId               String?               @unique
  requesterId                 String
  requester                   User                  @relation("Requisitions", fields: [requesterId], references: [id])
  requesterName               String
  departmentId                String
  department                  Department            @relation(fields: [departmentId], references: [id])
  title                       String
  justification               String
  status                      RequisitionStatus     @default(Draft)
  totalPrice                  Float
  createdAt                   DateTime              @default(now())
  updatedAt                   DateTime              @updatedAt
  approverId                  String?
  approver                    User?                 @relation("Approvals", fields: [approverId], references: [id])
  approverComment             String?
  currentApproverId           String?
  currentApprover             User?                 @relation("CurrentApprovals", fields: [currentApproverId], references: [id])
  purchaseOrderId             String?               @unique
  purchaseOrder               PurchaseOrder?
  allowedVendorIds            String[]
  awardedQuoteItemIds         String[]              @default([])
  deadline                    DateTime?
  scoringDeadline             DateTime?
  awardResponseDeadline       DateTime?
  awardResponseDurationMinutes Int?
  cpoAmount                   Float?
  rfqSettings                 Json?
  committeeName               String?
  committeePurpose            String?
  financialCommitteeMembers   User[]                @relation("FinancialCommittee")
  technicalCommitteeMembers   User[]                @relation("TechnicalCommittee")
  items                       RequisitionItem[]
  customQuestions             CustomQuestion[]
  evaluationCriteria          EvaluationCriteria?
  quotations                  Quotation[]
  contract                    Contract?
  committeeAssignments        CommitteeAssignment[]

  @@map("purchase_requisitions")
}

model RequisitionItem {
  id              String              @id @default(cuid())
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId   String
  name            String
  quantity        Int
  unitPrice       Float
  description     String?
  quotedItems     QuoteItem[]
  poItems         POItem[]

  @@map("requisition_items")
}

model CustomQuestion {
  id              String              @id @default(cuid())
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId   String
  questionText    String
  questionType    QuestionType
  isRequired      Boolean             @default(true)
  options         String[]
  answers         QuoteAnswer[]

  @@map("custom_questions")
}

model EvaluationCriteria {
  id                String                 @id @default(cuid())
  requisition       PurchaseRequisition    @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId     String                 @unique
  financialWeight   Int
  technicalWeight   Int
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]

  @@map("evaluation_criteria")
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Int
  scores               FinancialScore[]

  @@map("financial_criteria")
}

model TechnicalCriterion {
  id                   String           @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Int
  scores               TechnicalScore[]

  @@map("technical_criteria")
}

model Vendor {
  id            String         @id @default(cuid())
  name          String
  contactPerson String
  email         String         @unique
  phone         String
  address       String
  kycStatus     KycStatus
  rejectionReason String?
  userId        String         @unique
  user          User           @relation(fields: [userId], references: [id])
  kycDocuments  KYC_Document[]
  quotations    Quotation[]
  contracts     Contract[]
  purchaseOrders PurchaseOrder[]

  @@map("vendors")
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId    String
  name        String
  url         String
  submittedAt DateTime

  @@map("kyc_documents")
}

model Quotation {
  id                    String              @id @default(cuid())
  transactionId         String?
  requisition           PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId         String
  vendor                Vendor              @relation(fields: [vendorId], references: [id])
  vendorId              String
  vendorName            String
  totalPrice            Float
  deliveryDate          DateTime
  status                QuotationStatus
  notes                 String?
  rank                  Int?
  finalAverageScore     Float?
  cpoDocumentUrl        String?
  experienceDocumentUrl String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  items                 QuoteItem[]
  answers               QuoteAnswer[]
  scores                CommitteeScoreSet[]

  @@map("quotations")
}

model QuoteItem {
  id                String     @id @default(cuid())
  quotation         Quotation  @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId       String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  scores            ItemScore[]

  @@map("quote_items")
}

model QuoteAnswer {
  id          String         @id @default(cuid())
  quotation   Quotation      @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId String
  question    CustomQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String
  answer      String

  @@map("quote_answers")
}

model PurchaseOrder {
  id               String             @id @default(cuid())
  transactionId    String?
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId    String             @unique
  requisitionTitle String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  vendorId         String
  totalAmount      Float
  status           PurchaseOrderStatus
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]

  @@map("purchase_orders")
}

model POItem {
  id                String          @id @default(cuid())
  po                PurchaseOrder   @relation(fields: [poId], references: [id], onDelete: Cascade)
  poId              String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int             @default(0)
  receiptItems      ReceiptItem[]

  @@map("po_items")
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedById    String
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]

  @@map("goods_receipt_notes")
}

model ReceiptItem {
  id               String           @id @default(cuid())
  grn              GoodsReceiptNote @relation(fields: [grnId], references: [id], onDelete: Cascade)
  grnId            String
  poItem           POItem           @relation(fields: [poItemId], references: [id])
  poItemId         String
  quantityReceived Int
  condition        ItemCondition
  notes            String?

  @@map("receipt_items")
}

model Invoice {
  id               String        @id @default(cuid())
  transactionId    String?
  po               PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId  String
  vendorId         String
  invoiceDate      DateTime
  totalAmount      Float
  status           InvoiceStatus
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  items            InvoiceItem[]

  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId   String
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float

  @@map("invoice_items")
}

model Contract {
  id             String              @id @default(cuid())
  contractNumber String              @default(cuid())
  requisition    PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId  String              @unique
  vendor         Vendor              @relation(fields: [vendorId], references: [id])
  vendorId       String
  startDate      DateTime
  endDate        DateTime
  status         ContractStatus
  createdAt      DateTime            @default(now())
  createdById    String
  createdBy      User                @relation(fields: [createdById], references: [id])

  @@map("contracts")
}

model AuditLog {
  id            String   @id @default(cuid())
  transactionId String?
  timestamp     DateTime @default(now())
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String

  @@map("audit_logs")
}

// RBAC Models
model Role {
  name        UserRole         @unique
  permissions PermissionsOnRoles[]
  users       User[]

  @@id([name])
  @@map("roles")
}

model Permission {
  id    String @id @default(cuid())
  action   PermissionAction
  subject  PermissionSubject
  roles    PermissionsOnRoles[]

  @@unique([action, subject])
  @@map("permissions")
}

model PermissionsOnRoles {
  role         Role       @relation(fields: [roleName], references: [name])
  roleName     UserRole
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String
  assignedAt   DateTime   @default(now())

  @@id([roleName, permissionId])
  @@map("permissions_on_roles")
}


// Committee Models
model CommitteeAssignment {
  user            User                @relation(fields: [userId], references: [id])
  userId          String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId   String
  scoresSubmitted Boolean             @default(false)

  @@id([userId, requisitionId])
  @@map("committee_assignments")
}

model CommitteeScoreSet {
  id               String       @id @default(cuid())
  quotation        Quotation    @relation(fields: [quotationId], references: [id])
  quotationId      String
  scorer           User         @relation(fields: [scorerId], references: [id])
  scorerId         String
  scorerName       String
  finalScore       Float
  committeeComment String?
  submittedAt      DateTime     @default(now())
  itemScores       ItemScore[]

  @@map("committee_score_sets")
}

model ItemScore {
  id              String            @id @default(cuid())
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  scoreSetId      String
  quoteItem       QuoteItem         @relation(fields: [quoteItemId], references: [id])
  quoteItemId     String            @unique
  finalScore      Float
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]

  @@map("item_scores")
}

model FinancialScore {
  id          String             @id @default(cuid())
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId String
  criterion   FinancialCriterion @relation(fields: [criterionId], references: [id])
  criterionId String
  score       Int
  comment     String?

  @@unique([itemScoreId, criterionId])
  @@map("financial_scores")
}

model TechnicalScore {
  id          String             @id @default(cuid())
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId String
  criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id])
  criterionId String
  score       Int
  comment     String?

  @@unique([itemScoreId, criterionId])
  @@map("technical_scores")
}


// ENUMS
enum UserRole {
  Admin
  Procurement_Officer
  Requester
  Approver
  Finance
  Receiving
  Vendor
  Committee_Member
  Committee
}

enum RequisitionStatus {
  Draft
  Pending_Approval
  Approved
  Rejected
  RFQ_In_Progress
  PO_Created
  Fulfilled
  Closed
  Pending_Managerial_Approval
}

enum KycStatus {
  Pending
  Verified
  Rejected
}

enum QuotationStatus {
  Submitted
  Awarded
  Partially_Awarded
  Rejected
  Standby
  Invoice_Submitted
  Failed
  Accepted
  Declined
}

enum PurchaseOrderStatus {
  Issued
  Acknowledged
  Shipped
  Partially_Delivered
  Delivered
  Cancelled
  Matched
  Mismatched
  On_Hold
}

enum ItemCondition {
  Good
  Damaged
  Incorrect
}

enum InvoiceStatus {
  Pending
  Approved_for_Payment
  Paid
  Disputed
}

enum ContractStatus {
  Draft
  Active
  Expired
}

enum QuestionType {
  text
  boolean
  multiple_choice
  file
}

enum PermissionAction {
  VIEW
  CREATE
  EDIT
  DELETE
  APPROVE
  REJECT
  SUBMIT
  VERIFY
  SEND
  MANAGE
  PROCESS
  FINALIZE_SCORES
  SCORE
  SUBMIT_SCORES
}

enum PermissionSubject {
  DASHBOARD
  REQUISITIONS
  APPROVALS
  VENDORS
  QUOTATIONS
  CONTRACTS
  PURCHASE_ORDERS
  INVOICES
  GOODS_RECEIPT
  RECORDS
  AUDIT_LOG
  SETTINGS
  REQUISITION
  VENDOR
  RFQ
  COMMITTEE
  PAYMENT
  PERMISSIONS
  QUOTATION
}
