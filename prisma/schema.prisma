// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String       @id @default(cuid())
  name             String
  email            String       @unique
  password         String
  role             UserRole     @default(Requester)
  vendorId         String?      @unique
  departmentId     String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  department       Department?  @relation(fields: [departmentId], references: [id])
  createdRequisitions PurchaseRequisition[] @relation("Requester")
  approvedRequisitions PurchaseRequisition[] @relation("Approver")
  vendor           Vendor?      @relation(fields: [vendorId], references: [id])
  receivedGoods    GoodsReceiptNote[]
  financialCommitteeOn PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommitteeOn PurchaseRequisition[] @relation("TechnicalCommitteeMembers")
  scores           CommitteeScoreSet[]
  auditLogs        AuditLog[]
  committeeAssignments CommitteeAssignment[]
}

model Department {
  id           String    @id @default(cuid())
  name         String    @unique
  users        User[]
  requisitions PurchaseRequisition[]
}

model Vendor {
  id              String        @id @default(cuid())
  name            String
  contactPerson   String
  email           String        @unique
  phone           String
  address         String
  kycStatus       KYCStatus     @default(Pending)
  rejectionReason String?
  userId          String        @unique
  user            User?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  kycDocuments    KYC_Document[]
  quotations      Quotation[]
  purchaseOrders  PurchaseOrder[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  name        String
  url         String
  submittedAt DateTime @default(now())
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId    String
}

model PurchaseRequisition {
  id                           String       @id @default(cuid())
  transactionId                String?
  requesterId                  String
  requesterName                String?
  title                        String
  totalPrice                   Float
  justification                String
  status                       RequisitionStatus @default(Draft)
  createdAt                    DateTime     @default(now())
  updatedAt                    DateTime     @updatedAt
  approverId                   String?
  approverComment              String?
  contract                     Json?
  negotiationNotes             String?
  purchaseOrderId              String?      @unique
  allowedVendorIds             String[]
  deadline                     DateTime?
  scoringDeadline              DateTime?
  awardResponseDeadline        DateTime?
  awardResponseDurationMinutes Int?
  committeeName                String?
  committeePurpose             String?
  cpoAmount                    Float?
  departmentId                 String?
  department                   Department?  @relation(fields: [departmentId], references: [id])
  requester                    User         @relation("Requester", fields: [requesterId], references: [id])
  items                        RequisitionItem[]
  approver                     User?        @relation("Approver", fields: [approverId], references: [id])
  purchaseOrder                PurchaseOrder?
  customQuestions              CustomQuestion[]
  evaluationCriteria           EvaluationCriteria?
  financialCommitteeMembers    User[]       @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers    User[]       @relation("TechnicalCommitteeMembers")
  quotations                   Quotation[]
  committeeAssignments         CommitteeAssignment[]
}

model CommitteeAssignment {
  userId          String
  requisitionId   String
  scoresSubmitted Boolean   @default(false)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  
  @@id([userId, requisitionId])
}


model RequisitionItem {
  id            String    @id @default(cuid())
  name          String
  description   String?
  quantity      Int
  unitPrice     Float
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId String
}

model CustomQuestion {
  id            String    @id @default(cuid())
  questionText  String
  questionType  QuestionType
  options       String[]
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId String
  answers       QuoteAnswer[]
}

model EvaluationCriteria {
  id                String       @id @default(cuid())
  requisitionId     String       @unique
  financialWeight   Float
  technicalWeight   Float
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String            @id @default(cuid())
  name                 String
  weight               Float
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String            @id @default(cuid())
  name                 String
  weight               Float
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  scores               TechnicalScore[]
}


model Quotation {
  id                String      @id @default(cuid())
  transactionId     String?
  requisitionId     String
  vendorId          String
  vendorName        String
  totalPrice        Float
  deliveryDate      DateTime
  createdAt         DateTime    @default(now())
  status            QuotationStatus @default(Submitted)
  notes             String?
  rank              Int?
  finalAverageScore Float?
  cpoDocumentUrl    String?
  vendor            Vendor      @relation(fields: [vendorId], references: [id])
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  items             QuoteItem[]
  answers           QuoteAnswer[]
  scores            CommitteeScoreSet[]
}

model QuoteItem {
  id              String    @id @default(cuid())
  quotationId     String
  requisitionItemId String
  name            String
  quantity        Int
  unitPrice       Float
  leadTimeDays    Int
  brandDetails    String?
  quotation       Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
}

model QuoteAnswer {
  id          String   @id @default(cuid())
  quotationId String
  questionId  String
  answer      String
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  question    CustomQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model CommitteeScoreSet {
  id               String       @id @default(cuid())
  quotationId      String
  scorerId         String
  scorerName       String
  committeeComment String?
  finalScore       Float
  submittedAt      DateTime     @default(now())
  quotation        Quotation    @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  scorer           User         @relation(fields: [scorerId], references: [id])
  financialScores  FinancialScore[]
  technicalScores  TechnicalScore[]
}

model FinancialScore {
  id                String           @id @default(cuid())
  criterionId       String
  score             Float
  comment           String?
  criterion         FinancialCriterion @relation(fields: [criterionId], references: [id])
  committeeScoreSet   CommitteeScoreSet  @relation(fields: [committeeScoreSetId], references: [id], onDelete: Cascade)
  committeeScoreSetId String
}

model TechnicalScore {
  id                String           @id @default(cuid())
  criterionId       String
  score             Float
  comment           String?
  criterion         TechnicalCriterion @relation(fields: [criterionId], references: [id])
  committeeScoreSet   CommitteeScoreSet  @relation(fields: [committeeScoreSetId], references: [id], onDelete: Cascade)
  committeeScoreSetId String
}

model PurchaseOrder {
  id               String     @id @default(cuid())
  transactionId    String?
  requisitionId    String     @unique
  requisitionTitle String
  vendorId         String
  totalAmount      Float
  status           PurchaseOrderStatus @default(Issued)
  createdAt        DateTime   @default(now())
  contract         Json?
  notes            String?
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor           Vendor     @relation(fields: [vendorId], references: [id])
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id              String   @id @default(cuid())
  purchaseOrderId String
  name            String
  quantity        Int
  unitPrice       Float
  totalPrice      Float
  receivedQuantity Int
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  receiptItems    ReceiptItem[]
}

model GoodsReceiptNote {
  id              String   @id @default(cuid())
  transactionId   String?
  purchaseOrderId String
  receivedById    String
  receivedDate    DateTime @default(now())
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedBy      User     @relation(fields: [receivedById], references: [id])
  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String   @id @default(cuid())
  goodsReceiptNoteId String
  poItemId           String
  quantityReceived   Int
  condition          ReceiptCondition @default(Good)
  notes              String?
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  poItem             POItem   @relation(fields: [poItemId], references: [id])
}

model Invoice {
  id               String     @id @default(cuid())
  transactionId    String?
  purchaseOrderId  String
  vendorId         String
  invoiceDate      DateTime
  totalAmount      Float
  status           InvoiceStatus @default(Pending)
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  items            InvoiceItem[]
}

model InvoiceItem {
  id        String  @id @default(cuid())
  invoiceId String
  name      String
  quantity  Int
  unitPrice Float
  totalPrice Float
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime  @default(now())
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String
  user          User?     @relation(fields: [userId], references: [id])
}

enum UserRole {
  Requester
  Approver
  Procurement_Officer
  Finance
  Admin
  Receiving
  Vendor
  Committee_Member
  Committee
}

enum RequisitionStatus {
  Draft
  Pending_Approval
  Approved
  Rejected
  RFQ_In_Progress
  PO_Created
  Fulfilled
  Closed
}

enum QuotationStatus {
  Submitted
  Awarded
  Rejected
  Standby
  Invoice_Submitted
  Failed
  Accepted
  Declined
}

enum PurchaseOrderStatus {
  Issued
  Acknowledged
  Shipped
  Partially_Delivered
  Delivered
  Cancelled
  Matched
  Mismatched
  On_Hold
}

enum ReceiptCondition {
  Good
  Damaged
  Incorrect
}

enum InvoiceStatus {
  Pending
  Approved_for_Payment
  Paid
  Disputed
}

enum KYCStatus {
  Pending
  Verified
  Rejected
}

enum QuestionType {
  text
  boolean
  multiple_choice
}
