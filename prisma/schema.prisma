
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Department {
  id           String                @id @default(cuid())
  name         String                @unique
  users        User[]
  requisitions PurchaseRequisition[]
}

model User {
  id                        String                @id @default(cuid())
  name                      String
  email                     String                @unique
  password                  String
  roleName                  UserRole
  role                      Role                  @relation(fields: [roleName], references: [name])
  departmentId              String?
  department                Department?           @relation(fields: [departmentId], references: [id])
  vendorId                  String?               @unique
  vendor                    Vendor?
  managerId                 String?
  manager                   User?                 @relation("ManagerSubordinate", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates              User[]                @relation("ManagerSubordinate")
  committeeAssignments      CommitteeAssignment[]
  createdContracts          Contract[]
  scoredQuotes              CommitteeScoreSet[]
  auditLogs                 AuditLog[]
  financialCommitteeForReqs PurchaseRequisition[] @relation("FinancialCommittee")
  technicalCommitteeForReqs PurchaseRequisition[] @relation("TechnicalCommittee")
  receivedGoods             GoodsReceiptNote[]
  approvalLimit             Float?

  @@index([managerId])
}

model Role {
  name        UserRole              @id @unique
  permissions PermissionsOnRoles[]
  users       User[]
}

model Permission {
  id      String   @id @default(cuid())
  action  String
  subject String
  roles   PermissionsOnRoles[]

  @@unique([action, subject])
}

model PermissionsOnRoles {
  role         Role       @relation(fields: [roleName], references: [name])
  roleName     UserRole
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  @@id([roleName, permissionId])
}

model PurchaseRequisition {
  id                          String                @id @default(cuid())
  transactionId               String?               @unique
  requesterId                 String
  requester                   User                  @relation(fields: [requesterId], references: [id])
  requesterName               String
  department                  Department            @relation(fields: [departmentId], references: [id])
  departmentId                String
  title                       String
  items                       RequisitionItem[]
  totalPrice                  Float
  justification               String
  status                      RequisitionStatus     @default(Draft)
  createdAt                   DateTime              @default(now())
  updatedAt                   DateTime              @updatedAt
  approverId                  String?
  approver                    User?                 @relation("Approvals", fields: [approverId], references: [id])
  approverComment             String?
  currentApproverId           String?
  currentApprover             User?                 @relation("CurrentApprovals", fields: [currentApproverId], references: [id])
  purchaseOrderId             String?
  purchaseOrder               PurchaseOrder?
  quotations                  Quotation[]
  allowedVendorIds            String[]
  awardedQuoteItemIds         String[]              @default([])
  customQuestions             CustomQuestion[]
  deadline                    DateTime?
  scoringDeadline             DateTime?
  awardResponseDeadline       DateTime?
  awardResponseDurationMinutes Int?
  evaluationCriteria          EvaluationCriteria?
  financialCommitteeMembers   User[]                @relation("FinancialCommittee")
  technicalCommitteeMembers   User[]                @relation("TechnicalCommittee")
  committeeName               String?
  committeePurpose            String?
  cpoAmount                   Float?
  rfqSettings                 Json?
  committeeAssignments        CommitteeAssignment[]
  contract                    Contract?
}

model RequisitionItem {
  id              String              @id @default(cuid())
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId   String
  name            String
  quantity        Int
  unitPrice       Float
  description     String?
  quotedItems     QuoteItem[]
  poItems         POItem[]
}

model CustomQuestion {
  id              String              @id @default(cuid())
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId   String
  questionText    String
  questionType    QuestionType
  isRequired      Boolean             @default(true)
  options         String[]
  answers         QuoteAnswer[]
}

model EvaluationCriteria {
  id                String                 @id @default(cuid())
  requisition       PurchaseRequisition    @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId     String                 @unique
  financialWeight   Int
  technicalWeight   Int
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Int
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Int
  scores               TechnicalScore[]
}

model Quotation {
  id                    String              @id @default(cuid())
  transactionId         String?
  requisition           PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId         String
  vendor                Vendor              @relation(fields: [vendorId], references: [id])
  vendorId              String
  vendorName            String
  items                 QuoteItem[]
  totalPrice            Float
  deliveryDate          DateTime
  createdAt             DateTime            @default(now())
  status                QuotationStatus     @default(Submitted)
  notes                 String?
  rank                  Int?
  answers               QuoteAnswer[]
  scores                CommitteeScoreSet[]
  finalAverageScore     Float?
  cpoDocumentUrl        String?
  experienceDocumentUrl String?
}

model QuoteItem {
  id                String        @id @default(cuid())
  quotation         Quotation     @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId       String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  scores            ItemScore[]
}

model QuoteAnswer {
  id          String         @id @default(cuid())
  quotation   Quotation      @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId String
  question    CustomQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String
  answer      String
}

model Vendor {
  id              String           @id @default(cuid())
  userId          String           @unique
  user            User             @relation(fields: [userId], references: [id])
  name            String
  contactPerson   String
  email           String           @unique
  phone           String
  address         String
  kycStatus       KycStatus        @default(Pending)
  kycDocuments    KYC_Document[]
  rejectionReason String?
  quotations      Quotation[]
  contracts       Contract[]
  purchaseOrders  PurchaseOrder[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId    String
  name        String
  url         String
  submittedAt DateTime @default(now())
}

model CommitteeAssignment {
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId   String
  scoresSubmitted Boolean             @default(false)

  @@id([userId, requisitionId])
}

model CommitteeScoreSet {
  id               String      @id @default(cuid())
  quotation        Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId      String
  scorer           User        @relation(fields: [scorerId], references: [id], onDelete: Cascade)
  scorerId         String
  scorerName       String
  itemScores       ItemScore[]
  finalScore       Float
  committeeComment String?
  submittedAt      DateTime    @default(now())
}

model ItemScore {
  id              String           @id @default(cuid())
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  scoreSetId      String
  quoteItem       QuoteItem        @relation(fields: [quoteItemId], references: [id], onDelete: Cascade)
  quoteItemId     String
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
  finalScore      Float
}

model FinancialScore {
  id          String             @id @default(cuid())
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId String
  criterion   FinancialCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  criterionId String
  score       Int
  comment     String?
}

model TechnicalScore {
  id          String             @id @default(cuid())
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId String
  criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  criterionId String
  score       Int
  comment     String?
}

model Contract {
  id              String              @id @default(cuid())
  contractNumber  String              @default(cuid())
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId   String              @unique
  vendor          Vendor              @relation(fields: [vendorId], references: [id])
  vendorId        String
  startDate       DateTime
  endDate         DateTime
  status          ContractStatus
  createdAt       DateTime            @default(now())
  createdById     String
  createdBy       User                @relation(fields: [createdById], references: [id])
}

model PurchaseOrder {
  id               String             @id @default(cuid())
  transactionId    String?
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId    String
  requisitionTitle String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  vendorId         String
  items            POItem[]
  totalAmount      Float
  status           PurchaseOrderStatus @default(Issued)
  createdAt        DateTime           @default(now())
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id                String           @id @default(cuid())
  po                PurchaseOrder    @relation(fields: [poId], references: [id], onDelete: Cascade)
  poId              String
  requisitionItem   RequisitionItem  @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int
  receiptItems      ReceiptItem[]
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedById    String
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]
}

model ReceiptItem {
  id               String           @id @default(cuid())
  grn              GoodsReceiptNote @relation(fields: [grnId], references: [id], onDelete: Cascade)
  grnId            String
  poItem           POItem           @relation(fields: [poItemId], references: [id])
  poItemId         String
  quantityReceived Int
  condition        ReceiptCondition
  notes            String?
}

model Invoice {
  id                String        @id @default(cuid())
  transactionId     String?
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId   String
  vendorId          String
  invoiceDate       DateTime
  items             InvoiceItem[]
  totalAmount       Float
  status            InvoiceStatus @default(Pending)
  documentUrl       String?
  paymentDate       DateTime?
  paymentReference  String?
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId   String
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime  @default(now())
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String
}

enum UserRole {
  Requester
  Approver
  Procurement_Officer
  Finance
  Admin
  Receiving
  Vendor
  Committee_Member
  Committee
}

enum PermissionAction {
  VIEW
  CREATE
  EDIT
  DELETE
  APPROVE
  REJECT
  SUBMIT
  VERIFY
  SEND
  MANAGE
  PROCESS
  FINALIZE_SCORES
  SUBMIT_SCORES
  SCORE
}

enum PermissionSubject {
  DASHBOARD
  REQUISITIONS
  APPROVALS
  VENDORS
  QUOTATIONS
  CONTRACTS
  PURCHASE_ORDERS
  INVOICES
  GOODS_RECEIPT
  RECORDS
  AUDIT_LOG
  SETTINGS
  REQUISITION
  VENDOR
  RFQ
  COMMITTEE
  PAYMENT
  PERMISSIONS
}

enum RequisitionStatus {
  Draft
  Pending_Approval
  Pending_Managerial_Approval
  Approved
  Rejected
  RFQ_In_Progress
  PO_Created
  Fulfilled
  Closed
}

enum QuestionType {
  text
  boolean
  multiple_choice
  file
}

enum KycStatus {
  Pending
  Verified
  Rejected
}

enum QuotationStatus {
  Submitted
  Awarded
  Partially_Awarded
  Rejected
  Standby
  Invoice_Submitted
  Failed
  Accepted
  Declined
}

enum ContractStatus {
  Draft
  Active
  Expired
}

enum PurchaseOrderStatus {
  Issued
  Acknowledged
  Shipped
  Partially_Delivered
  Delivered
  Cancelled
  Matched
  Mismatched
  On_Hold
}

enum ReceiptCondition {
  Good
  Damaged
  Incorrect
}

enum InvoiceStatus {
  Pending
  Approved_for_Payment
  Paid
  Disputed
}
