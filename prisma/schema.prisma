
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String                @id @default(cuid())
  name                    String
  email                   String                @unique
  password                String
  roleName                UserRole
  role                    Role                  @relation(fields: [roleName], references: [name])
  departmentId            String?
  department              Department?           @relation(fields: [departmentId], references: [id])
  approvalLimit           Float?
  managerId               String?
  manager                 User?                 @relation("UserHierarchy", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reports                 User[]                @relation("UserHierarchy")
  vendorId                String?               @unique
  vendor                  Vendor?
  createdRequisitions     PurchaseRequisition[] @relation("Requester")
  approvedRequisitions    PurchaseRequisition[] @relation("Approver")
  receivedGoods           GoodsReceiptNote[]    @relation("ReceivedBy")
  auditLogs               AuditLog[]
  committeeAssignments    CommitteeAssignment[]
  scores                  CommitteeScoreSet[]
  financialCommittees     PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommittees     PurchaseRequisition[] @relation("TechnicalCommitteeMembers")

  @@index([departmentId])
  @@index([managerId])
  @@index([vendorId])
}

model Department {
  id           String                @id @default(cuid())
  name         String                @unique
  users        User[]
  requisitions PurchaseRequisition[]
}

model Vendor {
  id              String                @id @default(cuid())
  user            User                  @relation(fields: [userId], references: [id])
  userId          String                @unique
  name            String
  contactPerson   String
  email           String                @unique
  phone           String
  address         String
  kycStatus       String // Pending, Verified, Rejected
  rejectionReason String?
  kycDocuments    KYC_Document[]
  quotations      Quotation[]
  contracts       Contract[]
  purchaseOrders  PurchaseOrder[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  vendorId    String
  name        String
  url         String
  submittedAt DateTime @default(now())

  @@index([vendorId])
}

model PurchaseRequisition {
  id                          String                @id @default(cuid())
  transactionId               String?               @unique
  requester                   User                  @relation("Requester", fields: [requesterId], references: [id])
  requesterId                 String
  requesterName               String
  title                       String
  departmentId                String
  department                  Department            @relation(fields: [departmentId], references: [id])
  justification               String
  status                      String // Draft, Pending_Approval, Approved, Rejected, RFQ_In_Progress, PO_Created, Fulfilled, Closed, Pending_Managerial_Approval
  totalPrice                  Float
  createdAt                   DateTime              @default(now())
  updatedAt                   DateTime              @updatedAt
  committeeAssignments        CommitteeAssignment[]
  approverId                  String?
  approver                    User?                 @relation("Approver", fields: [approverId], references: [id])
  approverComment             String?
  currentApproverId           String?
  financialCommitteeMembers   User[]                @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers   User[]                @relation("TechnicalCommitteeMembers")
  allowedVendorIds            String[]
  awardedQuoteItemIds         String[]              @default([])
  deadline                    DateTime?
  scoringDeadline             DateTime?
  awardResponseDeadline       DateTime?
  awardResponseDurationMinutes Int?
  cpoAmount                   Float?
  rfqSettings                 Json?
  purchaseOrderId             String?               @unique
  purchaseOrder               PurchaseOrder?
  items                       RequisitionItem[]
  customQuestions             CustomQuestion[]
  evaluationCriteria          EvaluationCriteria?
  quotations                  Quotation[]
  contracts                   Contract[]

  @@index([requesterId])
  @@index([departmentId])
  @@index([approverId])
}

model RequisitionItem {
  id              String               @id @default(cuid())
  requisition     PurchaseRequisition  @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId   String
  name            String
  quantity        Int
  unitPrice       Float
  description     String?
  quotedItems     QuoteItem[]

  @@index([requisitionId])
}

model CustomQuestion {
  id            String              @id @default(cuid())
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId String
  questionText  String
  questionType  QuestionType // text, boolean, multiple_choice, file
  isRequired    Boolean             @default(true)
  options       String[]
  answers       QuoteAnswer[]

  @@index([requisitionId])
}

model EvaluationCriteria {
  id                      String                @id @default(cuid())
  requisition             PurchaseRequisition   @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId           String                @unique
  financialWeight         Int
  technicalWeight         Int
  financialCriteria       FinancialCriterion[]
  technicalCriteria       TechnicalCriterion[]
}

model FinancialCriterion {
  id                      String              @id @default(cuid())
  evaluationCriteria      EvaluationCriteria  @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId    String
  name                    String
  weight                  Int
  scores                  FinancialScore[]

  @@index([evaluationCriteriaId])
}

model TechnicalCriterion {
  id                      String              @id @default(cuid())
  evaluationCriteria      EvaluationCriteria  @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId    String
  name                    String
  weight                  Int
  scores                  TechnicalScore[]

  @@index([evaluationCriteriaId])
}

model Quotation {
  id                      String              @id @default(cuid())
  transactionId           String?
  requisition             PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId           String
  vendor                  Vendor              @relation(fields: [vendorId], references: [id])
  vendorId                String
  vendorName              String
  totalPrice              Float
  deliveryDate            DateTime
  status                  String // Submitted, Awarded, Partially_Awarded, Rejected, Standby, Invoice_Submitted, Failed, Accepted, Declined
  notes                   String?
  rank                    Int?
  createdAt               DateTime            @default(now())
  finalAverageScore       Float?
  cpoDocumentUrl          String?
  experienceDocumentUrl   String?
  items                   QuoteItem[]
  answers                 QuoteAnswer[]
  scores                  CommitteeScoreSet[]

  @@index([requisitionId])
  @@index([vendorId])
}

model QuoteItem {
  id                String        @id @default(cuid())
  quotation         Quotation     @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId       String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  scores            ItemScore[]

  @@index([quotationId])
  @@index([requisitionItemId])
}

model QuoteAnswer {
  id          String         @id @default(cuid())
  quotation   Quotation      @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId String
  question    CustomQuestion @relation(fields: [questionId], references: [id])
  questionId  String
  answer      String

  @@index([quotationId])
  @@index([questionId])
}

model CommitteeScoreSet {
  id                String      @id @default(cuid())
  quotation         Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId       String
  scorer            User        @relation(fields: [scorerId], references: [id])
  scorerId          String
  scorerName        String
  finalScore        Float
  committeeComment  String?
  submittedAt       DateTime    @default(now())
  itemScores        ItemScore[]

  @@index([quotationId])
  @@index([scorerId])
}

model ItemScore {
  id              String           @id @default(cuid())
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  scoreSetId      String
  quoteItem       QuoteItem        @relation(fields: [quoteItemId], references: [id])
  quoteItemId     String           @unique
  finalScore      Float
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]

  @@index([scoreSetId])
}

model FinancialScore {
  id          String              @id @default(cuid())
  itemScore   ItemScore           @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId String
  criterion   FinancialCriterion  @relation(fields: [criterionId], references: [id])
  criterionId String
  score       Int
  comment     String?

  @@index([itemScoreId])
  @@index([criterionId])
}

model TechnicalScore {
  id          String             @id @default(cuid())
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId String
  criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id])
  criterionId String
  score       Int
  comment     String?

  @@index([itemScoreId])
  @@index([criterionId])
}

model Contract {
  id              String              @id @default(cuid())
  contractNumber  String              @unique @default(cuid())
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId   String              @unique
  vendor          Vendor              @relation(fields: [vendorId], references: [id])
  vendorId        String
  startDate       DateTime
  endDate         DateTime
  status          String // Draft, Active, Expired
  filePath        String?
  createdAt       DateTime            @default(now())

  @@index([requisitionId])
  @@index([vendorId])
}

model PurchaseOrder {
  id                String           @id @default(cuid())
  transactionId     String?
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId     String           @unique
  requisitionTitle  String
  vendor            Vendor           @relation(fields: [vendorId], references: [id])
  vendorId          String
  totalAmount       Float
  status            String // Issued, Acknowledged, Shipped, Partially_Delivered, Delivered, Cancelled, Matched, Mismatched, On_Hold
  createdAt         DateTime         @default(now())
  items             POItem[]
  receipts          GoodsReceiptNote[]
  invoices          Invoice[]

  @@index([vendorId])
}

model POItem {
  id               String           @id @default(cuid())
  purchaseOrder    PurchaseOrder    @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  purchaseOrderId  String
  requisitionItemId String
  name             String
  quantity         Int
  unitPrice        Float
  totalPrice       Float
  receivedQuantity Int              @default(0)
  receiptItems     ReceiptItem[]

  @@index([purchaseOrderId])
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  receivedBy      User          @relation("ReceivedBy", fields: [receivedById], references: [id])
  receivedById    String
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]

  @@index([purchaseOrderId])
  @@index([receivedById])
}

model ReceiptItem {
  id               String           @id @default(cuid())
  grn              GoodsReceiptNote @relation(fields: [grnId], references: [id], onDelete: Cascade)
  grnId            String
  poItem           POItem           @relation(fields: [poItemId], references: [id])
  poItemId         String
  quantityReceived Int
  condition        String // Good, Damaged, Incorrect
  notes            String?

  @@index([grnId])
  @@index([poItemId])
}

model Invoice {
  id               String        @id @default(cuid())
  transactionId    String?
  po               PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId  String
  vendorId         String
  invoiceDate      DateTime
  totalAmount      Float
  status           String // Pending, Approved_for_Payment, Paid, Disputed
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  items            InvoiceItem[]

  @@index([purchaseOrderId])
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId   String
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float

  @@index([invoiceId])
}

model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime  @default(now())
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String

  @@index([userId])
}

model Role {
  name        UserRole      @unique
  permissions Permission[]
  users       User[]

  @@id([name])
}

model Permission {
  action  PermissionAction
  subject PermissionSubject
  roles   Role[]

  @@id([action, subject])
}

model CommitteeAssignment {
  user            User                @relation(fields: [userId], references: [id])
  userId          String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId   String
  scoresSubmitted Boolean             @default(false)

  @@id([userId, requisitionId])
}


enum UserRole {
  Admin
  Procurement_Officer
  Requester
  Approver
  Finance
  Receiving
  Committee_Member
  Committee
  Vendor
}

enum PermissionAction {
  VIEW
  CREATE
  EDIT
  DELETE
  APPROVE
  REJECT
  SUBMIT
  VERIFY
  SEND
  MANAGE
  FINALIZE_SCORES
  SCORE
  SUBMIT_SCORES
  PROCESS
}

enum PermissionSubject {
  DASHBOARD
  REQUISITIONS
  APPROVALS
  VENDORS
  QUOTATIONS
  CONTRACTS
  PURCHASE_ORDERS
  INVOICES
  GOODS_RECEIPT
  RECORDS
  AUDIT_LOG
  SETTINGS
  REQUISITION
  VENDOR
  RFQ
  COMMITTEE
  PAYMENT
  PERMISSIONS
}

enum QuestionType {
  text
  boolean
  multiple_choice
  file
}
