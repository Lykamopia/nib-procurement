
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                @id @default(cuid())
  name                    String
  email                   String                @unique
  password                String
  role                    UserRole
  vendorId                String?               @unique
  vendor                  Vendor?               @relation(fields: [vendorId], references: [id])
  departmentId            String?
  department              Department?           @relation(fields: [departmentId], references: [id])
  createdRequisitions     PurchaseRequisition[] @relation("Requester")
  approvedRequisitions    PurchaseRequisition[] @relation("Approver")
  auditLogs               AuditLog[]
  goodsReceipts           GoodsReceiptNote[]    @relation("Receiver")
  committeeAssignments    CommitteeAssignment[]
  financialCommittees     PurchaseRequisition[] @relation("FinancialCommittee")
  technicalCommittees     PurchaseRequisition[] @relation("TechnicalCommittee")
  committeeScores         CommitteeScoreSet[]   @relation("Scorer")
}

enum UserRole {
  Requester
  Approver
  Procurement_Officer
  Finance
  Admin
  Receiving
  Vendor
  Committee_Member
  Committee
}

model Department {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
  purchaseRequisitions PurchaseRequisition[]
}

model PurchaseRequisition {
  id                           String                 @id @default(cuid())
  transactionId                String?
  requester                    User                   @relation("Requester", fields: [requesterId], references: [id])
  requesterId                  String
  requesterName                String // Denormalized for convenience
  title                        String
  justification                String
  department                   Department?            @relation(fields: [departmentId], references: [id])
  departmentId                 String?
  status                       RequisitionStatus
  totalPrice                   Float
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  approver                     User?                  @relation("Approver", fields: [approverId], references: [id])
  approverId                   String?
  approverComment              String?
  purchaseOrderId              String?
  items                        RequisitionItem[]
  quotations                   Quotation[]
  customQuestions              CustomQuestion[]
  evaluationCriteria           EvaluationCriteria?
  financialCommitteeMembers    User[]                 @relation("FinancialCommittee")
  technicalCommitteeMembers    User[]                 @relation("TechnicalCommittee")
  committeeAssignments         CommitteeAssignment[]
  allowedVendorIds             String[]
  deadline                     DateTime?
  scoringDeadline              DateTime?
  awardResponseDeadline        DateTime?
  awardResponseDurationMinutes Int?
  cpoAmount                    Float?
  committeeName                String?
  committeePurpose             String?
  rfqSettings                  Json?
  awardedQuoteItemIds          String[]               @default([])
}

model RequisitionItem {
  id              String              @id @default(cuid())
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId   String
  name            String
  description     String?
  quantity        Int
  unitPrice       Float?
  quoteItems      QuoteItem[]
  purchaseOrderItems POItem[]
}

model CustomQuestion {
  id              String              @id @default(cuid())
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId   String
  questionText    String
  questionType    String
  isRequired      Boolean             @default(true)
  options         String[]
  answers         QuoteAnswer[]
  requisitionItemId String?
}

model EvaluationCriteria {
  id                 String               @id @default(cuid())
  requisition        PurchaseRequisition  @relation(fields: [requisitionId], references: [id])
  requisitionId      String               @unique
  financialWeight    Int
  technicalWeight    Int
  financialCriteria  FinancialCriterion[]
  technicalCriteria  TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  evaluationCriteriaId String
  name                 String
  weight               Int
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  evaluationCriteriaId String
  name                 String
  weight               Int
  scores               TechnicalScore[]
}


enum RequisitionStatus {
  Draft
  Pending_Approval
  Approved
  Rejected
  RFQ_In_Progress
  PO_Created
  Fulfilled
  Closed
}

model Vendor {
  id              String           @id @default(cuid())
  name            String
  contactPerson   String
  email           String           @unique
  phone           String
  address         String
  user            User?
  userId          String           @unique
  kycStatus       KycStatus
  rejectionReason String?
  kycDocuments    KYC_Document[]
  quotations      Quotation[]
  purchaseOrders  PurchaseOrder[]
  contracts       Contract[]
}

model KYC_Document {
  id        String   @id @default(cuid())
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  vendorId  String
  name      String
  url       String
  submittedAt DateTime @default(now())
}

enum KycStatus {
  Pending
  Verified
  Rejected
}

model Quotation {
  id                String              @id @default(cuid())
  transactionId     String?
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId     String
  vendor            Vendor              @relation(fields: [vendorId], references: [id])
  vendorId          String
  vendorName        String // Denormalized for convenience
  totalPrice        Float
  deliveryDate      DateTime
  status            QuotationStatus
  notes             String?
  rank              Int?
  cpoDocumentUrl    String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  items             QuoteItem[]
  answers           QuoteAnswer[]
  scores            CommitteeScoreSet[]
  finalAverageScore Float?
}

model QuoteItem {
  id                String       @id @default(cuid())
  quotation         Quotation    @relation(fields: [quotationId], references: [id])
  quotationId       String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  scores            ItemScore[]
}

model QuoteAnswer {
    id          String      @id @default(cuid())
    quotation   Quotation   @relation(fields: [quotationId], references: [id])
    quotationId String
    question    CustomQuestion @relation(fields: [questionId], references: [id])
    questionId  String
    answer      String
}

enum QuotationStatus {
  Submitted
  Awarded
  Partially_Awarded
  Rejected
  Standby
  Invoice_Submitted
  Failed
  Accepted
  Declined
}

model CommitteeScoreSet {
  id               String       @id @default(cuid())
  quotation        Quotation    @relation(fields: [quotationId], references: [id])
  quotationId      String
  scorer           User         @relation("Scorer", fields: [scorerId], references: [id])
  scorerId         String
  scorerName       String // Denormalized
  committeeComment String?
  finalScore       Float
  itemScores       ItemScore[]
  submittedAt      DateTime     @default(now())
}

model ItemScore {
  id              String              @id @default(cuid())
  scoreSet        CommitteeScoreSet   @relation(fields: [scoreSetId], references: [id])
  scoreSetId      String
  quoteItem       QuoteItem           @relation(fields: [quoteItemId], references: [id])
  quoteItemId     String
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
  finalScore      Float
}

model FinancialScore {
  id              String             @id @default(cuid())
  itemScore       ItemScore          @relation(fields: [itemScoreId], references: [id])
  itemScoreId     String
  criterion       FinancialCriterion @relation(fields: [criterionId], references: [id])
  criterionId     String
  score           Int
  comment         String?
}

model TechnicalScore {
  id              String             @id @default(cuid())
  itemScore       ItemScore          @relation(fields: [itemScoreId], references: [id])
  itemScoreId     String
  criterion       TechnicalCriterion @relation(fields: [criterionId], references: [id])
  criterionId     String
  score           Int
  comment         String?
}


model PurchaseOrder {
  id               String             @id @default(cuid())
  transactionId    String?
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId    String
  requisitionTitle String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  vendorId         String
  totalAmount      Float
  status           PurchaseOrderStatus
  createdAt        DateTime           @default(now())
  contract         Json?
  notes            String?
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
    id              String @id @default(cuid())
    purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
    purchaseOrderId String
    requisitionItem RequisitionItem @relation(fields: [requisitionItemId], references: [id])
    requisitionItemId String
    name            String
    quantity        Int
    unitPrice       Float
    totalPrice      Float
    receivedQuantity Int
    receiptItems    ReceiptItem[]
}

enum PurchaseOrderStatus {
  Issued
  Acknowledged
  Shipped
  Partially_Delivered
  Delivered
  Cancelled
  Matched
  Mismatched
  On_Hold
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  receivedBy      User          @relation("Receiver", fields: [receivedById], references: [id])
  receivedById    String
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]
  photos          Json[]
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id])
  goodsReceiptNoteId String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  poItemId           String
  quantityReceived   Int
  condition          ReceiptCondition
  notes              String?
}

enum ReceiptCondition {
  Good
  Damaged
  Incorrect
}

model Invoice {
  id               String       @id @default(cuid())
  transactionId    String?
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId  String
  vendorId         String
  invoiceDate      DateTime
  totalAmount      Float
  status           InvoiceStatus
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  items            InvoiceItem[]
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId   String
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

enum InvoiceStatus {
  Pending
  Approved_for_Payment
  Paid
  Disputed
}

model Contract {
    id String @id @default(cuid())
    contractNumber String @unique @default(cuid())
    requisition    PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    requisitionId  String
    vendor         Vendor @relation(fields: [vendorId], references: [id])
    vendorId       String
    startDate      DateTime
    endDate        DateTime
    filePath       String?
    status         String
    createdAt      DateTime @default(now())
}


model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime  @default(now())
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String
}

model CommitteeAssignment {
  user            User                @relation(fields: [userId], references: [id])
  userId          String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId   String
  scoresSubmitted Boolean

  @@id([userId, requisitionId])
}
