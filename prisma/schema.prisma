
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String   @id @default(cuid())
  name                    String
  email                   String   @unique
  password                String
  approvalLimit         Float?
  manager                 User?                 @relation("UserHierarchy", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  managerId               String?
  reports                 User[]                @relation("UserHierarchy")
  vendor                  Vendor?
  vendorId                String?               @unique
  department              Department?           @relation(fields: [departmentId], references: [id])
  departmentId            String?
  createdRequisitions     PurchaseRequisition[] @relation("Requester")
  approvedRequisitions    PurchaseRequisition[] @relation("Approver")
  auditLogs               AuditLog[]
  receipts                GoodsReceiptNote[]    @relation("ReceivedBy")
  committeeAssignments    CommitteeAssignment[]
  financialCommitteeFor   PurchaseRequisition[] @relation("FinancialCommittee")
  technicalCommitteeFor   PurchaseRequisition[] @relation("TechnicalCommittee")
  scores                  CommitteeScoreSet[]
  role                    Role                  @relation(fields: [roleName], references: [name])
  roleName                UserRole
}

model Department {
  id           String                @id @default(cuid())
  name         String                @unique
  users        User[]
  requisitions PurchaseRequisition[]
}

model Vendor {
  id              String                @id @default(cuid())
  user            User                  @relation(fields: [userId], references: [id])
  userId          String                @unique
  name            String
  contactPerson   String
  email           String                @unique
  phone           String
  address         String
  kycStatus       KycStatus             @default(Pending)
  rejectionReason String?
  kycDocuments    KYC_Document[]
  quotations      Quotation[]
  contracts       Contract[]
  purchaseOrders  PurchaseOrder[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  vendorId    String
  name        String
  url         String
  submittedAt DateTime @default(now())
}

model PurchaseRequisition {
  id                          String                @id @default(cuid())
  transactionId               String?
  requester                   User                  @relation("Requester", fields: [requesterId], references: [id])
  requesterId                 String
  requesterName               String
  title                       String
  department                  Department            @relation(fields: [departmentId], references: [id])
  departmentId                String
  justification               String
  totalPrice                  Float
  status                      RequisitionStatus
  createdAt                   DateTime              @default(now())
  updatedAt                   DateTime              @updatedAt
  items                       RequisitionItem[]
  customQuestions             CustomQuestion[]
  evaluationCriteria        EvaluationCriteria?
  quotations                  Quotation[]
  committeeAssignments        CommitteeAssignment[]
  approver                    User?                 @relation("Approver", fields: [approverId], references: [id])
  approverId                  String?
  approverComment             String?
  currentApproverId           String?
  financialCommitteeMembers   User[]                @relation("FinancialCommittee")
  technicalCommitteeMembers   User[]                @relation("TechnicalCommittee")
  committeeName               String?
  committeePurpose            String?
  deadline                    DateTime?
  scoringDeadline             DateTime?
  awardResponseDeadline       DateTime?
  awardResponseDurationMinutes Int?
  allowedVendorIds            String[]
  awardedQuoteItemIds         String[]
  rfqSettings                 Json?
  purchaseOrder               PurchaseOrder?
  purchaseOrderId             String?               @unique
  contract                    Contract?
}

model RequisitionItem {
  id            String      @id @default(cuid())
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId String
  name          String
  description   String?
  quantity      Int
  unitPrice     Float?
  quotes        QuoteItem[]
}

model CustomQuestion {
  id              String               @id @default(cuid())
  requisition     PurchaseRequisition  @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId   String
  questionText    String
  questionType    QuestionType
  isRequired      Boolean              @default(true)
  options         String[]
  answers         QuoteAnswer[]
  requisitionItemId String?
}

model EvaluationCriteria {
  id                String               @id @default(cuid())
  requisition       PurchaseRequisition  @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId     String               @unique
  financialWeight   Int
  technicalWeight   Int
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Int
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Int
  scores               TechnicalScore[]
}

model Quotation {
  id                  String              @id @default(cuid())
  transactionId       String?
  requisition         PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId       String
  vendor              Vendor              @relation(fields: [vendorId], references: [id])
  vendorId            String
  vendorName          String
  totalPrice          Float
  deliveryDate        DateTime
  status              QuotationStatus
  notes               String?
  createdAt           DateTime            @default(now())
  rank                Int?
  finalAverageScore   Float?
  items               QuoteItem[]
  answers             QuoteAnswer[]
  scores              CommitteeScoreSet[]
  cpoDocumentUrl      String?
  experienceDocumentUrl String?
}

model QuoteItem {
  id                String        @id @default(cuid())
  quotation         Quotation     @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId       String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  scores            ItemScore[]
}

model QuoteAnswer {
  id          String         @id @default(cuid())
  quotation   Quotation      @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId String
  question    CustomQuestion @relation(fields: [questionId], references: [id])
  questionId  String
  answer      String
}

model CommitteeScoreSet {
  id               String      @id @default(cuid())
  quotation        Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId      String
  scorer           User        @relation(fields: [scorerId], references: [id])
  scorerId         String
  scorerName       String
  committeeComment String?
  finalScore       Float
  submittedAt      DateTime    @default(now())
  itemScores       ItemScore[]
}

model ItemScore {
  id              String           @id @default(cuid())
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  scoreSetId      String
  quoteItem       QuoteItem        @relation(fields: [quoteItemId], references: [id])
  quoteItemId     String           @unique
  finalScore      Float
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
}

model FinancialScore {
  id          String      @id @default(cuid())
  itemScore   ItemScore   @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId String
  criterion   FinancialCriterion @relation(fields: [criterionId], references: [id])
  criterionId String
  score       Int
  comment     String?
}

model TechnicalScore {
  id          String             @id @default(cuid())
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId String
  criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id])
  criterionId String
  score       Int
  comment     String?
}

model Contract {
  id              String              @id @default(cuid())
  contractNumber  String              @unique @default(cuid())
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId   String              @unique
  vendor          Vendor              @relation(fields: [vendorId], references: [id])
  vendorId        String
  filePath        String?
  startDate       DateTime
  endDate         DateTime
  status          String
  createdAt       DateTime            @default(now())
}

model PurchaseOrder {
    id               String           @id @default(cuid())
    transactionId    String?
    requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    requisitionId    String
    requisitionTitle String
    vendor           Vendor             @relation(fields: [vendorId], references: [id])
    vendorId         String
    totalAmount      Float
    status           POStatus
    createdAt        DateTime         @default(now())
    items            POItem[]
    receipts         GoodsReceiptNote[]
    invoices         Invoice[]
}

model POItem {
    id                 String   @id @default(cuid())
    purchaseOrder      PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
    purchaseOrderId    String
    name               String
    quantity           Int
    unitPrice          Float
    totalPrice         Float
    receivedQuantity   Int      @default(0)
    requisitionItemId  String
    receiptItems       ReceiptItem[]
}

model GoodsReceiptNote {
    id              String        @id @default(cuid())
    transactionId   String?
    purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
    purchaseOrderId String
    receivedBy      User          @relation("ReceivedBy", fields: [receivedById], references: [id])
    receivedById    String
    receivedDate    DateTime      @default(now())
    items           ReceiptItem[]
}

model ReceiptItem {
    id               String           @id @default(cuid())
    grn              GoodsReceiptNote @relation(fields: [grnId], references: [id], onDelete: Cascade)
    grnId            String
    poItem           POItem           @relation(fields: [poItemId], references: [id])
    poItemId         String
    quantityReceived Int
    condition        ItemCondition
    notes            String?
}

model Invoice {
    id               String        @id @default(cuid())
    transactionId    String?
    po               PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
    purchaseOrderId  String
    vendorId         String
    invoiceDate      DateTime
    totalAmount      Float
    status           InvoiceStatus
    documentUrl      String?
    paymentDate      DateTime?
    paymentReference String?
    items            InvoiceItem[]
}

model InvoiceItem {
    id          String  @id @default(cuid())
    invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    invoiceId   String
    name        String
    quantity    Int
    unitPrice   Float
    totalPrice  Float
}

model Role {
  name        UserRole      @unique
  permissions Permission[]
  users       User[]

  @@id([name])
}

model Permission {
  action  PermissionAction
  subject PermissionSubject
  roles   Role[]

  @@id([action, subject])
}

model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime  @default(now())
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String
}

model CommitteeAssignment {
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId   String
  scoresSubmitted Boolean             @default(false)

  @@id([userId, requisitionId])
}


enum UserRole {
  Requester
  Approver
  Procurement_Officer
  Finance
  Admin
  Receiving
  Vendor
  Committee_Member
  Committee
}

enum PermissionAction {
  VIEW
  CREATE
  EDIT
  DELETE
  APPROVE
  REJECT
  SUBMIT
  VERIFY
  SEND
  MANAGE
  FINALIZE_SCORES
  SCORE
  SUBMIT_SCORES
  PROCESS
}

enum PermissionSubject {
  DASHBOARD
  REQUISITIONS
  APPROVALS
  VENDORS
  QUOTATIONS
  CONTRACTS
  PURCHASE_ORDERS
  INVOICES
  GOODS_RECEIPT
  RECORDS
  AUDIT_LOG
  SETTINGS
  REQUISITION
  VENDOR
  RFQ
  COMMITTEE
  PAYMENT
  PERMISSIONS
}


enum KycStatus {
  Pending
  Verified
  Rejected
}

enum RequisitionStatus {
  Draft
  Pending_Approval
  Pending_Managerial_Approval
  Approved
  Rejected
  RFQ_In_Progress
  PO_Created
  Fulfilled
  Closed
}

enum QuotationStatus {
  Submitted
  Awarded
  Partially_Awarded
  Rejected
  Standby
  Invoice_Submitted
  Failed
  Accepted
  Declined
}

enum POStatus {
  Issued
  Acknowledged
  Shipped
  Partially_Delivered
  Delivered
  Cancelled
  Matched
  Mismatched
  On_Hold
}

enum ItemCondition {
  Good
  Damaged
  Incorrect
}

enum InvoiceStatus {
  Pending
  Approved_for_Payment
  Paid
  Disputed
}

enum QuestionType {
    text
    boolean
    multiple_choice
    file
}

    