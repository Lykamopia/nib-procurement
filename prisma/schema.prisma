
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                        @id @default(uuid())
  name                    String
  email                   String                        @unique
  password                String
  role                    UserRole
  approvalLimit           Float?
  departmentId            String?
  vendorId                String?                       @unique
  managerId               String?

  department              Department?                   @relation("DepartmentMembers", fields: [departmentId], references: [id])
  headedDepartment        Department?                   @relation("DepartmentHead")
  vendor                  Vendor?
  manager                 User?                         @relation("ManagerSubordinate", fields: [managerId], references: [id])
  subordinates            User[]                        @relation("ManagerSubordinate")
  
  requisitions            PurchaseRequisition[]         @relation("Requester")
  approvedRequisitions    PurchaseRequisition[]         @relation("Approver")
  currentApprovals        PurchaseRequisition[]         @relation("CurrentApprover")
  receipts                GoodsReceiptNote[]
  auditLogs               AuditLog[]
  
  financialCommitteeFor   RequisitionFinancialCommittee[]
  technicalCommitteeFor   RequisitionTechnicalCommittee[]
  committeeAssignments    CommitteeAssignment[]
  committeeRecommendations CommitteeRecommendation[]

  @@index([departmentId])
  @@index([vendorId])
  @@index([managerId])
}

enum UserRole {
  Requester
  Approver
  Procurement_Officer
  Finance
  Admin
  Receiving
  Vendor
  Committee_Member
  Committee_A_Member
  Committee_B_Member
  President
  VP_Resources
  Director_Supply_Chain
  Director_HRM
  Procurement_Manager
  Committee // a role to manage committees
}

model Department {
  id           String                @id @default(uuid())
  name         String                @unique
  description  String?
  headId       String?               @unique
  
  head         User?                 @relation("DepartmentHead", fields: [headId], references: [id])
  users        User[]                @relation("DepartmentMembers")
  requisitions PurchaseRequisition[]
}

model Vendor {
  id            String         @id @default(uuid())
  name          String
  contactPerson String
  email         String         @unique
  phone         String
  address       String
  kycStatus     KycStatus      @default(Pending)
  rejectionReason String?
  
  userId        String         @unique
  user          User           @relation(fields: [userId], references: [id])
  
  kycDocuments  KYC_Document[]
  quotations    Quotation[]
  contracts     Contract[]
  purchaseOrders PurchaseOrder[]

  @@index([userId])
}

enum KycStatus {
  Pending
  Verified
  Rejected
}

model KYC_Document {
  id          String   @id @default(uuid())
  vendorId    String
  name        String
  url         String
  submittedAt DateTime @default(now())
  
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  @@index([vendorId])
}


model PurchaseRequisition {
  id                   String  @id @default(uuid())
  transactionId        String? @unique
  title                String
  justification        String
  status               RequisitionStatus @default(Draft)
  totalPrice           Float
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  
  requesterId          String
  requesterName        String
  requester            User              @relation("Requester", fields: [requesterId], references: [id])
  
  departmentId         String
  department           Department        @relation(fields: [departmentId], references: [id])

  approverId           String?
  approver             User?             @relation("Approver", fields: [approverId], references: [id])
  approverComment      String?

  currentApproverId    String?
  currentApprover      User?             @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  
  purchaseOrderId      String?           @unique
  purchaseOrder        PurchaseOrder?

  items                RequisitionItem[]
  customQuestions      CustomQuestion[]
  evaluationCriteria   EvaluationCriteria?
  
  financialCommitteeMembers   User[] @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers   User[] @relation("TechnicalCommitteeMembers")

  financialCommittee    RequisitionFinancialCommittee[]
  technicalCommittee    RequisitionTechnicalCommittee[]

  quotations           Quotation[]
  contracts            Contract[]
  committeeAssignments CommitteeAssignment[]
  committeeRecommendations CommitteeRecommendation[]

  // New fields for RFQ Process
  allowedVendorIds     String[]
  deadline             DateTime?
  cpoAmount            Float?
  scoringDeadline      DateTime?
  awardResponseDeadline DateTime?
  awardResponseDurationMinutes Int?
  committeeName        String?
  committeePurpose     String?
  awardedQuoteItemIds  String[]
  rfqSettings          Json?

  @@index([requesterId])
  @@index([departmentId])
  @@index([approverId])
  @@index([currentApproverId])
}

enum RequisitionStatus {
  Draft
  Pending_Approval
  Approved
  Rejected
  RFQ_In_Progress
  PO_Created
  Fulfilled
  Closed
  Pending_Managerial_Approval
  Pending_Committee_A_Review
  Pending_Committee_B_Review
  Pending_Final_Approval
  Approved_Awaiting_Notification
}

enum Urgency {
  Low
  Medium
  High
  Critical
}

model RequisitionItem {
  id            String  @id @default(uuid())
  requisitionId String
  name          String
  description   String?
  quantity      Int
  unitPrice     Float
  
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  quoteItems    QuoteItem[]
  poItems       POItem[]
  @@index([requisitionId])
}

model CustomQuestion {
    id            String @id @default(uuid())
    requisitionId String
    questionText  String
    questionType  String // text, boolean, multiple-choice, file
    isRequired    Boolean @default(true)
    options       String[]

    requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    answers       QuoteAnswer[]
    @@index([requisitionId])
}

model EvaluationCriteria {
    id                  String @id @default(uuid())
    requisitionId       String @unique
    financialWeight     Int
    technicalWeight     Int
    
    requisition         PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    financialCriteria   FinancialCriterion[]
    technicalCriteria   TechnicalCriterion[]
}

model FinancialCriterion {
    id                  String @id @default(uuid())
    evaluationCriteriaId String
    name                String
    weight              Int
    
    evaluationCriteria  EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
    scores              FinancialScore[]
    @@index([evaluationCriteriaId])
}

model TechnicalCriterion {
    id                  String @id @default(uuid())
    evaluationCriteriaId String
    name                String
    weight              Int

    evaluationCriteria  EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
    scores              TechnicalScore[]
    @@index([evaluationCriteriaId])
}

// --- Join tables for committee members ---
model RequisitionFinancialCommittee {
  requisitionId String
  userId        String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  user          User                @relation(fields: [userId], references: [id])

  @@id([requisitionId, userId])
}

model RequisitionTechnicalCommittee {
  requisitionId String
  userId        String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  user          User                @relation(fields: [userId], references: [id])

  @@id([requisitionId, userId])
}

model CommitteeAssignment {
  userId        String
  requisitionId String
  scoresSubmitted Boolean @default(false)
  
  user          User @relation(fields: [userId], references: [id])
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  
  @@id([userId, requisitionId])
}

model CommitteeRecommendation {
  id              String   @id @default(uuid())
  requisitionId   String
  userId          String
  committeeRole   String
  recommendation  String // "Recommend for Approval" or "Request Changes"
  comment         String?
  createdAt       DateTime @default(now())

  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  user            User                @relation(fields: [userId], references: [id])

  @@index([requisitionId])
  @@index([userId])
}


model Quotation {
  id              String   @id @default(uuid())
  transactionId   String?
  requisitionId   String
  vendorId        String
  vendorName      String
  totalPrice      Float
  deliveryDate    DateTime
  status          QuotationStatus @default(Submitted)
  notes           String?
  createdAt       DateTime        @default(now())
  rank            Int?
  finalAverageScore Float?
  cpoDocumentUrl  String?
  experienceDocumentUrl String?
  
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  vendor          Vendor              @relation(fields: [vendorId], references: [id])
  items           QuoteItem[]
  answers         QuoteAnswer[]
  scores          CommitteeScoreSet[]

  @@index([requisitionId])
  @@index([vendorId])
}

enum QuotationStatus {
  Submitted
  Awarded
  Partially_Awarded
  Rejected
  Standby
  Invoice_Submitted
  Failed
  Accepted
  Declined
}

model QuoteItem {
    id                  String   @id @default(uuid())
    quotationId         String
    requisitionItemId   String
    name                String
    quantity            Int
    unitPrice           Float
    leadTimeDays        Int
    brandDetails        String?

    quotation           Quotation           @relation(fields: [quotationId], references: [id], onDelete: Cascade)
    requisitionItem     RequisitionItem     @relation(fields: [requisitionItemId], references: [id])
    scores              ItemScore[]
    @@index([quotationId])
    @@index([requisitionItemId])
}

model QuoteAnswer {
    id          String   @id @default(uuid())
    quotationId String
    questionId  String
    answer      String

    quotation   Quotation      @relation(fields: [quotationId], references: [id], onDelete: Cascade)
    question    CustomQuestion @relation(fields: [questionId], references: [id])
    @@index([quotationId])
}

model CommitteeScoreSet {
    id              String      @id @default(uuid())
    quotationId     String
    scorerId        String
    scorerName      String
    committeeComment String?
    finalScore      Float
    submittedAt     DateTime    @default(now())

    quotation       Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
    scorer          User        @relation(fields: [scorerId], references: [id])
    itemScores      ItemScore[]

    @@index([quotationId])
    @@index([scorerId])
}

model ItemScore {
    id              String      @id @default(uuid())
    scoreSetId      String
    quoteItemId     String
    finalScore      Float

    scoreSet        CommitteeScoreSet   @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
    quoteItem       QuoteItem           @relation(fields: [quoteItemId], references: [id])
    financialScores FinancialScore[]
    technicalScores TechnicalScore[]

    @@unique([scoreSetId, quoteItemId])
    @@index([quoteItemId])
}

model FinancialScore {
    id          String   @id @default(uuid())
    itemScoreId String
    criterionId String
    score       Int
    comment     String?

    itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
    criterion   FinancialCriterion @relation(fields: [criterionId], references: [id])
    @@index([itemScoreId])
}

model TechnicalScore {
    id          String   @id @default(uuid())
    itemScoreId String
    criterionId String
    score       Int
    comment     String?

    itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
    criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id])
    @@index([itemScoreId])
}


model PurchaseOrder {
  id              String               @id @default(uuid())
  transactionId   String?
  requisitionId   String               @unique
  requisitionTitle String
  vendorId        String
  totalAmount     Float
  status          PurchaseOrderStatus  @default(Issued)
  createdAt       DateTime             @default(now())

  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor          Vendor              @relation(fields: [vendorId], references: [id])
  items           POItem[]
  receipts        GoodsReceiptNote[]
  invoices        Invoice[]

  @@index([vendorId])
}

enum PurchaseOrderStatus {
  Issued
  Acknowledged
  Shipped
  Partially_Delivered
  Delivered
  Cancelled
  Matched
  Mismatched
  On_Hold
}

model POItem {
    id                  String @id @default(uuid())
    purchaseOrderId     String
    requisitionItemId   String
    name                String
    quantity            Int
    unitPrice           Float
    totalPrice          Float
    receivedQuantity    Int    @default(0)

    purchaseOrder       PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
    requisitionItem     RequisitionItem @relation(fields: [requisitionItemId], references: [id])
    receiptItems        ReceiptItem[]
    @@index([purchaseOrderId])
    @@index([requisitionItemId])
}


model GoodsReceiptNote {
  id                String      @id @default(uuid())
  transactionId     String?
  purchaseOrderId   String
  receivedById      String
  receivedDate      DateTime    @default(now())
  
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedBy        User          @relation(fields: [receivedById], references: [id])
  items             ReceiptItem[]

  @@index([purchaseOrderId])
  @@index([receivedById])
}

model ReceiptItem {
    id                  String @id @default(uuid())
    goodsReceiptNoteId  String
    poItemId            String
    quantityReceived    Int
    condition           ReceiptItemCondition
    notes               String?

    goodsReceiptNote    GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
    poItem              POItem           @relation(fields: [poItemId], references: [id])

    @@index([goodsReceiptNoteId])
    @@index([poItemId])
}

enum ReceiptItemCondition {
    Good
    Damaged
    Incorrect
}

model Invoice {
  id                String       @id @default(uuid())
  transactionId     String?
  purchaseOrderId   String
  vendorId          String
  invoiceDate       DateTime
  totalAmount       Float
  status            InvoiceStatus @default(Pending)
  documentUrl       String?
  paymentDate       DateTime?
  paymentReference  String?

  po                PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  items             InvoiceItem[]

  @@index([purchaseOrderId])
  @@index([vendorId])
}

enum InvoiceStatus {
  Pending
  Approved_for_Payment
  Paid
  Disputed
}

model InvoiceItem {
  id          String  @id @default(uuid())
  invoiceId   String
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float

  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  @@index([invoiceId])
}

model Contract {
    id              String   @id @default(uuid())
    contractNumber  String   @unique @default(cuid())
    requisitionId   String
    vendorId        String
    startDate       DateTime
    endDate         DateTime
    filePath        String?
    status          String   @default("Draft") // Draft, Active, Expired
    createdAt       DateTime @default(now())

    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    vendor          Vendor              @relation(fields: [vendorId], references: [id])
    @@index([requisitionId])
    @@index([vendorId])
}

model AuditLog {
  id            String   @id @default(uuid())
  transactionId String?
  timestamp     DateTime @default(now())
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String

  user          User?    @relation(fields: [userId], references: [id])
  @@index([userId])
  @@index([entity, entityId])
  @@index([transactionId])
}

model Role {
    name String @id @unique
    description String?
}
