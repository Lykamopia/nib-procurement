// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String   @id @default(cuid())
  name            String
  email           String   @unique
  password        String
  role            String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  approvalLimit   Float?
  departmentId    String?
  vendorId        String?  @unique
  managerId       String?

  department     Department?     @relation(fields: [departmentId], references: [id])
  vendor         Vendor?         @relation(fields: [vendorId], references: [id])
  createdRequisitions PurchaseRequisition[] @relation("Requester")
  approvedRequisitions PurchaseRequisition[] @relation("Approver")
  currentApprovals PurchaseRequisition[] @relation("CurrentApprover")
  
  manager        User?           @relation("ManagerSubordinates", fields: [managerId], references: [id])
  subordinates   User[]          @relation("ManagerSubordinates")

  financialCommitteeOn PurchaseRequisition[] @relation("FinancialCommittee")
  technicalCommitteeOn PurchaseRequisition[] @relation("TechnicalCommittee")
  
  committeeAssignments CommitteeAssignment[]
  scoresSubmitted  CommitteeScoreSet[] @relation("Scorer")
  reviews          Review[]
  contractsSent    Contract[]      @relation("Sender")
  receipts         GoodsReceiptNote[]

  auditLogs      AuditLog[]
}

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  headId      String?  @unique
  head        User?    @relation(fields: [headId], references: [id])
  users       User[]
  requisitions PurchaseRequisition[]
}

model PurchaseRequisition {
  id                String   @id @default(cuid())
  transactionId     String?  @unique
  requesterId       String
  approverId        String?
  currentApproverId String?
  departmentId      String
  
  title             String
  justification     String
  urgency           String
  totalPrice        Float
  status            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  approverComment   String?

  purchaseOrderId    String? @unique

  allowedVendorIds    String[]
  awardedQuoteItemIds String[]
  
  deadline          DateTime?
  scoringDeadline   DateTime?
  awardResponseDeadline DateTime?
  awardResponseDurationMinutes Int?
  
  committeeName     String?
  committeePurpose  String?
  cpoAmount         Float?
  rfqSettings       Json?

  requester         User     @relation("Requester", fields: [requesterId], references: [id])
  department        Department @relation(fields: [departmentId], references: [id])
  approver          User?    @relation("Approver", fields: [approverId], references: [id])
  currentApprover   User?    @relation("CurrentApprover", fields: [currentApproverId], references: [id])

  items               RequisitionItem[]
  customQuestions     CustomQuestion[]
  evaluationCriteria  EvaluationCriteria?
  quotations          Quotation[]
  contracts           Contract[]
  purchaseOrders      PurchaseOrder[]
  reviews             Review[]

  financialCommitteeMembers User[] @relation("FinancialCommittee")
  technicalCommitteeMembers User[] @relation("TechnicalCommittee")
  
  committeeAssignments CommitteeAssignment[]
}

model CommitteeAssignment {
  userId        String
  requisitionId String
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  scoresSubmitted Boolean @default(false)
  
  @@id([userId, requisitionId])
}


model RequisitionItem {
  id            String   @id @default(cuid())
  requisitionId String
  name          String
  description   String?
  quantity      Int
  unitPrice     Float
  
  requisition PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  
  // Link to QuoteItem and POItem
  quoteItems QuoteItem[]
  poItems    POItem[]
}

model CustomQuestion {
  id              String       @id @default(cuid())
  requisitionId   String
  questionText    String
  questionType    String // "text", "boolean", "multiple_choice", "file"
  isRequired      Boolean
  options         String[]
  
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  answers         QuoteAnswer[]
}

model EvaluationCriteria {
  id                  String   @id @default(cuid())
  requisitionId       String   @unique
  financialWeight     Int
  technicalWeight     Int

  requisition         PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  financialCriteria   FinancialCriterion[]
  technicalCriteria   TechnicalCriterion[]
}

model FinancialCriterion {
  id                    String   @id @default(cuid())
  evaluationCriteriaId  String
  name                  String
  weight                Int
  criteria              EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
}

model TechnicalCriterion {
  id                    String   @id @default(cuid())
  evaluationCriteriaId  String
  name                  String
  weight                Int
  criteria              EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
}

model Vendor {
  id            String   @id @default(cuid())
  userId        String   @unique
  name          String   @unique
  contactPerson String
  email         String   @unique
  phone         String
  address       String
  kycStatus     String   // Pending, Verified, Rejected
  rejectionReason String?

  user          User     @relation(fields: [userId], references: [id])
  quotations    Quotation[]
  contracts     Contract[]
  purchaseOrders PurchaseOrder[]
  kycDocuments  KYC_Document[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendorId    String
  name        String
  url         String
  submittedAt DateTime

  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model Quotation {
  id                String       @id @default(cuid())
  transactionId     String?
  requisitionId     String
  vendorId          String
  vendorName        String
  totalPrice        Float
  deliveryDate      DateTime
  status            String
  createdAt         DateTime     @default(now())
  notes             String?
  rank              Int?
  finalAverageScore Float?
  cpoDocumentUrl    String?
  experienceDocumentUrl String?

  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  vendor            Vendor              @relation(fields: [vendorId], references: [id])
  items             QuoteItem[]
  answers           QuoteAnswer[]
  scores            CommitteeScoreSet[]
}

model QuoteItem {
  id                String    @id @default(cuid())
  quotationId       String
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?

  quotation         Quotation           @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  requisitionItem   RequisitionItem     @relation(fields: [requisitionItemId], references: [id])
  scores            ItemScore[]
}

model QuoteAnswer {
  id          String    @id @default(cuid())
  quotationId String
  questionId  String
  answer      String

  quotation   Quotation       @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  question    CustomQuestion  @relation(fields: [questionId], references: [id])
}

model CommitteeScoreSet {
    id              String @id @default(cuid())
    quotationId     String
    scorerId        String
    committeeComment String?
    finalScore      Float
    submittedAt     DateTime @default(now())

    quotation       Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
    scorer          User      @relation("Scorer", fields: [scorerId], references: [id])
    itemScores      ItemScore[]

    @@unique([quotationId, scorerId])
}

model ItemScore {
    id          String @id @default(cuid())
    scoreSetId  String
    quoteItemId String
    finalScore  Float

    scoreSet    CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
    quoteItem   QuoteItem         @relation(fields: [quoteItemId], references: [id])
    scores      Score[]
}

model Score {
    id          String @id @default(cuid())
    itemScoreId String
    criterionId String
    score       Float
    comment     String?
    type        String // FINANCIAL or TECHNICAL
    itemScore   ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
}

model Review {
    id              String @id @default(cuid())
    requisitionId   String
    reviewerId      String
    committeeType   String // 'A' or 'B'
    decision        String // 'Approved', 'Rejected'
    comments        String?
    createdAt       DateTime @default(now())

    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    reviewer        User @relation(fields: [reviewerId], references: [id])

    @@unique([requisitionId, reviewerId])
}


model Contract {
  id              String   @id @default(cuid())
  contractNumber  String   @unique @default(cuid())
  requisitionId   String
  vendorId        String
  senderId        String
  startDate       DateTime
  endDate         DateTime
  filePath        String?
  status          String   // e.g., Draft, Active, Expired
  createdAt       DateTime @default(now())
  
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor          Vendor              @relation(fields: [vendorId], references: [id])
  sender          User                @relation("Sender", fields: [senderId], references: [id])
}

model PurchaseOrder {
  id                String   @id @default(cuid())
  transactionId     String?
  requisitionId     String
  requisitionTitle  String
  vendorId          String
  totalAmount       Float
  status            String
  createdAt         DateTime @default(now())
  notes             String?

  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor            Vendor              @relation(fields: [vendorId], references: [id])
  items             POItem[]
  receipts          GoodsReceiptNote[]
  invoices          Invoice[]
}

model POItem {
  id                String    @id @default(cuid())
  poId              String
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int       @default(0)
  
  purchaseOrder     PurchaseOrder   @relation(fields: [poId], references: [id], onDelete: Cascade)
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  receiptItems      ReceiptItem[]
}

model GoodsReceiptNote {
    id              String   @id @default(cuid())
    transactionId   String?
    purchaseOrderId String
    receivedById    String
    receivedDate    DateTime @default(now())

    purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
    receivedBy      User          @relation(fields: [receivedById], references: [id])
    items           ReceiptItem[]
}

model ReceiptItem {
    id                  String   @id @default(cuid())
    goodsReceiptNoteId  String
    poItemId            String
    quantityReceived    Int
    condition           String
    notes               String?

    goodsReceiptNote    GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
    poItem              POItem           @relation(fields: [poItemId], references: [id])
}

model Invoice {
    id                  String      @id @default(cuid())
    transactionId       String?
    purchaseOrderId     String
    vendorId            String
    invoiceDate         DateTime
    totalAmount         Float
    status              String
    documentUrl         String?
    paymentDate         DateTime?
    paymentReference    String?
    
    po                  PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
    items               InvoiceItem[]
}

model InvoiceItem {
    id          String  @id @default(cuid())
    invoiceId   String
    name        String
    quantity    Int
    unitPrice   Float
    totalPrice  Float

    invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}


model AuditLog {
  id            String   @id @default(cuid())
  transactionId String?
  timestamp     DateTime @default(now())
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String

  user          User?    @relation(fields: [userId], references: [id])
}

model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value Json
}

model ApprovalThreshold {
  id    String @id @default(cuid())
  name  String
  min   Float
  max   Float?
  steps ApprovalStep[]
}

model ApprovalStep {
  id              String @id @default(cuid())
  thresholdId     String
  role            String
  order           Int

  threshold       ApprovalThreshold @relation(fields: [thresholdId], references: [id], onDelete: Cascade)

  @@orderBy([order])
}
