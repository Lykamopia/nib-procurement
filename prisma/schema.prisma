
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  password        String
  role            UserRole
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Self-referencing relation for hierarchy
  managerId       String?
  manager         User?     @relation("ManagerSubordinates", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates    User[]    @relation("ManagerSubordinates")

  approvalLimit   Float?    @default(0)

  departmentId    String?
  department      Department? @relation(fields: [departmentId], references: [id])
  
  vendorId        String?      @unique
  vendor          Vendor?

  requisitions    PurchaseRequisition[] @relation("Requester")
  approvedReqs    PurchaseRequisition[] @relation("Approver")
  currentApprovals PurchaseRequisition[] @relation("CurrentApprover")
  
  receipts        GoodsReceiptNote[]

  auditLogs       AuditLog[]

  // Committee & Reviewer Relations
  financialCommitteeFor ReqsForFinancialCommittee[]
  technicalCommitteeFor ReqsForTechnicalCommittee[]
  committeeAssignments  CommitteeAssignment[]
  reviews               Review[]
  approvals             Approval[]
  committeeRecommendations CommitteeRecommendation[]

  @@index([departmentId])
  @@index([managerId])
}

model Department {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  
  headId      String?  @unique
  head        User?    @relation(fields: [headId], references: [id], onDelete: SetNull)

  users       User[]
  requisitions PurchaseRequisition[]
}

model Vendor {
  id            String    @id @default(cuid())
  name          String
  contactPerson String
  email         String    @unique
  phone         String
  address       String
  
  userId        String     @unique
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  kycStatus     KycStatus  @default(Pending)
  rejectionReason String?
  kycDocuments  KYC_Document[]

  quotations    Quotation[]
  purchaseOrders PurchaseOrder[]
  contracts     Contract[]

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model KYC_Document {
    id          String @id @default(cuid())
    vendorId    String
    vendor      Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
    name        String
    url         String
    submittedAt DateTime @default(now())
    
    @@index([vendorId])
}

model PurchaseRequisition {
  id                  String   @id @default(cuid())
  transactionId       String?  @unique
  
  requesterId         String
  requester           User     @relation("Requester", fields: [requesterId], references: [id])
  requesterName       String // Denormalized for convenience

  approverId          String?
  approver            User?    @relation("Approver", fields: [approverId], references: [id])
  approverComment     String?

  title               String
  justification       String
  departmentId        String?
  department          Department? @relation(fields: [departmentId], references: [id])
  
  urgency             Urgency @default(Low)
  status              RequisitionStatus @default(Draft)
  totalPrice          Float
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  deadline            DateTime? // Deadline for vendors to submit quotes
  scoringDeadline     DateTime? // Deadline for committee to submit scores
  awardResponseDeadline DateTime? // Deadline for vendor to accept/reject award
  awardResponseDurationMinutes Int?

  // --- NEW WORKFLOW FIELDS ---
  totalAwardValue     Float?   @description("The value of the provisionally awarded quote, used for routing.")
  currentReviewerCommittee String? @description("e.g., 'Committee A' or 'Committee B'")
  currentApproverId   String?
  currentApprover     User?    @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  
  reviews             Review[]
  approvals           Approval[]
  // --- END NEW WORKFLOW FIELDS ---

  items               RequisitionItem[]
  customQuestions     CustomQuestion[]
  evaluationCriteria  EvaluationCriteria?
  quotations          Quotation[]

  financialCommitteeMembers ReqsForFinancialCommittee[]
  technicalCommitteeMembers ReqsForTechnicalCommittee[]
  
  committeeAssignments CommitteeAssignment[]
  committeeName       String?
  committeePurpose    String?
  
  committeeRecommendations CommitteeRecommendation[]

  purchaseOrderId     String?        @unique
  purchaseOrder       PurchaseOrder?

  // Configuration settings for this specific RFQ
  cpoAmount           Float?
  rfqSettings         Json?
  
  allowedVendorIds    String[] @default([])
  awardedQuoteItemIds String[] @default([])

  contracts           Contract[]

  @@index([requesterId])
  @@index([departmentId])
  @@index([approverId])
  @@index([currentApproverId])
  @@index([status])
}

// Explicit many-to-many relation table for financial committee
model ReqsForFinancialCommittee {
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId String
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  @@id([requisitionId, userId])
}

// Explicit many-to-many relation table for technical committee
model ReqsForTechnicalCommittee {
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId String
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  @@id([requisitionId, userId])
}

model RequisitionItem {
  id            String   @id @default(cuid())
  name          String
  quantity      Int
  unitPrice     Float?
  description   String?
  
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  
  quoteItems    QuoteItem[]
  poItems       POItem[]

  @@index([requisitionId])
}

model CustomQuestion {
    id                  String   @id @default(cuid())
    questionText        String
    questionType        QuestionType
    isRequired          Boolean  @default(true)
    options             String[]
    
    requisitionId       String
    requisition         PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)

    answers             QuoteAnswer[]

    @@index([requisitionId])
}

model EvaluationCriteria {
    id              String @id @default(cuid())
    requisitionId   String @unique
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)

    financialWeight Float
    technicalWeight Float

    financialCriteria   FinancialCriterion[]
    technicalCriteria   TechnicalCriterion[]
}

model FinancialCriterion {
    id          String @id @default(cuid())
    name        String
    weight      Float
    
    evaluationCriteriaId String
    evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)

    scores      FinancialScore[]
}

model TechnicalCriterion {
    id          String @id @default(cuid())
    name        String
    weight      Float
    
    evaluationCriteriaId String
    evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)

    scores      TechnicalScore[]
}

model Quotation {
    id                  String @id @default(cuid())
    transactionId       String?
    
    requisitionId       String
    requisition         PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    
    vendorId            String
    vendor              Vendor @relation(fields: [vendorId], references: [id])
    vendorName          String // Denormalized for convenience
    
    totalPrice          Float
    deliveryDate        DateTime
    notes               String?
    rank                Int?
    finalAverageScore   Float?

    cpoDocumentUrl      String?
    experienceDocumentUrl String?
    
    status              QuotationStatus
    createdAt           DateTime @default(now())
    
    items               QuoteItem[]
    answers             QuoteAnswer[]
    scores              CommitteeScoreSet[]

    @@index([requisitionId])
    @@index([vendorId])
    @@index([status])
}

model QuoteItem {
    id                  String @id @default(cuid())
    
    requisitionItemId   String
    requisitionItem     RequisitionItem @relation(fields: [requisitionItemId], references: [id], onDelete: Cascade)
    
    quotationId         String
    quotation           Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
    
    name                String
    quantity            Int
    unitPrice           Float
    leadTimeDays        Int
    brandDetails        String?

    itemScores          ItemScore[]

    @@index([requisitionItemId])
    @@index([quotationId])
}

model QuoteAnswer {
    id                  String @id @default(cuid())
    
    quotationId         String
    quotation           Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)

    questionId          String
    question            CustomQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
    
    answer              String
    
    @@index([quotationId])
    @@index([questionId])
}

model CommitteeAssignment {
    userId          String
    user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    requisitionId   String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    
    scoresSubmitted Boolean @default(false)

    @@id([userId, requisitionId])
}

model CommitteeScoreSet {
    id              String @id @default(cuid())
    
    quotationId     String
    quotation       Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
    
    scorerId        String
    scorer          User @relation(fields: [scorerId], references: [id], onDelete: Cascade)
    scorerName      String // Denormalized for convenience
    
    committeeComment String?
    finalScore      Float // The scorer's final score for this whole quote
    submittedAt     DateTime @default(now())
    
    itemScores      ItemScore[]

    @@index([quotationId])
    @@index([scorerId])
}

model ItemScore {
    id              String @id @default(cuid())
    scoreSetId      String
    scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)

    quoteItemId     String
    quoteItem       QuoteItem @relation(fields: [quoteItemId], references: [id], onDelete: Cascade)

    finalScore      Float // Calculated score for just this item

    financialScores FinancialScore[]
    technicalScores TechnicalScore[]
    
    @@index([scoreSetId])
    @@index([quoteItemId])
}


model FinancialScore {
    id                  String @id @default(cuid())
    itemScoreId         String
    itemScore           ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)

    criterionId         String
    criterion           FinancialCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)

    score               Float
    comment             String?
    
    @@index([itemScoreId])
    @@index([criterionId])
}

model TechnicalScore {
    id                  String @id @default(cuid())
    itemScoreId         String
    itemScore           ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)

    criterionId         String
    criterion           TechnicalCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)

    score               Float
    comment             String?
    
    @@index([itemScoreId])
    @@index([criterionId])
}

model PurchaseOrder {
    id                  String @id @default(cuid())
    transactionId       String?
    
    requisitionId       String
    requisition         PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    requisitionTitle    String // Denormalized

    vendorId            String
    vendor              Vendor @relation(fields: [vendorId], references: [id])

    items               POItem[]
    totalAmount         Float
    status              PurchaseOrderStatus
    notes               String?
    
    createdAt           DateTime @default(now())

    receipts            GoodsReceiptNote[]
    invoices            Invoice[]

    @@index([requisitionId])
    @@index([vendorId])
}

model POItem {
    id                  String @id @default(cuid())
    
    purchaseOrderId     String
    purchaseOrder       PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
    
    requisitionItemId   String
    requisitionItem     RequisitionItem @relation(fields: [requisitionItemId], references: [id])
    
    name                String
    quantity            Int
    unitPrice           Float
    totalPrice          Float
    receivedQuantity    Int @default(0)

    receiptItems        ReceiptItem[]

    @@index([purchaseOrderId])
    @@index([requisitionItemId])
}

model GoodsReceiptNote {
    id                  String @id @default(cuid())
    transactionId       String?
    
    purchaseOrderId     String
    purchaseOrder       PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])

    receivedById        String
    receivedBy          User @relation(fields: [receivedById], references: [id])
    
    receivedDate        DateTime @default(now())
    items               ReceiptItem[]

    @@index([purchaseOrderId])
    @@index([receivedById])
}

model ReceiptItem {
    id                      String @id @default(cuid())
    goodsReceiptNoteId      String
    goodsReceiptNote        GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)

    poItemId                String
    poItem                  POItem @relation(fields: [poItemId], references: [id])
    
    quantityReceived        Int
    condition               ReceiptCondition
    notes                   String?
    
    @@index([goodsReceiptNoteId])
    @@index([poItemId])
}

model Invoice {
    id                  String @id @default(cuid())
    transactionId       String?
    
    purchaseOrderId     String
    po                  PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])

    vendorId            String
    
    invoiceDate         DateTime
    items               InvoiceItem[]
    totalAmount         Float
    status              InvoiceStatus
    documentUrl         String?
    
    paymentDate         DateTime?
    paymentReference    String?

    @@index([purchaseOrderId])
}

model InvoiceItem {
    id                  String @id @default(cuid())
    invoiceId           String
    invoice             Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    
    name                String
    quantity            Int
    unitPrice           Float
    totalPrice          Float
    
    @@index([invoiceId])
}

model Contract {
    id              String   @id @default(cuid())
    contractNumber  String   @unique @default(cuid())
    
    requisitionId   String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])

    vendorId        String
    vendor          Vendor @relation(fields: [vendorId], references: [id])

    startDate       DateTime
    endDate         DateTime
    filePath        String?
    status          ContractStatus
    
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@index([requisitionId])
    @@index([vendorId])
}

model AuditLog {
  id            String   @id @default(cuid())
  transactionId String?
  timestamp     DateTime @default(now())
  
  userId        String?
  user          User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  action        String
  entity        String
  entityId      String
  details       String

  @@index([transactionId])
  @@index([userId])
  @@index([entity, entityId])
}


// --- NEW MODELS FOR HIERARCHICAL WORKFLOW ---

model Review {
  id            String   @id @default(cuid())
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  
  reviewerId    String
  reviewer      User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  
  committee     String   // e.g., "HO Committee A" or "HO Committee B"
  decision      ReviewDecision
  comment       String?
  createdAt     DateTime @default(now())

  @@index([requisitionId])
  @@index([reviewerId])
}

model Approval {
  id            String   @id @default(cuid())
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  
  approverId    String
  approver      User     @relation(fields: [approverId], references: [id], onDelete: Cascade)
  
  decision      ApprovalDecision
  comment       String?
  createdAt     DateTime @default(now())

  @@index([requisitionId])
  @@index([approverId])
}

model CommitteeRecommendation {
    id              String @id @default(cuid())
    requisitionId   String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    userId          String
    user            User @relation(fields: [userId], references: [id])
    committeeRole   UserRole
    recommendation  String // "Recommend for Approval" or "Request Changes"
    comment         String?
    createdAt       DateTime @default(now())

    @@index([requisitionId])
    @@index([userId])
}

// ENUMS

enum UserRole {
  Admin
  Approver
  Requester
  Procurement_Officer
  Finance
  Receiving
  Vendor
  Committee_Member
  Committee_A_Member
  Committee_B_Member
  Committee
}

enum Urgency {
    Low
    Medium
    High
    Critical
}

enum RequisitionStatus {
  Draft
  Pending_Approval
  Approved
  Rejected
  RFQ_In_Progress
  PO_Created
  Fulfilled
  Closed
  Pending_Managerial_Approval
  Pending_Committee_A_Review
  Pending_Committee_B_Review
  Pending_Final_Approval
}

enum KycStatus {
  Pending
  Verified
  Rejected
}

enum QuestionType {
    text
    boolean
    multiple_choice
    file
}

enum QuotationStatus {
    Submitted
    Awarded
    Partially_Awarded
    Rejected
    Standby
    Invoice_Submitted
    Failed
    Accepted
    Declined
}

enum PurchaseOrderStatus {
    Issued
    Acknowledged
    Shipped
    Partially_Delivered
    Delivered
    Cancelled
    Matched
    Mismatched
    On_Hold
}

enum ReceiptCondition {
    Good
    Damaged
    Incorrect
}

enum InvoiceStatus {
    Pending
    Approved_for_Payment
    Paid
    Disputed
}

enum ContractStatus {
    Draft
    Active
    Expired
}

enum ReviewDecision {
  Recommended
  ChangesRequested
}

enum ApprovalDecision {
  Approved
  Rejected
  Escalated
}
