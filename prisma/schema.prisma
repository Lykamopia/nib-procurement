
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id @default(cuid())
  name                    String
  email                   String                  @unique
  password                String
  role                    UserRole
  approvalLimit           Int?
  managerId               String?
  manager                 User?                   @relation("ManagerSubordinate", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates            User[]                  @relation("ManagerSubordinate")

  vendorId                String?                 @unique
  vendor                  Vendor?
  departmentId            String?
  department              Department?             @relation(fields: [departmentId], references: [id])

  createdRequisitions     PurchaseRequisition[]   @relation("Requester")
  approvedRequisitions    PurchaseRequisition[]   @relation("Approver")
  auditLogs               AuditLog[]
  receipts                GoodsReceiptNote[]
  committeeAssignments    CommitteeAssignment[]
  financialCommitteeFor   PurchaseRequisition[]   @relation("FinancialCommittee")
  technicalCommitteeFor   PurchaseRequisition[]   @relation("TechnicalCommittee")
  scores                  CommitteeScoreSet[]

  @@index([managerId])
}

enum UserRole {
  Admin
  Procurement_Officer
  Committee_Member
  Requester
  Approver
  Finance
  Receiving
  Vendor
  Committee
}

model Department {
  id              String   @id @default(cuid())
  name            String   @unique
  users           User[]
  requisitions    PurchaseRequisition[]
}

model PurchaseRequisition {
  id                           String             @id @default(cuid())
  transactionId                String?
  requesterId                  String
  requester                    User               @relation("Requester", fields: [requesterId], references: [id])
  requesterName                String?
  title                        String
  departmentId                 String?
  department                   Department?        @relation(fields: [departmentId], references: [id])
  items                        RequisitionItem[]
  totalPrice                   Float
  justification                String
  status                       String             @default("Draft")
  createdAt                    DateTime           @default(now())
  updatedAt                    DateTime           @updatedAt
  approverId                   String?
  approver                     User?              @relation("Approver", fields: [approverId], references: [id])
  currentApproverId            String?            // Used for escalation
  approverComment              String?
  quotations                   Quotation[]
  purchaseOrderId              String?            @unique
  purchaseOrder                PurchaseOrder?
  allowedVendorIds             String[]
  customQuestions              CustomQuestion[]
  deadline                     DateTime?
  scoringDeadline              DateTime?
  awardResponseDeadline        DateTime?
  awardResponseDurationMinutes Int?
  evaluationCriteria           EvaluationCriteria?
  financialCommitteeMembers    User[]             @relation("FinancialCommittee")
  technicalCommitteeMembers    User[]             @relation("TechnicalCommittee")
  committeeName                String?
  committeePurpose             String?
  committeeAssignments         CommitteeAssignment[]
  cpoAmount                    Float?
  rfqSettings                  Json?
  awardedQuoteItemIds          String[]           @default([])


  @@index([requesterId])
  @@index([approverId])
}

model RequisitionItem {
  id              String             @id @default(cuid())
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  name            String
  quantity        Int
  unitPrice       Float
  description     String
  purchaseOrders  POItem[]

  @@index([requisitionId])
}

model Vendor {
  id              String         @id @default(cuid())
  name            String
  contactPerson   String
  email           String         @unique
  phone           String
  address         String
  kycStatus       KycStatus      @default(Pending)
  rejectionReason String?
  kycDocuments    KYC_Document[]
  userId          String         @unique
  user            User           @relation(fields: [userId], references: [id])
  quotations      Quotation[]
  purchaseOrders  PurchaseOrder[]
  contracts       Contract[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  name        String
  url         String
  submittedAt DateTime

  @@index([vendorId])
}

enum KycStatus {
  Pending
  Verified
  Rejected
}

model CustomQuestion {
  id              String             @id @default(cuid())
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  questionText    String
  questionType    String // 'text', 'boolean', 'multiple-choice', 'file'
  isRequired      Boolean            @default(true)
  options         String[]
  requisitionItemId String? // Optional link to a specific item
  answers         QuoteAnswer[]

  @@index([requisitionId])
}

model Quotation {
  id                    String              @id @default(cuid())
  transactionId         String?
  requisitionId         String
  requisition           PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  vendorId              String
  vendor                Vendor              @relation(fields: [vendorId], references: [id])
  vendorName            String
  items                 QuoteItem[]
  totalPrice            Float
  deliveryDate          DateTime
  createdAt             DateTime            @default(now())
  status                String              @default("Submitted") // Submitted, Awarded, Rejected, Standby
  notes                 String?
  rank                  Int?
  answers               QuoteAnswer[]
  scores                CommitteeScoreSet[]
  finalAverageScore     Float?
  cpoDocumentUrl        String?
  experienceDocumentUrl String?

  @@index([requisitionId])
  @@index([vendorId])
}

model QuoteItem {
  id                String    @id @default(cuid())
  quotationId       String
  quotation         Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  scores            ItemScore[]

  @@index([quotationId])
}

model QuoteAnswer {
  id          String          @id @default(cuid())
  quotationId String
  quotation   Quotation       @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  questionId  String
  question    CustomQuestion  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer      String

  @@index([quotationId])
  @@index([questionId])
}

model EvaluationCriteria {
  id                  String                 @id @default(cuid())
  requisitionId       String                 @unique
  requisition         PurchaseRequisition    @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  financialWeight     Int
  technicalWeight     Int
  financialCriteria   FinancialCriterion[]
  technicalCriteria   TechnicalCriterion[]
}

model FinancialCriterion {
  id                    String              @id @default(cuid())
  evaluationCriteriaId  String
  evaluationCriteria    EvaluationCriteria  @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                  String
  weight                Int
  scores                FinancialScore[]
}

model TechnicalCriterion {
  id                    String              @id @default(cuid())
  evaluationCriteriaId  String
  evaluationCriteria    EvaluationCriteria  @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                  String
  weight                Int
  scores                TechnicalScore[]
}

model CommitteeAssignment {
  userId          String
  user            User                @relation(fields: [userId], references: [id])
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  scoresSubmitted Boolean             @default(false)

  @@id([userId, requisitionId])
}

model CommitteeScoreSet {
  id               String      @id @default(cuid())
  quotationId      String
  quotation        Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  scorerId         String
  scorer           User        @relation(fields: [scorerId], references: [id])
  scorerName       String
  itemScores       ItemScore[]
  committeeComment String?
  finalScore       Float
  submittedAt      DateTime    @default(now())

  @@index([quotationId])
  @@index([scorerId])
}

model ItemScore {
  id              String            @id @default(cuid())
  scoreSetId      String
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  quoteItemId     String
  quoteItem       QuoteItem         @relation(fields: [quoteItemId], references: [id], onDelete Cascade)
  finalScore      Float
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]

  @@index([scoreSetId])
  @@index([quoteItemId])
}


model FinancialScore {
  id          String   @id @default(cuid())
  itemScoreId String
  itemScore   ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  criterionId String
  criterion   FinancialCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  score       Float
  comment     String?

  @@index([itemScoreId])
  @@index([criterionId])
}

model TechnicalScore {
  id          String   @id @default(cuid())
  itemScoreId String
  itemScore   ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  criterionId String
  criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  score       Float
  comment     String?

  @@index([itemScoreId])
  @@index([criterionId])
}


model PurchaseOrder {
  id               String             @id @default(cuid())
  transactionId    String?
  requisitionId    String
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionTitle String
  vendorId         String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  items            POItem[]
  totalAmount      Float
  status           String             @default("Issued")
  createdAt        DateTime           @default(now())
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
  notes            String?

  @@index([requisitionId])
  @@index([vendorId])
}

model POItem {
  id                String            @id @default(cuid())
  purchaseOrderId   String
  purchaseOrder     PurchaseOrder     @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  requisitionItemId String
  requisitionItem   RequisitionItem   @relation(fields: [requisitionItemId], references: [id])
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int               @default(0)
  receiptItems      ReceiptItem[]

  @@index([purchaseOrderId])
  @@index([requisitionItemId])
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedById    String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]

  @@index([purchaseOrderId])
  @@index([receivedById])
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNoteId String
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  poItemId           String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  quantityReceived   Int
  condition          String
  notes              String?

  @@index([goodsReceiptNoteId])
  @@index([poItemId])
}

model Invoice {
  id               String        @id @default(cuid())
  transactionId    String?
  purchaseOrderId  String
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  vendorId         String
  invoiceDate      DateTime
  items            InvoiceItem[]
  totalAmount      Float
  status           String        @default("Pending")
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?

  @@index([purchaseOrderId])
}

model InvoiceItem {
  id         String  @id @default(cuid())
  invoiceId  String
  invoice    Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  name       String
  quantity   Int
  unitPrice  Float
  totalPrice Float

  @@index([invoiceId])
}

model Contract {
  id             String    @id @default(cuid())
  contractNumber String    @default(cuid())
  requisitionId  String
  requisition    PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendorId       String
  vendor         Vendor    @relation(fields: [vendorId], references: [id])
  startDate      DateTime
  endDate        DateTime
  filePath       String?
  status         String
  createdAt      DateTime  @default(now())

  @@index([requisitionId])
  @@index([vendorId])
}


model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime  @default(now())
  userId        String?
  user          User?     @relation(fields: [userId], references: [id])
  action        String
  entity        String
  entityId      String
  details       String

  @@index([userId])
}
