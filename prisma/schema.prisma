
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                        String                @id @default(cuid())
  name                      String
  email                     String                @unique
  password                  String
  role                      String // Consider using an enum for roles
  departmentId              String?
  vendorId                  String?               @unique
  approvalLimit             Float?
  managerId                 String?
  manager                   User?                 @relation("ManagerialHierarchy", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reports                   User[]                @relation("ManagerialHierarchy")
  department                Department?           @relation("DepartmentUsers", fields: [departmentId], references: [id])
  headedDepartment          Department?           @relation("DepartmentHead")
  vendor                    Vendor?
  createdRequisitions       PurchaseRequisition[] @relation("Requester")
  approvedRequisitions      PurchaseRequisition[] @relation("Approver")
  currentApprovals        PurchaseRequisition[] @relation("CurrentApprover")
  sentContracts           Contract[]
  receivedGoods           GoodsReceiptNote[]
  auditLogs                 AuditLog[]
  reviews                   Review[]
  committeeAssignments      CommitteeAssignment[]
  financialCommitteeOn      PurchaseRequisition[] @relation("FinancialCommittee")
  technicalCommitteeOn      PurchaseRequisition[] @relation("TechnicalCommittee")
  scores                    CommitteeScoreSet[]
}


model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  headId      String?  @unique
  head        User?    @relation("DepartmentHead", fields: [headId], references: [id])
  users       User[]   @relation("DepartmentUsers")
  requisitions PurchaseRequisition[]
}

model Role {
  id           String @id @default(cuid())
  name         String @unique
  description  String?
}


model PurchaseRequisition {
  id                           String                @id @default(cuid())
  transactionId                String?
  title                        String
  justification                String
  status                       String
  urgency                      String
  totalPrice                   Float
  createdAt                    DateTime              @default(now())
  updatedAt                    DateTime              @updatedAt
  requesterId                  String
  requester                    User                  @relation("Requester", fields: [requesterId], references: [id])
  departmentId                 String
  department                   Department            @relation(fields: [departmentId], references: [id])
  approverId                   String?
  approver                     User?                 @relation("Approver", fields: [approverId], references: [id])
  approverComment              String?
  currentApproverId            String?
  currentApprover              User?                 @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  purchaseOrderId              String?
  allowedVendorIds             String[]
  awardedQuoteItemIds          String[]
  deadline                     DateTime?
  scoringDeadline              DateTime?
  awardResponseDeadline        DateTime?
  awardResponseDurationMinutes Int?
  committeeName                String?
  committeePurpose             String?
  cpoAmount                    Float?
  rfqSettings                  Json?
  items                        RequisitionItem[]
  customQuestions              CustomQuestion[]
  evaluationCriteria           EvaluationCriteria?
  quotations                   Quotation[]
  contracts                    Contract[]
  purchaseOrders               PurchaseOrder[]
  reviews                      Review[]
  financialCommitteeMembers    User[]                @relation("FinancialCommittee")
  technicalCommitteeMembers    User[]                @relation("TechnicalCommittee")
  committeeAssignments         CommitteeAssignment[]
}

model RequisitionItem {
  id            String             @id @default(cuid())
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  name          String
  quantity      Int
  unitPrice     Float
  description   String?
  quoteItems    QuoteItem[]
  poItems       POItem[]
}

model EvaluationCriteria {
  id                String                 @id @default(cuid())
  requisitionId     String                 @unique
  requisition       PurchaseRequisition    @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  financialWeight   Float
  technicalWeight   Float
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                 String
  weight               Float
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                 String
  weight               Float
}

model CustomQuestion {
  id            String             @id @default(cuid())
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  questionText  String
  questionType  String
  isRequired    Boolean            @default(false)
  options       String[]
  requisitionItemId String? // Optional link to a specific item
  answers       QuoteAnswer[]
}

model Vendor {
  id            String      @id @default(cuid())
  name          String
  contactPerson String
  email         String      @unique
  phone         String
  address       String
  kycStatus     String
  rejectionReason String?
  userId        String      @unique
  user          User        @relation(fields: [userId], references: [id])
  quotations    Quotation[]
  kycDocuments  KYC_Document[]
  purchaseOrders PurchaseOrder[]
  contracts     Contract[]
}

model KYC_Document {
    id          String   @id @default(cuid())
    vendorId    String
    vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
    name        String
    url         String
    submittedAt DateTime
}


model Quotation {
  id                    String              @id @default(cuid())
  transactionId         String?
  requisitionId         String
  requisition           PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendorId              String
  vendor                Vendor              @relation(fields: [vendorId], references: [id])
  vendorName            String
  totalPrice            Float
  deliveryDate          DateTime
  createdAt             DateTime            @default(now())
  status                String
  notes                 String?
  cpoDocumentUrl        String?
  experienceDocumentUrl String?
  rank                  Int?
  items                 QuoteItem[]
  answers               QuoteAnswer[]
  scores                CommitteeScoreSet[]
  finalAverageScore     Float?
}

model QuoteItem {
  id                String       @id @default(cuid())
  quotationId       String
  quotation         Quotation    @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  requisitionItemId String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  scores            ItemScore[]
}

model QuoteAnswer {
  id          String    @id @default(cuid())
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  questionId  String
  question    CustomQuestion @relation(fields: [questionId], references: [id])
  answer      String
}

model CommitteeScoreSet {
  id               String      @id @default(cuid())
  quotationId      String
  quotation        Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  scorerId         String
  scorer           User        @relation(fields: [scorerId], references: [id])
  finalScore       Float
  committeeComment String?
  submittedAt      DateTime    @default(now())
  itemScores       ItemScore[]

  @@unique([quotationId, scorerId])
}

model ItemScore {
  id          String            @id @default(cuid())
  scoreSetId  String
  scoreSet    CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  quoteItemId String
  quoteItem   QuoteItem         @relation(fields: [quoteItemId], references: [id])
  finalScore  Float
  scores      Score[]
}

model Score {
  id          String    @id @default(cuid())
  itemScoreId String
  itemScore   ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  criterionId String
  score       Float
  comment     String?
  type        String // FINANCIAL or TECHNICAL
}

model CommitteeAssignment {
  userId          String
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  scoresSubmitted Boolean             @default(false)

  @@id([userId, requisitionId])
}


model PurchaseOrder {
  id              String      @id @default(cuid())
  transactionId   String?
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionTitle String
  vendorId        String
  vendor          Vendor      @relation(fields: [vendorId], references: [id])
  totalAmount     Float
  status          String
  createdAt       DateTime    @default(now())
  items           POItem[]
  receipts        GoodsReceiptNote[]
  invoices        Invoice[]
}

model POItem {
  id                 String          @id @default(cuid())
  purchaseOrderId    String
  purchaseOrder      PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  requisitionItemId  String
  requisitionItem    RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  name               String
  quantity           Int
  unitPrice          Float
  totalPrice         Float
  receivedQuantity   Int             @default(0)
  receiptItems       ReceiptItem[]
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedById    String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNoteId String
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  poItemId           String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  quantityReceived   Int
  condition          String
  notes              String?
}

model Invoice {
  id               String        @id @default(cuid())
  transactionId    String?
  purchaseOrderId  String
  po               PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  vendorId         String
  invoiceDate      DateTime
  totalAmount      Float
  status           String
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  items            InvoiceItem[]
}

model InvoiceItem {
  id        String  @id @default(cuid())
  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  name      String
  quantity  Int
  unitPrice Float
  totalPrice Float
}

model Contract {
  id             String              @id @default(cuid())
  requisitionId  String
  requisition    PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendorId       String
  vendor         Vendor              @relation(fields: [vendorId], references: [id])
  senderId       String
  sender         User                @relation(fields: [senderId], references: [id])
  contractNumber String              @unique @default(cuid())
  startDate      DateTime
  endDate        DateTime
  filePath       String?
  status         String
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}

model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime  @default(now())
  userId        String?
  user          User?     @relation(fields: [userId], references: [id])
  action        String
  entity        String
  entityId      String
  details       String
}

model Review {
    id              String @id @default(cuid())
    requisitionId   String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    reviewerId      String
    reviewer        User @relation(fields: [reviewerId], references: [id])
    committeeType   String // 'Committee A' or 'Committee B'
    decision        String // 'Approved', 'Rejected'
    comment         String?
    createdAt       DateTime @default(now())
}
