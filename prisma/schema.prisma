
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id              String       @id @default(cuid())
  name            String
  email           String       @unique
  password        String
  role            String       @default("Requester")
  departmentId    String?
  department      Department?  @relation(fields: [departmentId], references: [id])
  vendorId        String?      @unique
  vendor          Vendor?      @relation(fields: [vendorId], references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  approvalLimit   Float?

  managerId       String?
  manager         User?        @relation("ManagerSubordinates", fields: [managerId], references: [id])
  subordinates    User[]       @relation("ManagerSubordinates")

  requisitions      PurchaseRequisition[] @relation("RequesterForRequisitions")
  approvals         Approval[]            @relation("ApproverForApprovals")

  goodsReceipts     GoodsReceiptNote[]    @relation("ReceiverForGoodsReceipts")
  auditLogs         AuditLog[]

  // For Committee Assignments
  committeeAssignments        CommitteeAssignment[]
  scoreSets                   CommitteeScoreSet[]
  committeeRecommendations    CommitteeRecommendation[]

  // Approver relationships for requisitions
  approverForRequisitions          PurchaseRequisition[] @relation("ApproverForRequisitions")
  currentApproverForRequisitions   PurchaseRequisition[] @relation("CurrentApproverForRequisitions")

  // Committee memberships for requisitions
  financialCommitteesForRequisitions PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommitteesForRequisitions PurchaseRequisition[] @relation("TechnicalCommitteeMembers")
}

model Department {
  id            String    @id @default(cuid())
  name          String    @unique
  description   String?
  users         User[]
  requisitions  PurchaseRequisition[]
  headId        String?   @unique
  head          User?     @relation(fields: [headId], references: [id])
}

model Role {
    id          String @id @default(cuid())
    name        String @unique
    description String?
}

model Vendor {
  id              String      @id @default(cuid())
  name            String
  contactPerson   String
  email           String      @unique
  phone           String
  address         String
  kycStatus       KycStatus   @default(Pending)
  rejectionReason String?
  userId          String      @unique
  user            User?
  kycDocuments    KYC_Document[]
  quotations      Quotation[]
  purchaseOrders  PurchaseOrder[]
  contracts       Contract[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId    String
  name        String
  url         String
  submittedAt DateTime @default(now())
}

model PurchaseRequisition {
  id                  String       @id @default(cuid())
  transactionId       String?      @unique
  title               String
  totalPrice          Float
  justification       String
  status              RequisitionStatus @default(Draft)
  urgency             Urgency      @default(Low)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  purchaseOrderId     String?      @unique
  deadline            DateTime?
  scoringDeadline     DateTime?
  awardResponseDeadline DateTime?
  awardResponseDurationMinutes Int?
  cpoAmount           Float?
  rfqSettings         Json?


  allowedVendorIds    String[]
  awardedQuoteItemIds String[]

  requester     User         @relation("RequesterForRequisitions", fields: [requesterId], references: [id])
  requesterId   String
  department    Department?  @relation(fields: [departmentId], references: [id])
  departmentId  String?

  approverId    String?
  approver      User?        @relation("ApproverForRequisitions", fields: [approverId], references: [id])
  currentApproverId String?
  currentApprover User?        @relation("CurrentApproverForRequisitions", fields: [currentApproverId], references: [id])

  purchaseOrder PurchaseOrder?

  items           RequisitionItem[]
  customQuestions CustomQuestion[]
  quotations      Quotation[]
  contracts       Contract[]

  evaluationCriteria EvaluationCriteria?

  committeeName           String?
  committeePurpose        String?
  committeeAssignments    CommitteeAssignment[]
  committeeRecommendations CommitteeRecommendation[]
  approvals                Approval[]

  financialCommitteeMembers User[] @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers User[] @relation("TechnicalCommitteeMembers")
}

model RequisitionItem {
  id            String    @id @default(cuid())
  name          String
  quantity      Int
  unitPrice     Float
  description   String?
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId String
  quoteItems    QuoteItem[]
  poItems       POItem[]
}

model CustomQuestion {
    id            String    @id @default(cuid())
    questionText  String
    questionType  QuestionType
    isRequired    Boolean   @default(true)
    options       String[]
    requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    requisitionId String
    answers       QuoteAnswer[]
}

model Quotation {
  id              String      @id @default(cuid())
  transactionId   String?
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId   String
  vendor          Vendor      @relation(fields: [vendorId], references: [id])
  vendorId        String
  vendorName      String
  totalPrice      Float
  deliveryDate    DateTime
  status          QuotationStatus @default(Submitted)
  notes           String?
  rank            Int?
  finalAverageScore Float?
  cpoDocumentUrl    String?
  experienceDocumentUrl String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  items           QuoteItem[]
  answers         QuoteAnswer[]
  scores          CommitteeScoreSet[]
}

model QuoteItem {
  id                String      @id @default(cuid())
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId String
  quotation         Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId       String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  itemScores        ItemScore[]

  @@unique([requisitionItemId, quotationId])
}

model QuoteAnswer {
  id            String      @id @default(cuid())
  question      CustomQuestion @relation(fields: [questionId], references: [id])
  questionId    String
  quotation     Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId   String
  answer        String
}

model EvaluationCriteria {
    id                  String @id @default(cuid())
    requisition         PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    requisitionId       String @unique
    financialWeight     Int
    technicalWeight     Int
    financialCriteria   FinancialCriterion[]
    technicalCriteria   TechnicalCriterion[]
}

model FinancialCriterion {
    id                  String @id @default(cuid())
    evaluationCriteria  EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
    evaluationCriteriaId String
    name                String
    weight              Int
    scores              FinancialScore[]
}

model TechnicalCriterion {
    id                  String @id @default(cuid())
    evaluationCriteria  EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
    evaluationCriteriaId String
    name                String
    weight              Int
    scores              TechnicalScore[]
}

model CommitteeAssignment {
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId   String
  scoresSubmitted Boolean @default(false)
  
  @@id([userId, requisitionId])
}

model CommitteeRecommendation {
    id              String      @id @default(cuid())
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    requisitionId   String
    committeeType   String // e.g., 'A' or 'B'
    decision        String // 'Recommended', 'Rejected'
    comments        String?
    recommender     User @relation(fields: [recommenderId], references: [id])
    recommenderId   String
    createdAt       DateTime @default(now())
}

model Approval {
    id              String @id @default(cuid())
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    requisitionId   String
    approver        User @relation("ApproverForApprovals", fields: [approverId], references: [id])
    approverId      String
    status          String // 'Approved', 'Rejected'
    comment         String?
    createdAt       DateTime @default(now())
}


// A set of scores from one committee member for one entire quotation
model CommitteeScoreSet {
  id                String      @id @default(cuid())
  quotation         Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId       String
  scorer            User        @relation(fields: [scorerId], references: [id], onDelete: Cascade)
  scorerId          String
  scorerName        String
  committeeComment  String?
  finalScore        Float
  itemScores        ItemScore[]
  submittedAt       DateTime    @default(now())

  @@unique([quotationId, scorerId])
}

model ItemScore {
  id              String      @id @default(cuid())
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  scoreSetId      String
  quoteItem       QuoteItem   @relation(fields: [quoteItemId], references: [id], onDelete: Cascade)
  quoteItemId     String
  finalScore      Float
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
}

model FinancialScore {
  id            String      @id @default(cuid())
  itemScore     ItemScore   @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId   String
  criterion     FinancialCriterion @relation(fields: [criterionId], references: [id])
  criterionId   String
  score         Int
  comment       String?

  @@unique([itemScoreId, criterionId])
}

model TechnicalScore {
  id            String      @id @default(cuid())
  itemScore     ItemScore   @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId   String
  criterion     TechnicalCriterion @relation(fields: [criterionId], references: [id])
  criterionId   String
  score         Int
  comment       String?

  @@unique([itemScoreId, criterionId])
}

model PurchaseOrder {
  id               String      @id @default(cuid())
  transactionId    String?
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId    String      @unique
  requisitionTitle String
  vendor           Vendor      @relation(fields: [vendorId], references: [id])
  vendorId         String
  totalAmount      Float
  status           PurchaseOrderStatus @default(Issued)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id                String      @id @default(cuid())
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  purchaseOrderId   String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int
  receiptItems      ReceiptItem[]

  @@unique([purchaseOrderId, requisitionItemId])
}

model GoodsReceiptNote {
  id              String      @id @default(cuid())
  transactionId   String?
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  receivedBy      User        @relation("ReceiverForGoodsReceipts", fields: [receivedById], references: [id])
  receivedById    String
  receivedDate    DateTime    @default(now())
  items           ReceiptItem[]
}

model ReceiptItem {
  id                  String      @id @default(cuid())
  goodsReceiptNote    GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  goodsReceiptNoteId  String
  poItem              POItem      @relation(fields: [poItemId], references: [id])
  poItemId            String
  quantityReceived    Int
  condition           ReceiptItemCondition
  notes               String?
}

model Invoice {
  id                String        @id @default(cuid())
  transactionId     String?
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId   String
  vendorId          String
  invoiceDate       DateTime
  totalAmount       Float
  status            InvoiceStatus @default(Pending)
  documentUrl       String?
  paymentDate       DateTime?
  paymentReference  String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  items             InvoiceItem[]
}

model InvoiceItem {
    id              String @id @default(cuid())
    invoice         Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    invoiceId       String
    name            String
    quantity        Int
    unitPrice       Float
    totalPrice      Float
}

model Contract {
  id              String   @id @default(cuid())
  contractNumber  String   @unique @default(cuid())
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId   String
  vendor          Vendor   @relation(fields: [vendorId], references: [id])
  vendorId        String
  startDate       DateTime
  endDate         DateTime
  filePath        String?
  status          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model AuditLog {
    id              String @id @default(cuid())
    transactionId   String?
    timestamp       DateTime @default(now())
    user            User?     @relation(fields: [userId], references: [id])
    userId          String?
    action          String
    entity          String
    entityId        String
    details         String
}


enum RequisitionStatus {
  Draft
  Pending_Approval
  Pending_Managerial_Approval
  Approved
  Rejected
  RFQ_In_Progress
  PO_Created
  Fulfilled
  Closed
}

enum KycStatus {
  Pending
  Verified
  Rejected
}

enum QuotationStatus {
  Submitted
  Awarded
  Partially_Awarded
  Rejected
  Standby
  Invoice_Submitted
  Failed
  Accepted
  Declined
}

enum PurchaseOrderStatus {
  Issued
  Acknowledged
  Shipped
  Partially_Delivered
  Delivered
  Cancelled
  Matched
  Mismatched
  On_Hold
}

enum ReceiptItemCondition {
    Good
    Damaged
    Incorrect
}

enum InvoiceStatus {
    Pending
    Approved_for_Payment
    Paid
    Disputed
}

enum QuestionType {
  text
  boolean
  multiple_choice
  file
}

enum Urgency {
  Low
  Medium
  High
  Critical
}
