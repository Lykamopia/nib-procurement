
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  users       User[]
}

model User {
  id                String          @id @default(cuid())
  name              String
  email             String          @unique
  password          String
  role              RoleName        @default(Requester)
  approvalLimit     Float?
  departmentId      String?
  department        Department?     @relation(fields: [departmentId], references: [id])
  managerId         String?
  manager           User?           @relation("ManagerSubordinates", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates      User[]          @relation("ManagerSubordinates")
  createdRequisitions PurchaseRequisition[] @relation("Requester")
  approvedRequisitions PurchaseRequisition[] @relation("Approver")
  currentApprovals  PurchaseRequisition[] @relation("CurrentApprover")
  vendorId          String?         @unique
  vendor            Vendor?         @relation(fields: [vendorId], references: [id])
  auditLogs         AuditLog[]
  receipts          GoodsReceiptNote[]
  committeeAssignments CommitteeAssignment[] @relation("CommitteeMember")
  financialCommitteeFor RequisitionFinancialCommittee[]
  technicalCommitteeFor RequisitionTechnicalCommittee[]
  recommendations   CommitteeRecommendation[]
}

model Department {
  id           String    @id @default(cuid())
  name         String    @unique
  description  String?
  headId       String?   @unique
  head         User?     @relation(fields: [headId], references: [id])
  requisitions PurchaseRequisition[]
  users        User[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  name        String
  url         String
  submittedAt DateTime @default(now())
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
}

model Vendor {
  id             String        @id @default(cuid())
  name           String
  contactPerson  String
  email          String
  phone          String
  address        String
  userId         String        @unique
  user           User          @relation(fields: [userId], references: [id])
  kycStatus      KycStatus     @default(Pending)
  kycDocuments   KYC_Document[]
  rejectionReason String?
  quotations     Quotation[]
  contracts      Contract[]
  purchaseOrders PurchaseOrder[]
  invoices       Invoice[]
}

model PurchaseRequisition {
  id                   String        @id @default(cuid())
  transactionId        String?       @unique
  requesterId          String
  requesterName        String
  departmentId         String
  title                String
  urgency              Urgency       @default(Low)
  justification        String
  status               RequisitionStatus @default(Draft)
  totalPrice           Float
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  approverId           String?
  approverComment      String?
  currentApproverId    String?
  purchaseOrderId      String?       @unique
  allowedVendorIds     String[]
  awardedQuoteItemIds  String[]
  deadline             DateTime?
  scoringDeadline      DateTime?
  awardResponseDeadline DateTime?
  awardResponseDurationMinutes Int?
  committeeName        String?
  committeePurpose     String?
  cpoAmount            Float?
  rfqSettings          Json?
  
  requester            User          @relation("Requester", fields: [requesterId], references: [id])
  department           Department    @relation(fields: [departmentId], references: [id])
  approver             User?         @relation("Approver", fields: [approverId], references: [id])
  currentApprover      User?         @relation("CurrentApprover", fields: [currentApproverId], references: [id])

  items                RequisitionItem[]
  customQuestions      CustomQuestion[]
  evaluationCriteria   EvaluationCriteria?
  quotations           Quotation[]
  contracts            Contract[]
  financialCommitteeMembers RequisitionFinancialCommittee[]
  technicalCommitteeMembers RequisitionTechnicalCommittee[]
  recommendations      CommitteeRecommendation[]
}

// Join table for many-to-many financial committee members
model RequisitionFinancialCommittee {
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId String
  user          User                @relation(fields: [userId], references: [id])
  userId        String

  @@id([requisitionId, userId])
}

// Join table for many-to-many technical committee members
model RequisitionTechnicalCommittee {
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId String
  user          User                @relation(fields: [userId], references: [id])
  userId        String

  @@id([requisitionId, userId])
}


model RequisitionItem {
  id            String            @id @default(cuid())
  name          String
  description   String?
  quantity      Int
  unitPrice     Float?
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId String
  quoteItems    QuoteItem[]
  poItems       POItem[]
}

model CustomQuestion {
  id            String             @id @default(cuid())
  questionText  String
  questionType  String
  isRequired    Boolean            @default(true)
  options       String[]
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  answers       QuoteAnswer[]
}

model EvaluationCriteria {
  id                 String               @id @default(cuid())
  requisitionId      String               @unique
  requisition        PurchaseRequisition  @relation(fields: [requisitionId], references: [id])
  financialWeight    Float
  technicalWeight    Float
  financialCriteria  FinancialCriterion[]
  technicalCriteria  TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  name                 String
  weight               Float
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  name                 String
  weight               Float
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  scores               TechnicalScore[]
}

model Quotation {
  id                String       @id @default(cuid())
  transactionId     String?
  requisitionId     String
  vendorId          String
  vendorName        String
  totalPrice        Float
  deliveryDate      DateTime
  createdAt         DateTime     @default(now())
  status            QuotationStatus @default(Submitted)
  notes             String?
  rank              Int?
  finalAverageScore Float?
  cpoDocumentUrl    String?
  experienceDocumentUrl String?
  
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor            Vendor       @relation(fields: [vendorId], references: [id])
  items             QuoteItem[]
  answers           QuoteAnswer[]
  scores            CommitteeScoreSet[]
}

model QuoteItem {
  id                String    @id @default(cuid())
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  quotationId       String
  quotation         Quotation @relation(fields: [quotationId], references: [id])
  itemScores        ItemScore[]
  
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
}

model QuoteAnswer {
  id          String   @id @default(cuid())
  questionId  String
  answer      String
  quotationId String
  question    CustomQuestion @relation(fields: [questionId], references: [id])
  quotation   Quotation      @relation(fields: [quotationId], references: [id])
}

model CommitteeAssignment {
  userId        String
  requisitionId String
  scoresSubmitted Boolean @default(false)

  user          User              @relation("CommitteeMember", fields: [userId], references: [id])
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])

  @@id([userId, requisitionId])
}

model CommitteeRecommendation {
  id              String   @id @default(cuid())
  requisitionId   String
  userId          String
  committeeRole   RoleName
  recommendation  String // "Recommended", "ChangesRequested"
  comment         String?
  createdAt       DateTime @default(now())

  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  user            User                @relation(fields: [userId], references: [id])
}

model CommitteeScoreSet {
  id                String    @id @default(cuid())
  quotationId       String
  scorerId          String
  scorerName        String
  committeeComment  String?
  finalScore        Float
  submittedAt       DateTime  @default(now())
  
  quotation         Quotation @relation(fields: [quotationId], references: [id])
  scorer            User      @relation(fields: [scorerId], references: [id])
  itemScores        ItemScore[]
}

model ItemScore {
  id              String @id @default(cuid())
  scoreSetId      String
  quoteItemId     String
  finalScore      Float
  
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id])
  quoteItem       QuoteItem         @relation(fields: [quoteItemId], references: [id])
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
}

model FinancialScore {
  id          String             @id @default(cuid())
  itemScoreId String
  criterionId String
  score       Float
  comment     String?
  
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id])
  criterion   FinancialCriterion @relation(fields: [criterionId], references: [id])
}

model TechnicalScore {
  id          String             @id @default(cuid())
  itemScoreId String
  criterionId String
  score       Float
  comment     String?
  
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id])
  criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id])
}

model Contract {
  id             String    @id @default(cuid())
  contractNumber String    @default(cuid())
  requisitionId  String
  vendorId       String
  startDate      DateTime
  endDate        DateTime
  filePath       String?
  status         String    @default("Draft")
  createdAt      DateTime  @default(now())
  
  requisition    PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor         Vendor    @relation(fields: [vendorId], references: [id])
}

model PurchaseOrder {
  id                String    @id @default(cuid())
  transactionId     String?
  requisitionId     String    @unique
  requisitionTitle  String
  vendorId          String
  totalAmount       Float
  status            PurchaseOrderStatus @default(Issued)
  createdAt         DateTime  @default(now())
  notes             String?
  
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor            Vendor    @relation(fields: [vendorId], references: [id])
  items             POItem[]
  receipts          GoodsReceiptNote[]
  invoices          Invoice[]
}

model POItem {
  id                String    @id @default(cuid())
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int       @default(0)
  purchaseOrderId   String
  
  purchaseOrder     PurchaseOrder     @relation(fields: [purchaseOrderId], references: [id])
  requisitionItem   RequisitionItem   @relation(fields: [requisitionItemId], references: [id])
  receiptItems      ReceiptItem[]
}

model GoodsReceiptNote {
  id                String        @id @default(cuid())
  transactionId     String?
  purchaseOrderId   String
  receivedById      String
  receivedDate      DateTime      @default(now())
  
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedBy        User          @relation(fields: [receivedById], references: [id])
  items             ReceiptItem[]
}

model ReceiptItem {
  id                 String    @id @default(cuid())
  poItemId           String
  quantityReceived   Int
  condition          ReceiptCondition @default(Good)
  notes              String?
  goodsReceiptNoteId String
  
  poItem             POItem             @relation(fields: [poItemId], references: [id])
  goodsReceiptNote   GoodsReceiptNote   @relation(fields: [goodsReceiptNoteId], references: [id])
}

model Invoice {
  id                String         @id @default(cuid())
  transactionId     String?
  purchaseOrderId   String
  vendorId          String
  invoiceDate       DateTime
  totalAmount       Float
  status            InvoiceStatus  @default(Pending)
  documentUrl       String?
  paymentDate       DateTime?
  paymentReference  String?
  
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  vendor            Vendor        @relation(fields: [vendorId], references: [id])
  items             InvoiceItem[]
}

model InvoiceItem {
  id          String   @id @default(cuid())
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
}

model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime  @default(now())
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String
  
  user          User?     @relation(fields: [userId], references: [id])
}

enum KycStatus {
  Pending
  Verified
  Rejected
}

enum Urgency {
  Low
  Medium
  High
  Critical
}

enum RequisitionStatus {
  Draft
  Pending_Approval
  Approved
  Rejected
  RFQ_In_Progress
  PO_Created
  Fulfilled
  Closed
  Pending_Managerial_Approval
  Pending_Committee_A_Review
  Pending_Committee_B_Review
  Pending_Final_Approval
  Approved_Awaiting_Notification
}

enum QuotationStatus {
  Submitted
  Awarded
  Partially_Awarded
  Rejected
  Standby
  Invoice_Submitted
  Failed
  Accepted
  Declined
}

enum PurchaseOrderStatus {
  Issued
  Acknowledged
  Shipped
  Partially_Delivered
  Delivered
  Cancelled
  Matched
  Mismatched
  On_Hold
}

enum ReceiptCondition {
  Good
  Damaged
  Incorrect
}

enum InvoiceStatus {
  Pending
  Approved_for_Payment
  Paid
  Disputed
}

enum RoleName {
  Requester
  Approver
  Procurement_Officer
  Finance
  Admin
  Receiving
  Vendor
  Committee_Member
  Committee_A_Member
  Committee_B_Member
  President
  VP_Resources
  Director_Supply_Chain
  Director_HRM
  Procurement_Manager
  Committee
}

