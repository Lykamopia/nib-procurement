
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                @id @default(cuid())
  name                    String
  email                   String                @unique
  password                String
  role                    String
  departmentId            String?
  vendorId                String?               @unique
  approvalLimit           Float?
  managerId               String?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  department              Department?           @relation("DepartmentUsers", fields: [departmentId], references: [id])
  vendor                  Vendor?
  manager                 User?                 @relation("ManagerSubordinates", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates            User[]                @relation("ManagerSubordinates")
  createdRequisitions     PurchaseRequisition[] @relation("CreatedRequisitions")
  approvedRequisitions    PurchaseRequisition[] @relation("ApprovedRequisitions")
  currentAssignedReqs     PurchaseRequisition[] @relation("CurrentApprover")
  financialCommitteeOn    PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommitteeOn    PurchaseRequisition[] @relation("TechnicalCommitteeMembers")
  auditLogs               AuditLog[]
  sentContracts           Contract[]
  committeeAssignments    CommitteeAssignment[]
  scoresSubmitted         CommitteeScoreSet[]
  goodsReceipts           GoodsReceiptNote[]
  managedDepartment       Department?           @relation("DepartmentHead")
}

model Department {
  id          String                @id @default(cuid())
  name        String                @unique
  description String?
  headId      String?               @unique
  head        User?                 @relation("DepartmentHead", fields: [headId], references: [id])
  users       User[]                @relation("DepartmentUsers")
  requisitions PurchaseRequisition[]
}

model Role {
    id          String @id @default(cuid())
    name        String @unique
    description String?
}

model PurchaseRequisition {
  id                           String    @id @default(cuid())
  transactionId                String?
  requester                    User      @relation("CreatedRequisitions", fields: [requesterId], references: [id])
  requesterId                  String
  title                        String
  departmentId                 String
  department                   Department @relation(fields: [departmentId], references: [id])
  items                        RequisitionItem[]
  totalPrice                   Float
  justification                String
  status                       String
  urgency                      String
  createdAt                    DateTime  @default(now())
  updatedAt                    DateTime  @updatedAt
  approverId                   String?
  approver                     User?     @relation("ApprovedRequisitions", fields: [approverId], references: [id])
  approverComment              String?
  currentApproverId            String?
  currentApprover              User?     @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  quotations                   Quotation[]
  purchaseOrderId              String?   @unique
  purchaseOrder                PurchaseOrder?
  allowedVendorIds             String[]
  awardedQuoteItemIds          String[]  @default([])
  customQuestions              CustomQuestion[]
  deadline                     DateTime?
  scoringDeadline              DateTime?
  awardResponseDeadline        DateTime?
  awardResponseDurationMinutes Int?
  evaluationCriteria           EvaluationCriteria?
  financialCommitteeMembers    User[]    @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers    User[]    @relation("TechnicalCommitteeMembers")
  committeeName                String?
  committeePurpose             String?
  cpoAmount                    Float?
  rfqSettings                  Json?
  reviews                      Review[]
  contracts                    Contract[]
  committeeAssignments         CommitteeAssignment[]
}

model RequisitionItem {
  id            String              @id @default(cuid())
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId String
  name          String
  description   String?
  quantity      Int
  unitPrice     Float
  quoteItems    QuoteItem[]
  poItems       POItem[]
}

model CommitteeAssignment {
    id              String   @id @default(cuid())
    userId          String
    requisitionId   String
    scoresSubmitted Boolean  @default(false)
    user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)

    @@unique([userId, requisitionId])
}


model Review {
    id          String @id @default(cuid())
    requisition PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    requisitionId String
    reviewerId  String
    reviewer    User @relation(fields: [reviewerId], references: [id])
    committee   String // "Committee A" or "Committee B"
    decision    String // "Approved", "Rejected"
    comment     String?
    createdAt   DateTime @default(now())

    @@index([requisitionId])
}


model CustomQuestion {
  id            String              @id @default(cuid())
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId String
  questionText  String
  questionType  String
  isRequired    Boolean
  options       String[]
  answers       QuoteAnswer[]
}

model EvaluationCriteria {
  id                String                 @id @default(cuid())
  requisition       PurchaseRequisition    @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId     String                 @unique
  financialWeight   Float
  technicalWeight   Float
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Float
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Float
}

model Vendor {
  id            String         @id @default(cuid())
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String         @unique
  name          String
  contactPerson String
  email         String         @unique
  phone         String
  address       String
  kycStatus     String
  rejectionReason String?
  kycDocuments  KYC_Document[]
  quotations    Quotation[]
  purchaseOrders PurchaseOrder[]
  contracts      Contract[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId    String
  name        String
  url         String
  submittedAt DateTime
}

model Quotation {
  id                    String              @id @default(cuid())
  transactionId         String?
  requisition           PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId         String
  vendor                Vendor              @relation(fields: [vendorId], references: [id])
  vendorId              String
  vendorName            String
  items                 QuoteItem[]
  totalPrice            Float
  deliveryDate          DateTime
  createdAt             DateTime            @default(now())
  status                String
  notes                 String?
  rank                  Int?
  answers               QuoteAnswer[]
  scores                CommitteeScoreSet[]
  finalAverageScore     Float?
  cpoDocumentUrl        String?
  experienceDocumentUrl String?
}

model QuoteItem {
  id                String          @id @default(cuid())
  quotation         Quotation       @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId       String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  scores            ItemScore[]
}

model QuoteAnswer {
  id          String         @id @default(cuid())
  quotation   Quotation      @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId String
  question    CustomQuestion @relation(fields: [questionId], references: [id])
  questionId  String
  answer      String
}

model CommitteeScoreSet {
  id               String      @id @default(cuid())
  quotation        Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId      String
  scorer           User        @relation(fields: [scorerId], references: [id])
  scorerId         String
  itemScores       ItemScore[]
  finalScore       Float       @default(0)
  committeeComment String?
  submittedAt      DateTime    @default(now())

  @@unique([quotationId, scorerId])
}

model ItemScore {
  id         String            @id @default(cuid())
  scoreSet   CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  scoreSetId String
  quoteItem  QuoteItem         @relation(fields: [quoteItemId], references: [id])
  quoteItemId String            @unique
  scores     Score[]
  finalScore Float             @default(0)
}

model Score {
  id          String    @id @default(cuid())
  itemScore   ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId String
  criterionId String // References FinancialCriterion or TechnicalCriterion, handled in application logic
  score       Float
  comment     String?
  type        String // 'FINANCIAL' or 'TECHNICAL'
}

model PurchaseOrder {
  id               String             @id @default(cuid())
  transactionId    String?
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId    String             @unique
  requisitionTitle String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  vendorId         String
  items            POItem[]
  totalAmount      Float
  status           String
  createdAt        DateTime           @default(now())
  notes            String?
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id                String          @id @default(cuid())
  po                PurchaseOrder   @relation(fields: [poId], references: [id], onDelete: Cascade)
  poId              String
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int             @default(0)
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId String
  receiptItems      ReceiptItem[]
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedById    String
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  goodsReceiptNoteId String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  poItemId           String
  quantityReceived   Int
  condition          String // 'Good', 'Damaged', 'Incorrect'
  notes              String?
}

model Invoice {
  id               String        @id @default(cuid())
  transactionId    String?
  po               PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId  String
  vendorId         String
  invoiceDate      DateTime
  items            InvoiceItem[]
  totalAmount      Float
  status           String // 'Pending', 'Approved_for_Payment', 'Paid', 'Disputed'
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId   String
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model AuditLog {
  id            String   @id @default(cuid())
  transactionId String?
  timestamp     DateTime @default(now())
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String
}

model Contract {
    id              String @id @default(cuid())
    contractNumber  String @unique @default(cuid())
    requisitionId   String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    vendorId        String
    vendor          Vendor @relation(fields: [vendorId], references: [id])
    senderId        String
    sender          User @relation(fields: [senderId], references: [id])
    startDate       DateTime
    endDate         DateTime
    filePath        String?
    status          String // Draft, Active, Expired
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
