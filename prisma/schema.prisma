// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                String                @id @default(cuid())
  name                              String
  email                             String                @unique
  password                          String
  role                              String
  departmentId                      String?
  vendorId                          String?               @unique
  approvalLimit                     Float?
  managerId                         String?
  createdAt                         DateTime              @default(now())
  updatedAt                         DateTime              @updatedAt
  
  // Relations
  department                        Department?           @relation("DepartmentMembers", fields: [departmentId], references: [id])
  manager                           User?                 @relation("ManagerSubordinates", fields: [managerId], references: [id])
  subordinates                      User[]                @relation("ManagerSubordinates")
  vendor                            Vendor?
  requisitions                      PurchaseRequisition[] @relation("RequisitionRequester")
  approvedRequisitions              PurchaseRequisition[] @relation("RequisitionApprover")
  currentApprovals                  PurchaseRequisition[] @relation("CurrentApprover")
  auditLogs                         AuditLog[]
  receipts                          GoodsReceiptNote[]
  financialCommitteeForRequisitions PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommitteeForRequisitions PurchaseRequisition[] @relation("TechnicalCommitteeMembers")
  committeeAssignments              CommitteeAssignment[]
  reviews                           Review[]
  scores                            CommitteeScoreSet[] // Added missing back-relation

  @@index([departmentId])
  @@index([vendorId])
  @@index([managerId])
}

model Role {
  name          String @id @unique
  description   String
}


model Department {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String?
  users         User[]   @relation("DepartmentMembers")
  requisitions  PurchaseRequisition[]
  headId        String?  @unique
  head          User?    @relation("DepartmentHead", fields: [headId], references: [id])

  @@index([headId])
}

model PurchaseRequisition {
  id                   String    @id @default(cuid())
  transactionId        String?   @unique
  title                String
  departmentId         String
  justification        String
  status               String    @default("Draft")
  urgency              String    @default("Low")
  totalPrice           Float
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  requesterId          String
  approverId           String?
  currentApproverId    String?
  purchaseOrderId      String?   @unique
  deadline             DateTime?
  scoringDeadline      DateTime?
  awardResponseDeadline DateTime?
  awardResponseDurationMinutes Int?
  cpoAmount            Float?
  committeeName        String?
  committeePurpose     String?
  
  // Relations
  requester               User                  @relation("RequisitionRequester", fields: [requesterId], references: [id])
  approver                User?                 @relation("RequisitionApprover", fields: [approverId], references: [id])
  currentApprover         User?                 @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  department              Department            @relation(fields: [departmentId], references: [id])
  items                   RequisitionItem[]
  customQuestions         CustomQuestion[]
  evaluationCriteria      EvaluationCriteria?
  quotations              Quotation[]
  po                      PurchaseOrder?        @relation(fields: [purchaseOrderId], references: [id])
  committeeAssignments    CommitteeAssignment[]
  awardedQuoteItemIds     String[]
  reviews                 Review[]
  
  // Corrected Implicit Many-to-Many Relations
  financialCommitteeMembers   User[] @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers   User[] @relation("TechnicalCommitteeMembers")

  rfqSettings Json?

  @@index([requesterId])
  @@index([approverId])
  @@index([currentApproverId])
  @@index([departmentId])
}

model RequisitionItem {
  id              String  @id @default(cuid())
  requisitionId   String
  name            String
  quantity        Int
  unitPrice       Float
  description     String?
  
  // Relations
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  quoteItems      QuoteItem[]
  poItems         POItem[]

  @@index([requisitionId])
}

model CustomQuestion {
  id                String  @id @default(cuid())
  requisitionId     String
  questionText      String
  questionType      QuestionType
  isRequired        Boolean @default(true)
  options           String[]
  requisitionItemId String?
  
  // Relations
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  answers           QuoteAnswer[]

  @@index([requisitionId])
}

model EvaluationCriteria {
    id                  String @id @default(cuid())
    requisitionId       String @unique
    financialWeight     Float
    technicalWeight     Float
    
    // Relations
    requisition         PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    financialCriteria   FinancialCriterion[]
    technicalCriteria   TechnicalCriterion[]
}

model FinancialCriterion {
    id                  String @id @default(cuid())
    evaluationCriteriaId String
    name                String
    weight              Float

    // Relations
    evaluationCriteria  EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
    scores              FinancialScore[]

    @@index([evaluationCriteriaId])
}

model TechnicalCriterion {
    id                  String @id @default(cuid())
    evaluationCriteriaId String
    name                String
    weight              Float

    // Relations
    evaluationCriteria  EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
    scores              TechnicalScore[]

    @@index([evaluationCriteriaId])
}

model Quotation {
    id                  String      @id @default(cuid())
    transactionId       String?
    requisitionId       String
    vendorId            String
    vendorName          String
    totalPrice          Float
    deliveryDate        DateTime
    status              String
    notes               String?
    rank                Int?
    finalAverageScore   Float?
    cpoDocumentUrl      String?
    experienceDocumentUrl String?
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt

    // Relations
    requisition         PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    vendor              Vendor              @relation(fields: [vendorId], references: [id])
    items               QuoteItem[]
    answers             QuoteAnswer[]
    scores              CommitteeScoreSet[]

    @@index([requisitionId])
    @@index([vendorId])
}

model QuoteItem {
    id                  String    @id @default(cuid())
    quotationId         String
    requisitionItemId   String
    name                String
    quantity            Int
    unitPrice           Float
    leadTimeDays        Int
    brandDetails        String?

    // Relations
    quotation           Quotation           @relation(fields: [quotationId], references: [id], onDelete: Cascade)
    requisitionItem     RequisitionItem     @relation(fields: [requisitionItemId], references: [id])
    scores              ItemScore[]

    @@index([quotationId])
    @@index([requisitionItemId])
}

model QuoteAnswer {
    id                  String        @id @default(cuid())
    quotationId         String
    questionId          String
    answer              String

    // Relations
    quotation           Quotation       @relation(fields: [quotationId], references: [id], onDelete: Cascade)
    question            CustomQuestion  @relation(fields: [questionId], references: [id])

    @@index([quotationId])
    @@index([questionId])
}

model CommitteeScoreSet {
    id                  String @id @default(cuid())
    quotationId         String
    scorerId            String
    scorerName          String
    finalScore          Float
    committeeComment    String?
    submittedAt         DateTime @default(now())
    
    // Relations
    quotation       Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
    scorer          User        @relation(fields: [scorerId], references: [id])
    itemScores      ItemScore[]

    @@unique([quotationId, scorerId])
    @@index([scorerId])
}

model ItemScore {
    id                  String @id @default(cuid())
    scoreSetId          String
    quoteItemId         String
    finalScore          Float

    // Relations
    scoreSet            CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
    quoteItem           QuoteItem @relation(fields: [quoteItemId], references: [id])
    financialScores     FinancialScore[]
    technicalScores     TechnicalScore[]
    
    @@index([scoreSetId])
    @@index([quoteItemId])
}

model FinancialScore {
    id                  String @id @default(cuid())
    itemScoreId         String
    criterionId         String
    score               Float
    comment             String?

    // Relations
    itemScore           ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
    criterion           FinancialCriterion @relation(fields: [criterionId], references: [id])

    @@index([itemScoreId])
    @@index([criterionId])
}

model TechnicalScore {
    id                  String @id @default(cuid())
    itemScoreId         String
    criterionId         String
    score               Float
    comment             String?

    // Relations
    itemScore           ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
    criterion           TechnicalCriterion @relation(fields: [criterionId], references: [id])

    @@index([itemScoreId])
    @@index([criterionId])
}

model CommitteeAssignment {
    userId          String
    requisitionId   String
    scoresSubmitted Boolean @default(false)

    // Relations
    user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)

    @@id([userId, requisitionId])
}

model PurchaseOrder {
    id                  String @id @default(cuid())
    transactionId       String?
    requisitionId       String @unique
    requisitionTitle    String
    vendorId            String
    totalAmount         Float
    status              String
    createdAt           DateTime @default(now())

    // Relations
    requisition         PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    vendor              Vendor @relation(fields: [vendorId], references: [id])
    items               POItem[]
    receipts            GoodsReceiptNote[]
    invoices            Invoice[]

    @@index([vendorId])
}

model POItem {
    id                  String @id @default(cuid())
    purchaseOrderId     String
    requisitionItemId   String
    name                String
    quantity            Int
    unitPrice           Float
    totalPrice          Float
    receivedQuantity    Int

    // Relations
    purchaseOrder       PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
    requisitionItem     RequisitionItem @relation(fields: [requisitionItemId], references: [id])
    receiptItems        ReceiptItem[]
    
    @@index([purchaseOrderId])
    @@index([requisitionItemId])
}

model GoodsReceiptNote {
    id                  String @id @default(cuid())
    transactionId       String?
    purchaseOrderId     String
    receivedById        String
    receivedDate        DateTime @default(now())

    // Relations
    purchaseOrder       PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
    receivedBy          User @relation(fields: [receivedById], references: [id])
    items               ReceiptItem[]

    @@index([purchaseOrderId])
    @@index([receivedById])
}

model ReceiptItem {
    id                  String @id @default(cuid())
    goodsReceiptNoteId  String
    poItemId            String
    quantityReceived    Int
    condition           String
    notes               String?

    // Relations
    goodsReceiptNote    GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
    poItem              POItem @relation(fields: [poItemId], references: [id])

    @@index([goodsReceiptNoteId])
    @@index([poItemId])
}

model Invoice {
    id                  String @id @default(cuid())
    transactionId       String?
    purchaseOrderId     String
    vendorId            String
    invoiceDate         DateTime
    totalAmount         Float
    status              String
    documentUrl         String?
    paymentDate         DateTime?
    paymentReference    String?

    // Relations
    po                  PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
    vendor              Vendor @relation(fields: [vendorId], references: [id])
    items               InvoiceItem[]

    @@index([purchaseOrderId])
    @@index([vendorId])
}

model InvoiceItem {
    id                  String @id @default(cuid())
    invoiceId           String
    name                String
    quantity            Int
    unitPrice           Float
    totalPrice          Float

    // Relations
    invoice             Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

    @@index([invoiceId])
}

model Vendor {
    id              String @id @default(cuid())
    name            String
    contactPerson   String
    email           String @unique
    phone           String
    address         String
    kycStatus       String
    rejectionReason String?
    userId          String @unique

    // Relations
    user            User           @relation(fields: [userId], references: [id])
    quotations      Quotation[]
    purchaseOrders  PurchaseOrder[]
    invoices        Invoice[]
    kycDocuments    KYC_Document[]
    contracts       Contract[]
}

model KYC_Document {
    id              String @id @default(cuid())
    vendorId        String
    name            String
    url             String
    submittedAt     DateTime @default(now())

    // Relations
    vendor          Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

    @@index([vendorId])
}

model Contract {
    id              String      @id @default(cuid())
    contractNumber  String      @unique @default(cuid())
    requisitionId   String      @unique
    vendorId        String
    startDate       DateTime
    endDate         DateTime
    filePath        String?
    status          String      @default("Draft")
    createdAt       DateTime    @default(now())
    
    // Relations
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    vendor          Vendor              @relation(fields: [vendorId], references: [id])

    @@index([vendorId])
}

model AuditLog {
    id              String      @id @default(cuid())
    transactionId   String?
    timestamp       DateTime    @default(now())
    userId          String?
    action          String
    entity          String
    entityId        String
    details         String

    // Relations
    user            User?       @relation(fields: [userId], references: [id], onDelete: SetNull)

    @@index([userId])
    @@index([transactionId])
}

model Review {
  id              String      @id @default(cuid())
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  reviewerId      String
  reviewer        User        @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  committeeType   String      // "Committee A" or "Committee B"
  decision        String      // "Approved", "Rejected"
  comment         String?
  createdAt       DateTime    @default(now())

  @@unique([requisitionId, reviewerId])
  @@index([reviewerId])
}

enum QuestionType {
  text
  boolean
  multiple_choice
  file
}
