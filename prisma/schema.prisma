
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(cuid())
  name                 String
  email                String                @unique
  password             String?
  role                 UserRole
  vendorId             String?               @unique
  vendor               Vendor?               @relation(fields: [vendorId], references: [id])
  departmentId         String?
  department           Department?           @relation(fields: [departmentId], references: [id])
  createdRequisitions  PurchaseRequisition[] @relation("Requester")
  approvedRequisitions PurchaseRequisition[] @relation("Approver")
  goodsReceipts        GoodsReceiptNote[]    @relation("ReceivedBy")
  scores               CommitteeScoreSet[]   @relation("Scorer")
  auditLogs            AuditLog[]            @relation("UserActions")

  financialCommitteeOn   PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommitteeOn   PurchaseRequisition[] @relation("TechnicalCommitteeMembers")
  committeeAssignments   CommitteeAssignment[]

  @@index([departmentId])
}

model Department {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model PurchaseRequisition {
  id                            String    @id @default(cuid())
  requesterId                   String
  requester                     User      @relation("Requester", fields: [requesterId], references: [id])
  title                         String
  department                    String
  items                         RequisitionItem[]
  totalPrice                    Float?
  justification                 String
  status                        String // RequisitionStatus
  createdAt                     DateTime  @default(now())
  updatedAt                     DateTime  @updatedAt
  approverId                    String?
  approver                      User?     @relation("Approver", fields: [approverId], references: [id])
  approverComment               String?
  contractFileName              String?
  contractUploadDate            DateTime?
  negotiationNotes              String?
  purchaseOrderId               String?   @unique
  purchaseOrder                 PurchaseOrder?
  allowedVendorIds              String[]
  customQuestions               CustomQuestion[]
  deadline                      DateTime?
  scoringDeadline               DateTime?
  awardResponseDeadline         DateTime?
  awardResponseDurationMinutes  Int?
  evaluationCriteria            EvaluationCriteria?
  financialCommitteeMemberIds   String[]
  financialCommitteeMembers     User[]    @relation("FinancialCommitteeMembers")
  technicalCommitteeMemberIds   String[]
  technicalCommitteeMembers     User[]    @relation("TechnicalCommitteeMembers")
  committeeName                 String?
  committeePurpose              String?
  cpoAmount                     Float?
  quotations                    Quotation[]

  @@index([requesterId])
  @@index([approverId])
}

model RequisitionItem {
  id            String              @id @default(cuid())
  name          String
  description   String?
  quantity      Int
  unitPrice     Float?
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId String

  @@index([requisitionId])
}

model CustomQuestion {
  id            String              @id @default(cuid())
  questionText  String
  questionType  String // QuestionType
  options       String[]
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId String

  @@index([requisitionId])
}

model EvaluationCriteria {
  id                String                @id @default(cuid())
  requisition       PurchaseRequisition   @relation(fields: [requisitionId], references: [id])
  requisitionId     String                @unique
  financialWeight   Int
  technicalWeight   Int
  financialCriteria EvaluationCriterion[] @relation("Financial")
  technicalCriteria EvaluationCriterion[] @relation("Technical")
}

model EvaluationCriterion {
  id                   String              @id @default(cuid())
  name                 String
  weight               Int
  financialCriteria    EvaluationCriteria? @relation("Financial", fields: [financialCriteriaId], references: [id])
  financialCriteriaId  String?
  technicalCriteria    EvaluationCriteria? @relation("Technical", fields: [technicalCriteriaId], references: [id])
  technicalCriteriaId  String?
  scores               Score[]

  @@index([financialCriteriaId])
  @@index([technicalCriteriaId])
}

model Quotation {
  id                String         @id @default(cuid())
  requisitionId     String
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendorId          String
  vendor            Vendor         @relation(fields: [vendorId], references: [id])
  vendorName        String
  items             QuoteItem[]
  totalPrice        Float
  deliveryDate      DateTime
  createdAt         DateTime
  status            String // QuotationStatus
  notes             String?
  rank              Int?
  answers           QuoteAnswer[]
  scores            CommitteeScoreSet[]
  finalAverageScore Float?
  cpoDocumentUrl    String?

  @@index([requisitionId])
  @@index([vendorId])
}

model QuoteItem {
  id              String    @id @default(cuid())
  quotationId     String
  quotation       Quotation @relation(fields: [quotationId], references: [id])
  requisitionItemId String
  name            String
  quantity        Int
  unitPrice       Float
  leadTimeDays    Int
  brandDetails    String?

  @@index([quotationId])
}

model QuoteAnswer {
  id          String    @id @default(cuid())
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id])
  questionId  String
  answer      String

  @@index([quotationId])
}

model CommitteeScoreSet {
  id               String      @id @default(cuid())
  quotationId      String
  quotation        Quotation   @relation(fields: [quotationId], references: [id])
  scorerId         String
  scorer           User        @relation("Scorer", fields: [scorerId], references: [id])
  scorerName       String
  financialScores  Score[]     @relation("FinancialScores")
  technicalScores  Score[]     @relation("TechnicalScores")
  finalScore       Float
  committeeComment String?
  submittedAt      DateTime

  @@index([quotationId])
  @@index([scorerId])
}

model Score {
  id                     String             @id @default(cuid())
  criterionId            String
  criterion              EvaluationCriterion @relation(fields: [criterionId], references: [id])
  score                  Int
  comment                String?
  financialScoreSet      CommitteeScoreSet? @relation("FinancialScores", fields: [financialScoreSetId], references: [id])
  financialScoreSetId    String?
  technicalScoreSet      CommitteeScoreSet? @relation("TechnicalScores", fields: [technicalScoreSetId], references: [id])
  technicalScoreSetId    String?

  @@index([criterionId])
  @@index([financialScoreSetId])
  @@index([technicalScoreSetId])
}

model CommitteeAssignment {
  id              String  @id @default(cuid())
  userId          String
  user            User    @relation(fields: [userId], references: [id])
  requisitionId   String
  scoresSubmitted Boolean

  @@index([userId])
}

model Vendor {
  id            String      @id @default(cuid())
  user          User?
  name          String
  contactPerson String
  email         String
  phone         String
  address       String
  kycStatus     String // KycStatus
  kycDocuments  KYC_Document[]
  rejectionReason String?
  quotations    Quotation[]
  purchaseOrders PurchaseOrder[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  name        String
  url         String
  submittedAt DateTime
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id])

  @@index([vendorId])
}

model PurchaseOrder {
  id               String   @id @default(cuid())
  requisitionId    String
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionTitle String
  vendorId         String
  vendor           Vendor   @relation(fields: [vendorId], references: [id])
  items            POItem[]
  totalAmount      Float
  status           String // PurchaseOrderStatus
  createdAt        DateTime
  contractFileName String?
  contractUploadDate DateTime?
  notes            String?
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]

  @@index([requisitionId])
  @@index([vendorId])
}

model POItem {
  id              String        @id @default(cuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  name            String
  quantity        Int
  unitPrice       Float
  totalPrice      Float
  receivedQuantity Int

  @@index([purchaseOrderId])
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedById    String
  receivedBy      User          @relation("ReceivedBy", fields: [receivedById], references: [id])
  receivedDate    DateTime
  items           ReceiptItem[]

  @@index([purchaseOrderId])
  @@index([receivedById])
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNoteId String
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id])
  poItemId           String
  name               String
  quantityOrdered    Int
  quantityReceived   Int
  condition          String // 'Good' | 'Damaged' | 'Incorrect'
  notes              String?

  @@index([goodsReceiptNoteId])
}

model Invoice {
  id               String        @id @default(cuid())
  purchaseOrderId  String
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  vendorId         String
  invoiceDate      DateTime
  items            InvoiceItem[]
  totalAmount      Float
  status           String // InvoiceStatus
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?

  @@index([purchaseOrderId])
}

model InvoiceItem {
  id        String  @id @default(cuid())
  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  name      String
  quantity  Int
  unitPrice Float
  totalPrice Float

  @@index([invoiceId])
}

model AuditLog {
  id        String   @id @default(cuid())
  timestamp DateTime
  user      String
  userId    String?
  userRef   User?    @relation("UserActions", fields: [userId], references: [id])
  role      String // UserRole
  action    String
  entity    String
  entityId  String
  details   String

  @@index([userId])
}

enum UserRole {
  Requester
  Approver
  Procurement Officer
  Finance
  Admin
  Receiving
  Vendor
  Committee Member
  Committee
}
