// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                @id @default(cuid())
  name                      String
  email                     String                @unique
  password                  String
  role                      UserRole
  departmentId              String?
  department                Department?           @relation(fields: [departmentId], references: [id])
  requisitions              PurchaseRequisition[] @relation("Requester")
  approvals                 PurchaseRequisition[] @relation("Approver")
  vendorId                  String?               @unique
  vendor                    Vendor?               @relation(fields: [vendorId], references: [id])
  committeeAssignments      CommitteeAssignment[]
  createdScoreSets          CommitteeScoreSet[]
  createdGoodsReceipts      GoodsReceiptNote[]
  createdAuditLogs          AuditLog[]
  financialCommitteeOn      PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommitteeOn      PurchaseRequisition[] @relation("TechnicalCommitteeMembers")
}

enum UserRole {
  Requester
  Approver
  Procurement_Officer
  Finance
  Admin
  Receiving
  Vendor
  Committee_Member
  Committee
}

model Department {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
  purchaseRequisitions PurchaseRequisition[]
}

model Vendor {
  id              String            @id @default(cuid())
  name            String
  contactPerson   String
  email           String            @unique
  phone           String
  address         String
  userId          String            @unique
  user            User?
  kycStatus       KycStatus
  rejectionReason String?
  kycDocuments    KYC_Document[]
  quotations      Quotation[]
  purchaseOrders  PurchaseOrder[]
  contracts       Contract[]
}

model KYC_Document {
  id        String   @id @default(cuid())
  vendorId  String
  vendor    Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  name      String
  url       String
  submittedAt DateTime
}

enum KycStatus {
  Pending
  Verified
  Rejected
}

model PurchaseRequisition {
  id                           String                 @id @default(cuid())
  transactionId                String?
  requesterId                  String
  requester                    User                   @relation("Requester", fields: [requesterId], references: [id])
  requesterName                String?
  title                        String
  departmentId                 String?
  department                   Department?            @relation(fields: [departmentId], references: [id])
  items                        RequisitionItem[]
  totalPrice                   Float
  justification                String
  status                       RequisitionStatus
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  approverId                   String?
  approver                     User?                  @relation("Approver", fields: [approverId], references: [id])
  approverComment              String?
  quotations                   Quotation[]
  purchaseOrder                PurchaseOrder?
  purchaseOrderId              String?                @unique
  customQuestions              CustomQuestion[]
  allowedVendorIds             String[]
  deadline                     DateTime?
  scoringDeadline              DateTime?
  awardResponseDeadline        DateTime?
  awardResponseDurationMinutes Int?
  evaluationCriteria           EvaluationCriteria?
  financialCommitteeMemberIds  String[]
  financialCommitteeMembers    User[]                 @relation("FinancialCommitteeMembers")
  technicalCommitteeMemberIds  String[]
  technicalCommitteeMembers    User[]                 @relation("TechnicalCommitteeMembers")
  committeeName                String?
  committeePurpose             String?
  committeeAssignments         CommitteeAssignment[]
  cpoAmount                    Float?
  rfqSettings                  Json?
  awardedQuoteItemIds          String[]
  contracts                    Contract[]
}

model CommitteeAssignment {
  userId          String
  user            User   @relation(fields: [userId], references: [id])
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  scoresSubmitted Boolean @default(false)

  @@id([userId, requisitionId])
}


enum RequisitionStatus {
  Draft
  Pending_Approval
  Approved
  Rejected
  RFQ_In_Progress
  PO_Created
  Fulfilled
  Closed
}

model RequisitionItem {
  id          String    @id @default(cuid())
  requisitionId String
  requisition PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  name        String
  description String?
  quantity    Int
  unitPrice   Float
  quoteItems  QuoteItem[]
  poItems     POItem[]
}

model CustomQuestion {
  id             String    @id @default(cuid())
  requisitionId  String
  requisition    PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  questionText   String
  questionType   String // 'text', 'boolean', 'multiple-choice', 'file'
  isRequired     Boolean   @default(true)
  options        String[]
  answers        QuoteAnswer[]
}

model Quotation {
  id                String              @id @default(cuid())
  transactionId     String?
  requisitionId     String
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendorId          String
  vendor            Vendor              @relation(fields: [vendorId], references: [id])
  vendorName        String
  items             QuoteItem[]
  totalPrice        Float
  deliveryDate      DateTime
  status            QuotationStatus
  notes             String?
  rank              Int?
  cpoDocumentUrl    String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  answers           QuoteAnswer[]
  scores            CommitteeScoreSet[]
  finalAverageScore Float?
}

enum QuotationStatus {
  Submitted
  Awarded
  Partially_Awarded
  Rejected
  Standby
  Invoice_Submitted
  Failed
  Accepted
  Declined
}


model QuoteItem {
  id                String    @id @default(cuid())
  quotationId       String
  quotation         Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  requisitionItemId String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  itemScores        ItemScore[]
}

model QuoteAnswer {
  id          String    @id @default(cuid())
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  questionId  String
  question    CustomQuestion @relation(fields: [questionId], references: [id])
  answer      String
}

model EvaluationCriteria {
  id                String                 @id @default(cuid())
  requisitionId     String                 @unique
  requisition       PurchaseRequisition    @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  financialWeight   Int
  technicalWeight   Int
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String               @id @default(cuid())
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria   @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                 String
  weight               Int
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String               @id @default(cuid())
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria   @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                 String
  weight               Int
  scores               TechnicalScore[]
}

model CommitteeScoreSet {
  id               String      @id @default(cuid())
  quotationId      String
  quotation        Quotation   @relation(fields: [quotationId], references: [id])
  scorerId         String
  scorer           User        @relation(fields: [scorerId], references: id)
  scorerName       String
  itemScores       ItemScore[]
  committeeComment String?
  finalScore       Float
  submittedAt      DateTime    @default(now())
}

model ItemScore {
  id              String             @id @default(cuid())
  scoreSetId      String
  scoreSet        CommitteeScoreSet  @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  quoteItemId     String
  quoteItem       QuoteItem          @relation(fields: [quoteItemId], references: [id])
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
  finalScore      Float
  
  @@unique([scoreSetId, quoteItemId])
}

model FinancialScore {
  id           String             @id @default(cuid())
  itemScoreId  String
  itemScore    ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  criterionId  String
  criterion    FinancialCriterion @relation(fields: [criterionId], references: [id])
  score        Int
  comment      String?
}

model TechnicalScore {
  id           String             @id @default(cuid())
  itemScoreId  String
  itemScore    ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  criterionId  String
  criterion    TechnicalCriterion @relation(fields: [criterionId], references: [id])
  score        Int
  comment      String?
}


model PurchaseOrder {
  id               String             @id @default(cuid())
  transactionId    String?
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId    String
  requisitionTitle String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  vendorId         String
  items            POItem[]
  totalAmount      Float
  status           PurchaseOrderStatus
  createdAt        DateTime           @default(now())
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id                String           @id @default(cuid())
  purchaseOrderId   String
  purchaseOrder     PurchaseOrder    @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  requisitionItemId String
  requisitionItem   RequisitionItem  @relation(fields: [requisitionItemId], references: [id])
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int              @default(0)
  receiptItems      ReceiptItem[]
}

enum PurchaseOrderStatus {
  Issued
  Acknowledged
  Shipped
  Partially_Delivered
  Delivered
  Cancelled
  Matched
  Mismatched
  On_Hold
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedById    String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNoteId String
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  poItemId           String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  quantityReceived   Int
  condition          ReceiptItemCondition
  notes              String?
}

enum ReceiptItemCondition {
  Good
  Damaged
  Incorrect
}

model Invoice {
  id               String        @id @default(cuid())
  transactionId    String?
  purchaseOrderId  String
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  vendorId         String
  invoiceDate      DateTime
  items            InvoiceItem[]
  totalAmount      Float
  status           InvoiceStatus
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

enum InvoiceStatus {
  Pending
  Approved_for_Payment
  Paid
  Disputed
}

model Contract {
    id String @id @default(cuid())
    contractNumber String @unique @default(cuid())
    requisition    PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    requisitionId  String
    vendor         Vendor   @relation(fields: [vendorId], references: [id])
    vendorId       String
    startDate      DateTime
    endDate        DateTime
    filePath       String?
    status         String
    createdAt      DateTime @default(now())
}

model AuditLog {
  id            String   @id @default(cuid())
  transactionId String?
  timestamp     DateTime @default(now())
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
  action        String
  entity        String
  entityId      String
  details       String
}
