
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(cuid())
  name            String
  email           String       @unique
  password        String
  role            String
  approvalLimit   Float?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  departmentId    String?
  department      Department?  @relation(fields: [departmentId], references: [id])
  
  managerId       String?
  manager         User?        @relation("ManagerSubordinates", fields: [managerId], references: [id])
  subordinates    User[]       @relation("ManagerSubordinates")
  
  vendorId        String?      @unique
  vendor          Vendor?      @relation(fields: [vendorId], references: [id])

  requisitions    PurchaseRequisition[] @relation("RequisitionRequester")
  approvedRequisitions PurchaseRequisition[] @relation("RequisitionApprover")
  currentApprovals PurchaseRequisition[] @relation("CurrentApprover")
  
  committeeAssignments CommitteeAssignment[]
  scoreSets       CommitteeScoreSet[]  @relation("Scorer")
  receipts        GoodsReceiptNote[]
  auditLogs       AuditLog[]

  // Many-to-many for committee members
  financialCommittees   PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommittees   PurchaseRequisition[] @relation("TechnicalCommitteeMembers")
}

model Department {
    id          String  @id @default(cuid())
    name        String  @unique
    description String?
    headId      String? @unique
    head        User?   @relation(fields: [headId], references: [id])
    users       User[]
    requisitions PurchaseRequisition[]
}

model Vendor {
  id             String      @id @default(cuid())
  name           String
  contactPerson  String
  email          String      @unique
  phone          String
  address        String
  kycStatus      String      @default("Pending") // Pending, Verified, Rejected
  rejectionReason String?
  userId         String      @unique
  user           User?
  kycDocuments   KYC_Document[]
  quotations     Quotation[]
  purchaseOrders PurchaseOrder[]
  contracts      Contract[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  name        String
  url         String
  submittedAt DateTime @default(now())
}

model PurchaseRequisition {
  id              String       @id @default(cuid())
  transactionId   String?      @unique
  requesterId     String
  requester       User         @relation("RequisitionRequester", fields: [requesterId], references: [id])
  requesterName   String
  title           String
  departmentId    String
  department      Department   @relation(fields: [departmentId], references: [id])
  items           RequisitionItem[]
  totalPrice      Float
  justification   String
  status          String       @default("Draft")
  urgency         String       @default("Low")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  approverId      String?
  approver        User?        @relation("RequisitionApprover", fields: [approverId], references: [id])
  approverComment String?

  currentApproverId String?
  currentApprover   User?        @relation("CurrentApprover", fields: [currentApproverId], references: [id])

  committeeName     String?
  committeePurpose  String?
  scoringDeadline   DateTime?
  committeeRecommendation String?

  committeeAssignments CommitteeAssignment[]

  contractId      String?      @unique
  contract        Contract?
  purchaseOrderId String?      @unique
  purchaseOrder   PurchaseOrder?

  quotations       Quotation[]
  customQuestions  CustomQuestion[]
  evaluationCriteria EvaluationCriteria?

  allowedVendorIds String[] @default([])
  awardedQuoteItemIds String[] @default([])

  deadline                   DateTime?
  awardResponseDeadline      DateTime?
  awardResponseDurationMinutes Int?

  rfqSettings    Json? @default("{}")

  financialCommitteeMembers User[] @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers User[] @relation("TechnicalCommitteeMembers")
}

model CommitteeAssignment {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  requisitionId String
  requisition PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  scoresSubmitted Boolean @default(false)
  
  @@unique([userId, requisitionId])
}


model RequisitionItem {
  id              String       @id @default(cuid())
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  name            String
  description     String?
  quantity        Int
  unitPrice       Float
  poItems         POItem[]
}

model CustomQuestion {
  id              String       @id @default(cuid())
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  questionText    String
  questionType    String // text, boolean, multiple-choice, file
  isRequired      Boolean      @default(true)
  options         String[]
  requisitionItemId String? // Optional link to a specific item
  answers         QuoteAnswer[]
}

model EvaluationCriteria {
  id              String @id @default(cuid())
  requisitionId   String @unique
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  financialWeight Float
  technicalWeight Float
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id String @id @default(cuid())
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                 String
  weight               Float
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id String @id @default(cuid())
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                 String
  weight               Float
  scores               TechnicalScore[]
}

model Quotation {
  id               String      @id @default(cuid())
  transactionId    String?
  requisitionId    String
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  vendorId         String
  vendor           Vendor      @relation(fields: [vendorId], references: [id])
  vendorName       String
  items            QuoteItem[]
  totalPrice       Float
  deliveryDate     DateTime
  status           String      @default("Submitted")
  notes            String?
  rank             Int?
  createdAt        DateTime    @default(now())
  finalAverageScore Float?
  cpoDocumentUrl    String?
  experienceDocumentUrl String?

  answers          QuoteAnswer[]
  scores           CommitteeScoreSet[]
}

model QuoteItem {
  id                String       @id @default(cuid())
  quotationId       String
  quotation         Quotation    @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  itemScores        ItemScore[]
}

model QuoteAnswer {
  id          String   @id @default(cuid())
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  questionId  String
  question    CustomQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer      String
}

model CommitteeScoreSet {
  id          String @id @default(cuid())
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  scorerId    String
  scorer      User     @relation("Scorer", fields: [scorerId], references: [id])
  scorerName  String
  committeeComment String?
  finalScore  Float
  submittedAt DateTime @default(now())
  itemScores  ItemScore[]
}

model ItemScore {
  id            String @id @default(cuid())
  scoreSetId    String
  scoreSet      CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  quoteItemId   String
  quoteItem     QuoteItem         @relation(fields: [quoteItemId], references: [id], onDelete: Cascade)
  finalScore    Float
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
}

model FinancialScore {
  id            String @id @default(cuid())
  itemScoreId   String
  itemScore     ItemScore           @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  criterionId   String
  criterion     FinancialCriterion @relation(fields: [criterionId], references: [id])
  score         Float
  comment       String?
}

model TechnicalScore {
  id            String @id @default(cuid())
  itemScoreId   String
  itemScore     ItemScore           @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  criterionId   String
  criterion     TechnicalCriterion @relation(fields: [criterionId], references: [id])
  score         Float
  comment       String?
}

model PurchaseOrder {
  id               String       @id @default(cuid())
  transactionId    String?
  requisitionId    String
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionTitle String
  vendorId         String
  vendor           Vendor      @relation(fields: [vendorId], references: [id])
  items            POItem[]
  totalAmount      Float
  status           String
  createdAt        DateTime    @default(now())
  notes            String?
  
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id                 String       @id @default(cuid())
  purchaseOrderId    String
  purchaseOrder      PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  requisitionItemId  String
  requisitionItem    RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  name               String
  quantity           Int
  unitPrice          Float
  totalPrice         Float
  receivedQuantity   Int
  receiptItems       ReceiptItem[]
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedById    String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]
}

model ReceiptItem {
  id                  String   @id @default(cuid())
  goodsReceiptNoteId  String
  goodsReceiptNote    GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  poItemId            String
  poItem              POItem  @relation(fields: [poItemId], references: [id])
  quantityReceived    Int
  condition           String
  notes               String?
}

model Invoice {
  id               String       @id @default(cuid())
  transactionId    String?
  purchaseOrderId  String
  po               PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  vendorId         String
  invoiceDate      DateTime
  items            InvoiceItem[]
  totalAmount      Float
  status           String
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
}

model InvoiceItem {
  id         String   @id @default(cuid())
  invoiceId  String
  invoice    Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  name       String
  quantity   Int
  unitPrice  Float
  totalPrice Float
}

model Contract {
  id String @id @default(cuid())
  contractNumber String @unique @default(cuid())
  requisitionId  String @unique
  requisition    PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  vendorId       String
  vendor         Vendor   @relation(fields: [vendorId], references: [id])
  startDate      DateTime
  endDate        DateTime
  filePath       String?
  status         String
  createdAt      DateTime @default(now())
}


model Role {
    id          String @id @default(cuid())
    name        String @unique
    description String?
}

model AuditLog {
  id          String   @id @default(cuid())
  transactionId String?
  timestamp   DateTime @default(now())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action      String
  entity      String
  entityId    String
  details     String
}
