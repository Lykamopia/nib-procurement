
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================================================
// Models
// ==============================================================

model User {
  id                                String      @id @default(cuid())
  name                              String
  email                             String      @unique
  password                          String
  role                              String
  approvalLimit                   Float?
  createdAt                         DateTime    @default(now())
  updatedAt                         DateTime    @updatedAt
  
  // Relations
  departmentId                      String?
  department                        Department? @relation(fields: [departmentId], references: [id])
  managingDepartment              Department? @relation("DepartmentHead")

  managerId                         String?
  manager                           User?       @relation("ManagerSubordinates", fields: [managerId], references: [id])
  subordinates                      User[]      @relation("ManagerSubordinates")
  
  vendorId                          String?
  vendor                            Vendor?
  
  createdRequisitions               PurchaseRequisition[] @relation("Requester")
  approvedRequisitions              PurchaseRequisition[] @relation("Approver")
  currentApprovals                  PurchaseRequisition[] @relation("CurrentApprover")
  
  financialCommitteeForRequisitions PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommitteeForRequisitions PurchaseRequisition[] @relation("TechnicalCommitteeMembers")

  committeeAssignments              CommitteeAssignment[]

  auditLogs                         AuditLog[]
  goodsReceipts                     GoodsReceiptNote[]
  
  scores                            CommitteeScoreSet[]
  reviews                           Review[]

  @@index([departmentId])
  @@index([managerId])
}

model Department {
  id            String  @id @default(cuid())
  name          String  @unique
  description   String?
  
  // Relations
  headId        String?  @unique
  head          User?    @relation("DepartmentHead", fields: [headId], references: [id])
  users         User[]
  requisitions  PurchaseRequisition[]
}

model PurchaseRequisition {
  id                          String    @id @default(cuid())
  transactionId               String?   @unique
  title                       String
  justification               String
  status                      String
  urgency                     String?
  totalPrice                  Float
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  approverComment             String?
  purchaseOrderId             String?   @unique
  deadline                    DateTime?
  scoringDeadline             DateTime?
  awardResponseDeadline       DateTime?
  awardResponseDurationMinutes Int?
  allowedVendorIds            String[]
  awardedQuoteItemIds         String[]
  committeeName               String?
  committeePurpose            String?
  cpoAmount                   Float?
  rfqSettings                 Json?

  // Relations
  requesterId                 String
  requester                   User      @relation("Requester", fields: [requesterId], references: [id])

  departmentId                String?
  department                  Department? @relation(fields: [departmentId], references: [id])

  approverId                  String?
  approver                    User?     @relation("Approver", fields: [approverId], references: [id])

  currentApproverId           String?
  currentApprover             User?     @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  
  items                       RequisitionItem[]
  customQuestions             CustomQuestion[]
  evaluationCriteria          EvaluationCriteria?
  quotations                  Quotation[]
  po                          PurchaseOrder?
  
  financialCommitteeMembers   User[]    @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers   User[]    @relation("TechnicalCommitteeMembers")
  committeeAssignments        CommitteeAssignment[]

  contracts                   Contract[]
  reviews                     Review[]

  @@index([requesterId])
  @@index([departmentId])
  @@index([approverId])
  @@index([currentApproverId])
  @@index([purchaseOrderId])
}

model Role {
    id          String @id @default(cuid())
    name        String @unique
    description String?
}


model CommitteeAssignment {
  userId        String
  requisitionId String
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  scoresSubmitted Boolean @default(false)
  assignedAt    DateTime @default(now())

  @@id([userId, requisitionId])
}

model RequisitionItem {
  id              String      @id @default(cuid())
  name            String
  quantity        Int
  unitPrice       Float
  description     String?
  
  // Relations
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  
  quoteItems      QuoteItem[]
  poItems         POItem[] @relation("PORequisitionItem")

  @@index([requisitionId])
}

model CustomQuestion {
    id              String      @id @default(cuid())
    questionText    String
    questionType    String
    isRequired      Boolean     @default(false)
    options         String[]
    
    // Relations
    requisitionId   String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    
    answers         QuoteAnswer[]

    @@index([requisitionId])
}

model EvaluationCriteria {
    id                  String      @id @default(cuid())
    financialWeight     Int
    technicalWeight     Int

    // Relations
    requisitionId       String      @unique
    requisition         PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    financialCriteria   FinancialCriterion[]
    technicalCriteria   TechnicalCriterion[]
}

model FinancialCriterion {
    id                      String      @id @default(cuid())
    name                    String
    weight                  Int

    // Relations
    evaluationCriteriaId    String
    evaluationCriteria      EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
    scores                  FinancialScore[]

    @@index([evaluationCriteriaId])
}

model TechnicalCriterion {
    id                      String      @id @default(cuid())
    name                    String
    weight                  Int

    // Relations
    evaluationCriteriaId    String
    evaluationCriteria      EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
    scores                  TechnicalScore[]
    
    @@index([evaluationCriteriaId])
}

model Quotation {
    id                  String      @id @default(cuid())
    transactionId       String?
    vendorName          String
    totalPrice          Float
    deliveryDate        DateTime
    status              String
    notes               String?
    rank                Int?
    finalAverageScore   Float?
    cpoDocumentUrl      String?
    experienceDocumentUrl String?
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt

    // Relations
    requisitionId       String
    requisition         PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)

    vendorId            String
    vendor              Vendor @relation(fields: [vendorId], references: [id])
    
    items               QuoteItem[]
    answers             QuoteAnswer[]
    scores              CommitteeScoreSet[]
    
    @@index([requisitionId])
    @@index([vendorId])
}

model QuoteItem {
    id                  String      @id @default(cuid())
    name                String
    quantity            Int
    unitPrice           Float
    leadTimeDays        Int
    brandDetails        String?

    // Relations
    requisitionItemId   String
    requisitionItem     RequisitionItem @relation(fields: [requisitionItemId], references: [id])
    
    quotationId         String
    quotation           Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)

    scores              ItemScore[]

    @@index([requisitionItemId])
    @@index([quotationId])
}

model QuoteAnswer {
    id              String      @id @default(cuid())
    answer          String

    // Relations
    questionId      String
    question        CustomQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

    quotationId     String
    quotation       Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)

    @@index([questionId])
    @@index([quotationId])
}

model CommitteeScoreSet {
    id                  String      @id @default(cuid())
    scorerName          String
    committeeComment    String?
    finalScore          Float
    submittedAt         DateTime    @default(now())

    // Relations
    quotationId         String
    quotation           Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
    
    scorerId            String
    scorer              User        @relation(fields: [scorerId], references: [id])
    
    itemScores          ItemScore[]
    
    @@unique([quotationId, scorerId])
    @@index([scorerId])
}

model ItemScore {
    id                      String      @id @default(cuid())
    finalScore              Float

    // Relations
    scoreSetId              String
    scoreSet                CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
    
    quoteItemId             String
    quoteItem               QuoteItem @relation(fields: [quoteItemId], references: [id])
    
    financialScores         FinancialScore[]
    technicalScores         TechnicalScore[]

    @@index([scoreSetId])
    @@index([quoteItemId])
}

model FinancialScore {
    id              String      @id @default(cuid())
    score           Int
    comment         String?

    // Relations
    criterionId     String
    criterion       FinancialCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
    itemScoreId     String
    itemScore       ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)

    @@index([criterionId])
    @@index([itemScoreId])
}

model TechnicalScore {
    id              String      @id @default(cuid())
    score           Int
    comment         String?

    // Relations
    criterionId     String
    criterion       TechnicalCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
    itemScoreId     String
    itemScore       ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)

    @@index([criterionId])
    @@index([itemScoreId])
}

model PurchaseOrder {
  id                String      @id @default(cuid())
  transactionId     String?
  requisitionTitle  String
  totalAmount       Float
  status            String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  notes             String?

  // Relations
  requisitionId     String              @unique
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendorId          String
  vendor            Vendor              @relation(fields: [vendorId], references: [id])
  
  items             POItem[]
  receipts          GoodsReceiptNote[]
  invoices          Invoice[]

  @@index([vendorId])
}

model POItem {
    id                  String      @id @default(cuid())
    name                String
    quantity            Int
    unitPrice           Float
    totalPrice          Float
    receivedQuantity    Int

    // Relations
    poId                String
    purchaseOrder       PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)
    
    requisitionItemId   String
    requisitionItem     RequisitionItem @relation("PORequisitionItem", fields: [requisitionItemId], references: [id])
    
    receiptItems        ReceiptItem[]

    @@index([poId])
    @@index([requisitionItemId])
}

model GoodsReceiptNote {
    id                  String      @id @default(cuid())
    transactionId       String?
    receivedDate        DateTime    @default(now())
    
    // Relations
    purchaseOrderId     String
    purchaseOrder       PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
    receivedById        String
    receivedBy          User @relation(fields: [receivedById], references: [id])

    items               ReceiptItem[]

    @@index([purchaseOrderId])
    @@index([receivedById])
}

model ReceiptItem {
    id                  String      @id @default(cuid())
    quantityReceived    Int
    condition           String
    notes               String?
    
    // Relations
    goodsReceiptNoteId  String
    goodsReceiptNote    GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
    
    poItemId            String
    poItem              POItem @relation(fields: [poItemId], references: [id])

    @@index([goodsReceiptNoteId])
    @@index([poItemId])
}

model Invoice {
    id                  String      @id @default(cuid())
    transactionId       String?
    invoiceDate         DateTime
    totalAmount         Float
    status              String
    documentUrl         String?
    paymentDate         DateTime?
    paymentReference    String?
    
    // Relations
    purchaseOrderId     String
    po                  PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
    
    vendorId            String
    vendor              Vendor @relation(fields: [vendorId], references: [id])
    
    items               InvoiceItem[]

    @@index([purchaseOrderId])
    @@index([vendorId])
}

model InvoiceItem {
    id              String      @id @default(cuid())
    name            String
    quantity        Int
    unitPrice       Float
    totalPrice      Float
    
    // Relations
    invoiceId       String
    invoice         Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

    @@index([invoiceId])
}

model Vendor {
  id            String      @id @default(cuid())
  name          String
  contactPerson String
  email         String      @unique
  phone         String
  address       String
  kycStatus     String
  rejectionReason String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  userId          String?     @unique
  user            User?       @relation(fields: [userId], references: [id])

  kycDocuments    KYC_Document[]
  quotations      Quotation[]
  purchaseOrders  PurchaseOrder[]
  invoices        Invoice[]
  contracts       Contract[]
}

model KYC_Document {
    id          String      @id @default(cuid())
    name        String      // e.g. Business License, Tax ID
    url         String
    submittedAt DateTime
    
    // Relations
    vendorId    String
    vendor      Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

    @@index([vendorId])
}

model Contract {
    id              String      @id @default(cuid())
    contractNumber  String      @unique @default(cuid())
    startDate       DateTime
    endDate         DateTime
    filePath        String?
    status          String
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    // Relations
    requisitionId   String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    vendorId        String
    vendor          Vendor              @relation(fields: [vendorId], references: [id])

    @@index([requisitionId])
    @@index([vendorId])
}

model Review {
  id              String      @id @default(cuid())
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  reviewerId      String
  reviewer        User        @relation(fields: [reviewerId], references: [id])
  committeeType   String      // "Committee A" or "Committee B"
  decision        String      // "Approved", "Rejected"
  comment         String?
  createdAt       DateTime    @default(now())

  @@unique([requisitionId, reviewerId])
  @@index([reviewerId])
}

model AuditLog {
  id              String      @id @default(cuid())
  timestamp       DateTime
  action          String
  entity          String
  entityId        String
  details         String
  transactionId   String?

  // Relations
  userId          String?
  user            User?       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([transactionId])
}
