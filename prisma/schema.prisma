
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                  @id @default(cuid())
  name                 String
  email                String                  @unique
  password             String
  role                 UserRole
  vendorId             String?                 @unique
  departmentId         String?
  vendor               Vendor?
  department           Department?             @relation(fields: [departmentId], references: [id])
  createdRequisitions  PurchaseRequisition[]   @relation("Requester")
  approvedRequisitions PurchaseRequisition[]   @relation("Approver")
  goodsReceipts        GoodsReceiptNote[]
  scores               CommitteeScoreSet[]
  auditLogs            AuditLog[]
  financialCommitteeOn PurchaseRequisition[]   @relation("FinancialCommittee")
  technicalCommitteeOn PurchaseRequisition[]   @relation("TechnicalCommittee")
  committeeAssignments CommitteeAssignment[]
}

model Department {
  id          String                @id @default(cuid())
  name        String                @unique
  users       User[]
  requisitions PurchaseRequisition[]
}

model Vendor {
  id             String            @id @default(cuid())
  name           String
  contactPerson  String
  email          String            @unique
  phone          String
  address        String
  kycStatus      KycStatus         @default(Pending)
  rejectionReason String?
  user           User              @relation(fields: [userId], references: [id])
  userId         String            @unique
  kycDocuments   KYC_Document[]
  quotations     Quotation[]
  purchaseOrders PurchaseOrder[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  name        String
  url         String
  submittedAt DateTime @default(now())
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  vendorId    String
}

model PurchaseRequisition {
  id                             String                   @id @default(cuid())
  requester                      User                     @relation("Requester", fields: [requesterId], references: [id])
  requesterId                    String
  requesterName                  String
  title                          String
  departmentId                   String?
  department                     Department?              @relation(fields: [departmentId], references: [id])
  items                          RequisitionItem[]
  totalPrice                     Float
  justification                  String
  status                         RequisitionStatus        @default(Draft)
  createdAt                      DateTime                 @default(now())
  updatedAt                      DateTime                 @updatedAt
  approver                       User?                    @relation("Approver", fields: [approverId], references: [id])
  approverId                     String?
  approverComment                String?
  contract                       Json?
  negotiationNotes               String?
  purchaseOrder                  PurchaseOrder?
  purchaseOrderId                String?                  @unique
  allowedVendorIds               String[]
  customQuestions                CustomQuestion[]
  deadline                       DateTime?
  scoringDeadline                DateTime?
  awardResponseDeadline          DateTime?
  awardResponseDurationMinutes Int?
  evaluationCriteria             EvaluationCriteria?
  financialCommitteeMembers      User[]                   @relation("FinancialCommittee")
  technicalCommitteeMembers      User[]                   @relation("TechnicalCommittee")
  committeeName                  String?
  committeePurpose               String?
  cpoAmount                      Float?
  quotations                     Quotation[]
  committeeAssignments           CommitteeAssignment[]
}

model RequisitionItem {
  id            String              @id @default(cuid())
  name          String
  description   String?
  quantity      Int
  unitPrice     Float
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId String
}

model CustomQuestion {
  id            String              @id @default(cuid())
  questionText  String
  questionType  QuestionType
  options       String[]
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId String
  answers       QuoteAnswer[]
}

model EvaluationCriteria {
  id                String                 @id @default(cuid())
  requisition       PurchaseRequisition    @relation(fields: [requisitionId], references: [id])
  requisitionId     String                 @unique
  financialWeight   Float
  technicalWeight   Float
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String               @id @default(cuid())
  name                 String
  weight               Float
  evaluationCriteria   EvaluationCriteria   @relation(fields: [evaluationCriteriaId], references: [id])
  evaluationCriteriaId String
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String               @id @default(cuid())
  name                 String
  weight               Float
  evaluationCriteria   EvaluationCriteria   @relation(fields: [evaluationCriteriaId], references: [id])
  evaluationCriteriaId String
  scores               TechnicalScore[]
}

model Quotation {
  id                String              @id @default(cuid())
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId     String
  vendor            Vendor              @relation(fields: [vendorId], references: [id])
  vendorId          String
  vendorName        String
  items             QuoteItem[]
  totalPrice        Float
  deliveryDate      DateTime
  createdAt         DateTime            @default(now())
  status            QuotationStatus     @default(Submitted)
  notes             String?
  rank              Int?
  answers           QuoteAnswer[]
  scores            CommitteeScoreSet[]
  finalAverageScore Float?
  cpoDocumentUrl    String?
}

model QuoteItem {
  id                String    @id @default(cuid())
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  quotation         Quotation @relation(fields: [quotationId], references: [id])
  quotationId       String
}

model QuoteAnswer {
  id          String         @id @default(cuid())
  quotation   Quotation      @relation(fields: [quotationId], references: [id])
  quotationId String
  question    CustomQuestion @relation(fields: [questionId], references: [id])
  questionId  String
  answer      String
}

model CommitteeScoreSet {
  id               String           @id @default(cuid())
  quotation        Quotation        @relation(fields: [quotationId], references: [id])
  quotationId      String
  scorer           User             @relation(fields: [scorerId], references: [id])
  scorerId         String
  scorerName       String
  financialScores  FinancialScore[]
  technicalScores  TechnicalScore[]
  finalScore       Float
  committeeComment String?
  submittedAt      DateTime         @default(now())
}

model FinancialScore {
  id                String            @id @default(cuid())
  criterion         FinancialCriterion @relation(fields: [criterionId], references: [id])
  criterionId       String
  score             Float
  comment           String?
  committeeScoreSet CommitteeScoreSet @relation(fields: [committeeScoreSetId], references: [id])
  committeeScoreSetId String
}

model TechnicalScore {
  id                String            @id @default(cuid())
  criterion         TechnicalCriterion @relation(fields: [criterionId], references: [id])
  criterionId       String
  score             Float
  comment           String?
  committeeScoreSet CommitteeScoreSet @relation(fields: [committeeScoreSetId], references: [id])
  committeeScoreSetId String
}

model PurchaseOrder {
  id               String               @id @default(cuid())
  requisition      PurchaseRequisition  @relation(fields: [requisitionId], references: [id])
  requisitionId    String               @unique
  requisitionTitle String
  vendor           Vendor               @relation(fields: [vendorId], references: [id])
  vendorId         String
  items            POItem[]
  totalAmount      Float
  status           PurchaseOrderStatus  @default(Issued)
  createdAt        DateTime             @default(now())
  contract         Json?
  notes            String?
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id                String             @id @default(cuid())
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int                @default(0)
  purchaseOrder     PurchaseOrder      @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId   String
  receiptItems      ReceiptItem[]
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedById    String
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]
  photos          Json?
}

model ReceiptItem {
  id               String           @id @default(cuid())
  poItem           POItem           @relation(fields: [poItemId], references: [id])
  poItemId         String
  quantityReceived Int
  condition        ReceiptItemCondition
  notes            String?
  goodsReceiptNote GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id])
  goodsReceiptNoteId String
}

model Invoice {
  id               String        @id @default(cuid())
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId  String
  vendorId         String
  invoiceDate      DateTime
  items            InvoiceItem[]
  totalAmount      Float
  status           InvoiceStatus @default(Pending)
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
}

model InvoiceItem {
  id          String  @id @default(cuid())
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId   String
}

model AuditLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  role      UserRole
  action    String
  entity    String
  entityId  String
  details   String
}

model CommitteeAssignment {
  id              String              @id @default(cuid())
  user            User                @relation(fields: [userId], references: [id])
  userId          String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId   String
  scoresSubmitted Boolean             @default(false)
}

enum UserRole {
  Requester
  Approver
  Procurement_Officer @map("Procurement Officer")
  Finance
  Admin
  Receiving
  Vendor
  Committee_Member @map("Committee Member")
  Committee
}

enum RequisitionStatus {
  Draft
  Pending_Approval @map("Pending Approval")
  Approved
  Rejected
  RFQ_In_Progress @map("RFQ In Progress")
  PO_Created @map("PO Created")
  Fulfilled
  Closed
}

enum KycStatus {
  Pending
  Verified
  Rejected
}

enum QuotationStatus {
  Submitted
  Awarded
  Rejected
  Standby
  Invoice_Submitted @map("Invoice Submitted")
  Failed
  Accepted
  Declined
}

enum PurchaseOrderStatus {
  Issued
  Acknowledged
  Shipped
  Partially_Delivered @map("Partially Delivered")
  Delivered
  Cancelled
  Matched
  Mismatched
  On_Hold @map("On Hold")
}

enum ReceiptItemCondition {
  Good
  Damaged
  Incorrect
}

enum InvoiceStatus {
  Pending
  Approved_for_Payment @map("Approved for Payment")
  Paid
  Disputed
}

enum QuestionType {
  text
  boolean
  multiple_choice @map("multiple-choice")
}
