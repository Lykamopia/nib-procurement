// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                @id @default(cuid())
  name                      String
  email                     String                @unique
  password                  String
  role                      String
  departmentId              String?
  vendorId                  String?               @unique
  approvalLimit             Float?
  managerId                 String?
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime              @updatedAt
  department                Department?           @relation("UsersInDepartment", fields: [departmentId], references: [id])
  vendor                    Vendor?
  headedDepartment          Department?           @relation("DepartmentHead")
  manager                   User?                 @relation("ManagerSubordinates", fields: [managerId], references: [id])
  subordinates              User[]                @relation("ManagerSubordinates")
  createdRequisitions       PurchaseRequisition[] @relation("Requester")
  approvedRequisitions      PurchaseRequisition[] @relation("Approver")
  currentApprovals          PurchaseRequisition[] @relation("CurrentApprover")
  receipts                  GoodsReceiptNote[]
  reviews                   Review[]
  financialCommitteeOn      PurchaseRequisition[] @relation("FinancialCommittee")
  technicalCommitteeOn      PurchaseRequisition[] @relation("TechnicalCommittee")
  committeeAssignments      CommitteeAssignment[]
  auditLogs                 AuditLog[]
  sentContracts             Contract[]
  committeeScores           CommitteeScoreSet[]
}

model Department {
  id          String                @id @default(cuid())
  name        String                @unique
  description String?
  headId      String?               @unique
  users       User[]                @relation("UsersInDepartment")
  head        User?                 @relation("DepartmentHead", fields: [headId], references: [id])
  requisitions PurchaseRequisition[]
}

model Role {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String
}

model PurchaseRequisition {
  id                           String                 @id @default(cuid())
  transactionId                String?
  title                        String
  justification                String
  urgency                      String
  totalPrice                   Float
  status                       String
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  requesterId                  String
  approverId                   String?
  currentApproverId            String?
  deadline                     DateTime?
  scoringDeadline              DateTime?
  awardResponseDeadline        DateTime?
  awardResponseDurationMinutes Int?
  purchaseOrderId              String?
  committeeName                String?
  committeePurpose             String?
  allowedVendorIds             String[]
  awardedQuoteItemIds          String[]
  cpoAmount                    Float?
  rfqSettings                  Json?
  approverComment              String?
  requester                    User                   @relation("Requester", fields: [requesterId], references: [id])
  approver                     User?                  @relation("Approver", fields: [approverId], references: [id])
  currentApprover              User?                  @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  departmentId                 String?
  department                   Department?            @relation(fields: [departmentId], references: [id])
  items                        RequisitionItem[]
  customQuestions              CustomQuestion[]
  evaluationCriteria           EvaluationCriteria?
  quotations                   Quotation[]
  contracts                    Contract[]
  purchaseOrders               PurchaseOrder[]
  reviews                      Review[]
  financialCommitteeMembers    User[]                 @relation("FinancialCommittee")
  technicalCommitteeMembers    User[]                 @relation("TechnicalCommittee")
  committeeAssignments         CommitteeAssignment[]
}

model RequisitionItem {
  id              String              @id @default(cuid())
  name            String
  quantity        Int
  unitPrice       Float
  description     String?
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  quoteItems      QuoteItem[]
  poItems         POItem[]
}

model CustomQuestion {
  id            String              @id @default(cuid())
  questionText  String
  questionType  String
  isRequired    Boolean             @default(false)
  options       String[]
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  answers       QuoteAnswer[]
}

model EvaluationCriteria {
  id                String                 @id @default(cuid())
  requisitionId     String                 @unique
  requisition       PurchaseRequisition    @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  financialWeight   Int
  technicalWeight   Int
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                 String
  weight               Int
  scores               Score[]
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                 String
  weight               Int
  scores               Score[]
}

model Quotation {
  id                    String              @id @default(cuid())
  transactionId         String?
  requisitionId         String
  vendorId              String
  vendorName            String
  totalPrice            Float
  deliveryDate          DateTime
  status                String
  notes                 String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  rank                  Int?
  finalAverageScore     Float?
  cpoDocumentUrl        String?
  experienceDocumentUrl String?
  requisition           PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  vendor                Vendor              @relation(fields: [vendorId], references: [id])
  items                 QuoteItem[]
  answers               QuoteAnswer[]
  scores                CommitteeScoreSet[]
}

model QuoteItem {
  id                String    @id @default(cuid())
  requisitionItemId String
  quotationId       String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  quotation         Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  itemScores        ItemScore[]
}

model QuoteAnswer {
  id          String    @id @default(cuid())
  questionId  String
  answer      String
  quotationId String
  question    CustomQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  quotation   Quotation      @relation(fields: [quotationId], references: [id], onDelete: Cascade)
}

model PurchaseOrder {
  id               String           @id @default(cuid())
  transactionId    String?
  requisitionId    String
  requisitionTitle String
  vendorId         String
  totalAmount      Float
  status           String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor           Vendor           @relation(fields: [vendorId], references: [id])
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id                String    @id @default(cuid())
  requisitionItemId String
  purchaseOrderId   String
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int       @default(0)
  purchaseOrder     PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  receiptItems      ReceiptItem[]
}

model GoodsReceiptNote {
  id              String      @id @default(cuid())
  transactionId   String?
  purchaseOrderId String
  receivedById    String
  receivedDate    DateTime    @default(now())
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedBy      User        @relation(fields: [receivedById], references: [id])
  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNoteId String
  poItemId           String
  quantityReceived   Int
  condition          String
  notes              String?
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  poItem             POItem           @relation(fields: [poItemId], references: [id])
}

model Invoice {
  id                String        @id @default(cuid())
  transactionId     String?
  purchaseOrderId   String
  vendorId          String
  invoiceDate       DateTime
  totalAmount       Float
  status            String
  documentUrl       String?
  paymentDate       DateTime?
  paymentReference  String?
  items             InvoiceItem[]
  po                PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
}

model InvoiceItem {
  id        String  @id @default(cuid())
  invoiceId String
  name      String
  quantity  Int
  unitPrice Float
  totalPrice Float
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Vendor {
  id              String      @id @default(cuid())
  name            String
  contactPerson   String
  email           String      @unique
  phone           String
  address         String
  kycStatus       String
  rejectionReason String?
  userId          String      @unique
  user            User        @relation(fields: [userId], references: [id])
  quotations      Quotation[]
  purchaseOrders  PurchaseOrder[]
  kycDocuments    KYC_Document[]
  contracts       Contract[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendorId    String
  name        String
  url         String
  submittedAt DateTime @default(now())
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model Contract {
  id              String    @id @default(cuid())
  contractNumber  String    @unique @default(cuid())
  requisitionId   String
  vendorId        String
  filePath        String?
  startDate       DateTime
  endDate         DateTime
  status          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor          Vendor    @relation(fields: [vendorId], references: [id])
}

model Review {
    id            String   @id @default(cuid())
    requisitionId String
    reviewerId    String
    committeeType String
    decision      String
    comment       String?
    createdAt     DateTime @default(now())
    requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    reviewer      User                @relation(fields: [reviewerId], references: [id])
}

model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime  @default(now())
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String
  user          User?     @relation(fields: [userId], references: [id])
}

model CommitteeAssignment {
  id              String   @id @default(cuid())
  userId          String
  requisitionId   String
  scoresSubmitted Boolean  @default(false)
  user            User     @relation(fields: [userId], references: [id])
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])

  @@unique([userId, requisitionId])
}

model CommitteeScoreSet {
    id String @id @default(cuid())
    quotationId String
    scorerId String
    scorerName String
    finalScore Float
    committeeComment String?
    submittedAt DateTime @default(now())
    quotation Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
    scorer User @relation(fields: [scorerId], references: [id])
    itemScores ItemScore[]

    @@unique([quotationId, scorerId])
}

model ItemScore {
    id String @id @default(cuid())
    scoreSetId String
    quoteItemId String
    finalScore Float
    scoreSet CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
    quoteItem QuoteItem @relation(fields: [quoteItemId], references: [id])
    financialScores Score[] @relation("Financial")
    technicalScores Score[] @relation("Technical")
}

model Score {
    id String @id @default(cuid())
    itemScoreId String?
    criterionId String
    score Int
    comment String?
    financialItemScore ItemScore? @relation("Financial", fields: [itemScoreId], references: [id])
    technicalItemScore ItemScore? @relation("Technical", fields: [itemScoreId], references: [id])
    financialCriterion FinancialCriterion? @relation(fields: [criterionId], references: [id])
    technicalCriterion TechnicalCriterion? @relation(fields: [criterionId], references: [id])
}
