// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(cuid())
  name                String
  email               String                @unique
  password            String
  role                UserRole
  vendorId            String?               @unique
  vendor              Vendor?               @relation(fields: [vendorId], references: [id])
  departmentId        String?
  department          Department?           @relation(fields: [departmentId], references: [id])
  createdRequisitions PurchaseRequisition[] @relation("Requester")
  approvedRequisitions PurchaseRequisition[] @relation("Approver")
  goodsReceipts       GoodsReceiptNote[]    @relation("Receiver")
  scores              CommitteeScoreSet[]   @relation("Scorer")
  auditLogs           AuditLog[]
  financialCommitteeOn PurchaseRequisition[] @relation("FinancialCommittee")
  technicalCommitteeOn PurchaseRequisition[] @relation("TechnicalCommittee")
  committeeAssignments CommitteeAssignment[]
}

model Department {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model Vendor {
  id              String      @id @default(cuid())
  name            String
  contactPerson   String
  email           String      @unique
  phone           String
  address         String
  kycStatus       KycStatus
  rejectionReason String?
  user            User?
  kycDocuments    KYC_Document[]
  quotations      Quotation[]
  purchaseOrders  PurchaseOrder[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  name        String
  url         String
  submittedAt DateTime @default(now())
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  vendorId    String
}

model PurchaseRequisition {
  id                            String      @id @default(cuid())
  title                         String
  justification                 String
  status                        RequisitionStatus
  createdAt                     DateTime    @default(now())
  updatedAt                     DateTime    @updatedAt
  requesterId                   String
  requester                     User        @relation("Requester", fields: [requesterId], references: [id])
  approverId                    String?
  approver                      User?       @relation("Approver", fields: [approverId], references: [id])
  departmentId                  String?
  department                    Department? @relation(fields: [departmentId], references: [id])
  items                         RequisitionItem[]
  customQuestions               CustomQuestion[]
  evaluationCriteria          EvaluationCriteria?
  deadline                      DateTime?
  scoringDeadline               DateTime?
  awardResponseDeadline         DateTime?
  awardResponseDurationMinutes  Int?
  cpoAmount                     Float?
  allowedVendorIds              String[]
  purchaseOrderId               String?     @unique
  purchaseOrder                 PurchaseOrder?
  financialCommitteeMembers     User[]      @relation("FinancialCommittee")
  technicalCommitteeMembers     User[]      @relation("TechnicalCommittee")
  negotiationNotes              String?
  contractFileName              String?
  contractUploadDate            DateTime?
  quotations                    Quotation[]
}

model RequisitionItem {
  id            String              @id @default(cuid())
  name          String
  description   String?
  quantity      Int
  unitPrice     Float?
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId String
}

model CustomQuestion {
  id            String              @id @default(cuid())
  questionText  String
  questionType  QuestionType
  options       String[]
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId String
  answers       QuoteAnswer[]
}

model EvaluationCriteria {
  id                String                @id @default(cuid())
  requisitionId     String                @unique
  requisition       PurchaseRequisition   @relation(fields: [requisitionId], references: [id])
  financialWeight   Int
  technicalWeight   Int
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  name                 String
  weight               Int
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  name                 String
  weight               Int
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  scores               TechnicalScore[]
}

model Quotation {
  id                String            @id @default(cuid())
  requisitionId     String
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendorId          String
  vendor            Vendor            @relation(fields: [vendorId], references: [id])
  vendorName        String
  totalPrice        Float
  deliveryDate      DateTime
  createdAt         DateTime          @default(now())
  status            QuotationStatus
  notes             String?
  rank              Int?
  cpoDocumentUrl    String?
  items             QuoteItem[]
  answers           QuoteAnswer[]
  scores            CommitteeScoreSet[]
  finalAverageScore Float?
}

model QuoteItem {
  id                String    @id @default(cuid())
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  quotation         Quotation @relation(fields: [quotationId], references: [id])
  quotationId       String
}

model QuoteAnswer {
  id           String         @id @default(cuid())
  questionId   String
  question     CustomQuestion @relation(fields: [questionId], references: [id])
  answer       String
  quotation    Quotation      @relation(fields: [quotationId], references: [id])
  quotationId  String
}

model CommitteeScoreSet {
  id               String           @id @default(cuid())
  quotationId      String
  quotation        Quotation        @relation(fields: [quotationId], references: [id])
  scorerId         String
  scorer           User             @relation("Scorer", fields: [scorerId], references: [id])
  scorerName       String
  finalScore       Float
  committeeComment String?
  submittedAt      DateTime         @default(now())
  financialScores  FinancialScore[]
  technicalScores  TechnicalScore[]
}

model FinancialScore {
  id                String             @id @default(cuid())
  criterionId       String
  criterion         FinancialCriterion @relation(fields: [criterionId], references: [id])
  score             Int
  comment           String?
  committeeScoreSet   CommitteeScoreSet  @relation(fields: [committeeScoreSetId], references: [id])
  committeeScoreSetId String
}

model TechnicalScore {
  id                String             @id @default(cuid())
  criterionId       String
  criterion         TechnicalCriterion @relation(fields: [criterionId], references: [id])
  score             Int
  comment           String?
  committeeScoreSet   CommitteeScoreSet  @relation(fields: [committeeScoreSetId], references: [id])
  committeeScoreSetId String
}

model PurchaseOrder {
  id               String                @id @default(cuid())
  requisitionId    String                @unique
  requisition      PurchaseRequisition   @relation(fields: [requisitionId], references: [id])
  vendorId         String
  vendor           Vendor                @relation(fields: [vendorId], references: [id])
  totalAmount      Float
  status           PurchaseOrderStatus
  createdAt        DateTime              @default(now())
  items            POItem[]
  goodsReceipts    GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id              String         @id @default(cuid())
  name            String
  quantity        Int
  unitPrice       Float
  totalPrice      Float
  receivedQuantity Int           @default(0)
  purchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String?
  receiptItems    ReceiptItem[]
}

model GoodsReceiptNote {
  id           String        @id @default(cuid())
  purchaseOrderId String
  purchaseOrder  PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedById String
  receivedBy   User          @relation("Receiver", fields: [receivedById], references: [id])
  receivedDate DateTime      @default(now())
  items        ReceiptItem[]
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  poItemId           String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  quantityReceived   Int
  condition          ReceiptCondition
  notes              String?
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id])
  goodsReceiptNoteId String
}

model Invoice {
  id               String        @id @default(cuid())
  purchaseOrderId  String
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  invoiceDate      DateTime
  totalAmount      Float
  status           InvoiceStatus
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  items            InvoiceItem[]
}

model InvoiceItem {
  id        String  @id @default(cuid())
  name      String
  quantity  Int
  unitPrice Float
  totalPrice Float
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId String
}

model AuditLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  role      UserRole
  action    String
  entity    String
  entityId  String
  details   String
}

model CommitteeAssignment {
  id              String @id @default(cuid())
  userId          String
  user            User   @relation(fields: [userId], references: [id])
  requisitionId   String
  scoresSubmitted Boolean @default(false)
}

enum UserRole {
  Requester
  Approver
  Procurement_Officer @map("Procurement Officer")
  Finance
  Admin
  Receiving
  Vendor
  Committee_Member @map("Committee Member")
  Committee
}

enum KycStatus {
  Pending
  Verified
  Rejected
}

enum RequisitionStatus {
  Draft
  Pending_Approval @map("Pending Approval")
  Approved
  Rejected
  RFQ_In_Progress @map("RFQ In Progress")
  PO_Created @map("PO Created")
  Fulfilled
  Closed
}

enum QuestionType {
  text
  boolean
  multiple_choice
}

enum QuotationStatus {
  Submitted
  Awarded
  Rejected
  Standby
  Invoice_Submitted @map("Invoice Submitted")
  Failed
  Accepted
  Declined
}

enum PurchaseOrderStatus {
  Issued
  Acknowledged
  Shipped
  Partially_Delivered @map("Partially Delivered")
  Delivered
  Cancelled
  Matched
  Mismatched
  On_Hold @map("On Hold")
}

enum ReceiptCondition {
  Good
  Damaged
  Incorrect
}

enum InvoiceStatus {
  Pending
  Approved_for_Payment @map("Approved for Payment")
  Paid
  Disputed
}
