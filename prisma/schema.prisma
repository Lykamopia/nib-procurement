
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------------------------------------
// Core Models
// --------------------------------------------------

model User {
  id                                String                      @id @default(cuid())
  name                              String
  email                             String                      @unique
  password                          String
  role                              String                      @default("Requester")
  approvalLimit                   Float?
  createdAt                         DateTime                    @default(now())
  updatedAt                         DateTime                    @updatedAt
  departmentId                      String?
  department                        Department?                 @relation(fields: [departmentId], references: [id])
  vendorId                          String?                     @unique
  vendor                            Vendor?                     @relation(fields: [vendorId], references: [id])
  managerId                         String?
  manager                           User?                       @relation("ManagerSubordinates", fields: [managerId], references: [id])
  subordinates                      User[]                      @relation("ManagerSubordinates")
  createdRequisitions               PurchaseRequisition[]       @relation("Requester")
  approvedRequisitions              PurchaseRequisition[]       @relation("Approver")
  currentApprovals                  PurchaseRequisition[]       @relation("CurrentApprover")
  sentContracts                     Contract[]
  receivedGoods                     GoodsReceiptNote[]
  audits                            AuditLog[]
  reviews                           Review[]
  scoredQuotes                      CommitteeScoreSet[]
  financialCommitteeOn              PurchaseRequisition[]       @relation("FinancialCommitteeMembers")
  technicalCommitteeOn              PurchaseRequisition[]       @relation("TechnicalCommitteeMembers")
  committeeAssignments              CommitteeAssignment[]
  DepartmentHeaded                  Department[]                @relation("DepartmentHead")

  @@map("users")
}


model Department {
  id           String                @id @default(cuid())
  name         String                @unique
  description  String?
  headId       String?               @unique
  head         User?                 @relation("DepartmentHead", fields: [headId], references: [id])
  users        User[]
  requisitions PurchaseRequisition[]

  @@map("departments")
}

model Vendor {
  id              String         @id @default(cuid())
  name            String
  contactPerson   String
  email           String         @unique
  phone           String
  address         String
  kycStatus       String         @default("Pending")
  rejectionReason String?
  userId          String         @unique
  user            User?
  kycDocuments    KYC_Document[]
  quotations      Quotation[]
  contracts       Contract[]
  purchaseOrders  PurchaseOrder[]

  @@map("vendors")
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  name        String
  url         String
  submittedAt DateTime @default(now())

  @@map("kyc_documents")
}

// --------------------------------------------------
// Procurement Workflow Models
// --------------------------------------------------

model PurchaseRequisition {
  id                  String       @id @default(cuid())
  transactionId       String?      @unique
  title               String
  justification       String
  status              String
  urgency             String
  totalPrice          Float
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  requesterId         String
  requester           User         @relation("Requester", fields: [requesterId], references: [id])
  departmentId        String
  department          Department   @relation(fields: [departmentId], references: [id])
  approverId          String?
  approver            User?        @relation("Approver", fields: [approverId], references: [id])
  currentApproverId   String?
  currentApprover     User?        @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  approverComment     String?
  purchaseOrderId     String?      @unique
  allowedVendorIds    String[]
  awardedQuoteItemIds String[]
  deadline            DateTime? // Vendor quote submission deadline
  scoringDeadline     DateTime? // Committee scoring deadline
  awardResponseDeadline DateTime?
  awardResponseDurationMinutes Int?

  items               RequisitionItem[]
  customQuestions     CustomQuestion[]
  evaluationCriteria  EvaluationCriteria?
  quotations          Quotation[]
  contracts           Contract[]
  purchaseOrders      PurchaseOrder[]
  reviews             Review[]
  
  financialCommitteeMembers User[] @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers User[] @relation("TechnicalCommitteeMembers")
  committeeAssignments      CommitteeAssignment[]

  committeeName     String?
  committeePurpose  String?
  cpoAmount         Float?
  rfqSettings       Json?

  @@map("purchase_requisitions")
}


model RequisitionItem {
  id            String              @id @default(cuid())
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  name          String
  description   String?
  quantity      Int
  unitPrice     Float

  @@map("requisition_items")
}

model CustomQuestion {
    id              String @id @default(cuid())
    requisitionId   String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    questionText    String
    questionType    String // "text", "boolean", "multiple_choice", "file"
    isRequired      Boolean
    options         String[]
    requisitionItemId String?
    answers         QuoteAnswer[]

    @@map("custom_questions")
}

model EvaluationCriteria {
    id                  String @id @default(cuid())
    requisitionId       String @unique
    requisition         PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    financialWeight     Float
    technicalWeight     Float
    financialCriteria   FinancialCriterion[]
    technicalCriteria   TechnicalCriterion[]
    
    @@map("evaluation_criteria")
}

model FinancialCriterion {
    id                      String @id @default(cuid())
    evaluationCriteriaId    String
    evaluationCriteria      EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
    name                    String
    weight                  Float
    
    @@map("financial_criteria")
}

model TechnicalCriterion {
    id                      String @id @default(cuid())
    evaluationCriteriaId    String
    evaluationCriteria      EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
    name                    String
    weight                  Float
    
    @@map("technical_criteria")
}

model Quotation {
    id                      String      @id @default(cuid())
    transactionId           String?
    requisitionId           String
    requisition             PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    vendorId                String
    vendor                  Vendor @relation(fields: [vendorId], references: [id])
    vendorName              String
    totalPrice              Float
    deliveryDate            DateTime
    status                  String      @default("Submitted")
    notes                   String?
    cpoDocumentUrl          String?
    experienceDocumentUrl   String?
    rank                    Int?        @unique
    createdAt               DateTime    @default(now())
    items                   QuoteItem[]
    answers                 QuoteAnswer[]
    scores                  CommitteeScoreSet[]
    finalAverageScore       Float?

    @@map("quotations")
}

model QuoteItem {
    id                  String @id @default(cuid())
    quotationId         String
    quotation           Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
    requisitionItemId   String
    name                String
    quantity            Int
    unitPrice           Float
    leadTimeDays        Int
    brandDetails        String?
    scores              ItemScore[]

    @@map("quote_items")
}

model QuoteAnswer {
    id          String      @id @default(cuid())
    quotationId String
    quotation   Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
    questionId  String
    question    CustomQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
    answer      String

    @@map("quote_answers")
}


model CommitteeAssignment {
  userId          String
  requisitionId   String
  scoresSubmitted Boolean @default(false)

  user        User        @relation(fields: [userId], references: [id])
  requisition PurchaseRequisition @relation(fields: [requisitionId], references: [id])

  @@id([userId, requisitionId])
  @@map("committee_assignments")
}

model CommitteeScoreSet {
    id                  String @id @default(cuid())
    quotationId         String
    quotation           Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
    scorerId            String
    scorer              User @relation(fields: [scorerId], references: [id])
    committeeComment    String?
    finalScore          Float
    submittedAt         DateTime @default(now())
    itemScores          ItemScore[]

    @@unique([quotationId, scorerId])
    @@map("committee_score_sets")
}

model ItemScore {
  id          String   @id @default(cuid())
  scoreSetId  String
  scoreSet    CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  quoteItemId String
  quoteItem   QuoteItem @relation(fields: [quoteItemId], references: [id], onDelete: Cascade)
  finalScore  Float
  scores      Score[]

  @@map("item_scores")
}

model Score {
    id              String @id @default(cuid())
    itemScoreId     String
    itemScore       ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
    criterionId     String
    score           Float
    comment         String?
    type            String // FINANCIAL or TECHNICAL

    @@map("scores")
}


model Review {
    id              String @id @default(cuid())
    requisitionId   String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    reviewerId      String
    reviewer        User @relation(fields: [reviewerId], references: [id])
    decision        String // "Approved", "Rejected"
    comment         String?
    createdAt       DateTime @default(now())
    
    committeeType   String // "Committee A" or "Committee B"

    @@map("reviews")
}


model PurchaseOrder {
    id              String @id @default(cuid())
    transactionId   String?
    requisitionId   String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    requisitionTitle String
    vendorId        String
    vendor          Vendor @relation(fields: [vendorId], references: [id])
    totalAmount     Float
    status          String @default("Issued")
    createdAt       DateTime @default(now())
    items           POItem[]
    receipts        GoodsReceiptNote[]
    invoices        Invoice[]

    @@map("purchase_orders")
}

model POItem {
    id                  String @id @default(cuid())
    purchaseOrderId     String
    purchaseOrder       PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
    requisitionItemId   String
    name                String
    quantity            Int
    unitPrice           Float
    totalPrice          Float
    receivedQuantity    Int @default(0)
    receiptItems        ReceiptItem[]

    @@map("po_items")
}

model GoodsReceiptNote {
    id              String      @id @default(cuid())
    transactionId   String?
    purchaseOrderId String
    purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
    receivedById    String
    receivedBy      User @relation(fields: [receivedById], references: [id])
    receivedDate    DateTime @default(now())
    items           ReceiptItem[]

    @@map("goods_receipt_notes")
}

model ReceiptItem {
    id                  String      @id @default(cuid())
    goodsReceiptNoteId  String
    goodsReceiptNote    GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
    poItemId            String
    poItem              POItem @relation(fields: [poItemId], references: [id])
    quantityReceived    Int
    condition           String // "Good", "Damaged", "Incorrect"
    notes               String?

    @@map("receipt_items")
}

model Invoice {
    id              String      @id @default(cuid())
    transactionId   String?
    purchaseOrderId String
    po              PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
    vendorId        String
    invoiceDate     DateTime
    totalAmount     Float
    status          String
    documentUrl     String?
    paymentDate     DateTime?
    paymentReference String?
    items           InvoiceItem[]

    @@map("invoices")
}

model InvoiceItem {
    id          String @id @default(cuid())
    invoiceId   String
    invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    name        String
    quantity    Int
    unitPrice   Float
    totalPrice  Float

    @@map("invoice_items")
}

model Contract {
    id              String @id @default(cuid())
    contractNumber  String @unique @default(cuid())
    requisitionId   String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    vendorId        String
    vendor          Vendor @relation(fields: [vendorId], references: [id])
    senderId        String
    sender          User   @relation(fields: [senderId], references: [id])
    startDate       DateTime
    endDate         DateTime
    filePath        String?
    status          String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    
    @@map("contracts")
}

// --------------------------------------------------
// System & Meta Models
// --------------------------------------------------
model AuditLog {
    id            String   @id @default(cuid())
    transactionId String?
    timestamp     DateTime @default(now())
    userId        String?
    user          User?    @relation(fields: [userId], references: [id])
    action        String
    entity        String
    entityId      String
    details       String

    @@map("audit_logs")
}

model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value Json

  @@map("settings")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String

  @@map("roles")
}
