// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  name        String @id @unique
  description String?
  users       User[]
}

model User {
  id                                String                      @id @default(cuid())
  name                              String
  email                             String                      @unique
  password                          String
  departmentId                      String?
  vendorId                          String?                     @unique
  approvalLimit                     Float?
  managerId                         String?
  
  // Relations
  role                              Role                        @relation(fields: [roleName], references: [name])
  roleName                          String
  vendor                            Vendor?                     @relation(fields: [vendorId], references: [id])
  department                        Department?                 @relation("DepartmentMembers", fields: [departmentId], references: [id])
  manager                           User?                       @relation("ManagerSubordinates", fields: [managerId], references: [id])
  subordinates                      User[]                      @relation("ManagerSubordinates")
  requisitions                      PurchaseRequisition[]       @relation("Requester")
  approvalsGiven                    Approval[]                  @relation("Approver")
  headedDepartment                  Department?                 @relation("DepartmentHead")
  auditLogs                         AuditLog[]
  committeeAssignments              CommitteeAssignment[]
  scoresGiven                       CommitteeScoreSet[]
  receipts                          GoodsReceiptNote[]
  recommendations                   CommitteeRecommendation[]

  financialCommitteesRequisitions RequisitionFinancialCommittee[]
  technicalCommitteesRequisitions RequisitionTechnicalCommittee[]
  
  approvingRequisitions PurchaseRequisition[] @relation("CurrentApprover")
  approverFor       PurchaseRequisition[] @relation("FinalApprover")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vendor {
  id            String        @id @default(cuid())
  name          String
  contactPerson String
  email         String        @unique
  phone         String
  address       String
  kycStatus     String        @default("Pending") // Pending, Verified, Rejected
  rejectionReason String?
  userId        String        @unique
  user          User          @relation(fields: [userId], references: [id])
  quotations    Quotation[]
  kycDocuments  KYC_Document[]
  purchaseOrders PurchaseOrder[]
  contracts     Contract[]
}

model Department {
  id           String                @id @default(cuid())
  name         String                @unique
  description  String?
  headId       String?               @unique
  head         User?                 @relation("DepartmentHead", fields: [headId], references: [id])
  requisitions PurchaseRequisition[]
  users        User[]                @relation("DepartmentMembers")
}

model PurchaseRequisition {
  id                   String   @id @default(cuid())
  title                String
  justification        String
  requesterName        String
  status               String   @default("Draft")
  urgency              String   @default("Low")
  totalPrice           Float
  transactionId        String?  @unique
  approverComment      String?
  negotiationNotes     String?
  committeeName        String?
  committeePurpose     String?
  cpoAmount            Float?
  rfqSettings          Json?
  deadline             DateTime?
  scoringDeadline      DateTime?
  awardResponseDeadline DateTime?
  awardResponseDurationMinutes Int?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Foreign Keys
  requesterId     String
  departmentId    String?
  approverId      String?
  currentApproverId String?
  purchaseOrderId String?  @unique

  // Relations
  requester       User         @relation("Requester", fields: [requesterId], references: [id])
  department      Department?  @relation(fields: [departmentId], references: [id])
  approver        User?        @relation("FinalApprover", fields: [approverId], references: [id])
  currentApprover User?        @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  purchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])

  // One-to-Many
  items          RequisitionItem[]
  customQuestions CustomQuestion[]
  quotations      Quotation[]
  contracts       Contract[]
  recommendations CommitteeRecommendation[]
  approvals       Approval[]
  committeeAssignments CommitteeAssignment[]

  // Many-to-Many
  financialCommitteeMembers   RequisitionFinancialCommittee[]
  technicalCommitteeMembers   RequisitionTechnicalCommittee[]
  allowedVendorIds            String[]
  awardedQuoteItemIds         String[]
}


model RequisitionItem {
  id            String              @id @default(cuid())
  name          String
  quantity      Int
  unitPrice     Float?
  description   String?
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  quoteItems    QuoteItem[]
  poItems       POItem[]
}

model CustomQuestion {
  id              String              @id @default(cuid())
  questionText    String
  questionType    String // text, boolean, multiple-choice, file
  isRequired      Boolean             @default(false)
  options         String[]
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  answers         QuoteAnswer[]
}

model EvaluationCriteria {
  id                String                 @id @default(cuid())
  financialWeight   Int
  technicalWeight   Int
  requisitionId     String                 @unique
  requisition       PurchaseRequisition    @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  name                 String
  weight               Int
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  name                 String
  weight               Int
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  scores               TechnicalScore[]
}

model Quotation {
  id                    String              @id @default(cuid())
  vendorName            String
  totalPrice            Float
  deliveryDate          DateTime
  status                String              @default("Submitted")
  notes                 String?
  rank                  Int?
  finalAverageScore     Float?
  cpoDocumentUrl        String?
  experienceDocumentUrl String?
  transactionId         String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  // Foreign Keys
  requisitionId String
  vendorId      String

  // Relations
  requisition PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  vendor      Vendor              @relation(fields: [vendorId], references: [id])
  items       QuoteItem[]
  answers     QuoteAnswer[]
  scores      CommitteeScoreSet[]
}

model QuoteItem {
  id                String    @id @default(cuid())
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  quotationId       String
  requisitionItemId String
  quotation         Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  itemScores        ItemScore[]
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
}

model QuoteAnswer {
  id          String    @id @default(cuid())
  answer      String
  questionId  String
  quotationId String
  question    CustomQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  quotation   Quotation      @relation(fields: [quotationId], references: [id], onDelete: Cascade)
}

model PurchaseOrder {
  id               String      @id @default(cuid())
  requisitionTitle String
  totalAmount      Float
  status           String      @default("Issued")
  notes            String?
  transactionId    String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  
  // Foreign Keys
  requisitionId String   @unique
  vendorId      String

  // Relations
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  
  items    POItem[]
  receipts GoodsReceiptNote[]
  invoices Invoice[]
}

model POItem {
  id                String @id @default(cuid())
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int    @default(0)
  purchaseOrderId   String
  requisitionItemId String
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  receiptItems      ReceiptItem[]
}

model GoodsReceiptNote {
  id              String      @id @default(cuid())
  receivedDate    DateTime    @default(now())
  transactionId   String?
  purchaseOrderId String
  receivedById    String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  quantityReceived   Int
  condition          String
  notes              String?
  goodsReceiptNoteId String
  poItemId           String
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  poItem             POItem           @relation(fields: [poItemId], references: [id])
}

model Invoice {
  id               String        @id @default(cuid())
  invoiceDate      DateTime
  totalAmount      Float
  status           String        @default("Pending")
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  transactionId    String?
  purchaseOrderId  String
  vendorId         String
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  items            InvoiceItem[]
}

model InvoiceItem {
  id          String  @id @default(cuid())
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model KYC_Document {
    id          String   @id @default(cuid())
    name        String
    url         String
    submittedAt DateTime
    vendorId    String
    vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model Contract {
    id              String      @id @default(cuid())
    contractNumber  String      @default(cuid())
    startDate       DateTime
    endDate         DateTime
    filePath        String?
    status          String      @default("Draft")
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    
    requisitionId   String
    vendorId        String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    vendor          Vendor              @relation(fields: [vendorId], references: [id])
}

model AuditLog {
  id            String   @id @default(cuid())
  timestamp     DateTime
  action        String
  entity        String
  entityId      String
  details       String
  transactionId String?
  
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
}

model CommitteeScoreSet {
    id              String @id @default(cuid())
    finalScore      Float
    committeeComment String?
    submittedAt    DateTime @default(now())
    
    quotationId     String
    scorerId        String
    quotation       Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
    scorer          User        @relation(fields: [scorerId], references: [id])
    
    itemScores      ItemScore[]
}

model ItemScore {
    id              String @id @default(cuid())
    finalScore      Float
    
    scoreSetId      String
    quoteItemId     String
    scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
    quoteItem       QuoteItem @relation(fields: [quoteItemId], references: [id])

    financialScores FinancialScore[]
    technicalScores TechnicalScore[]
}

model FinancialScore {
    id              String @id @default(cuid())
    score           Int
    comment         String?
    
    itemScoreId     String
    criterionId     String
    itemScore       ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
    criterion       FinancialCriterion @relation(fields: [criterionId], references: [id])
}

model TechnicalScore {
    id              String @id @default(cuid())
    score           Int
    comment         String?
    
    itemScoreId     String
    criterionId     String
    itemScore       ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
    criterion       TechnicalCriterion @relation(fields: [criterionId], references: [id])
}

model CommitteeAssignment {
    userId          String
    requisitionId   String
    scoresSubmitted Boolean @default(false)
    
    user            User                @relation(fields: [userId], references: [id])
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])

    @@id([userId, requisitionId])
}

model CommitteeRecommendation {
    id              String      @id @default(cuid())
    recommendation  String // "Recommend for Approval" or "Request Changes"
    comment         String?
    committeeRole   String
    createdAt       DateTime    @default(now())

    requisitionId   String
    userId          String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    user            User                @relation(fields: [userId], references: [id])
}

model Approval {
    id              String      @id @default(cuid())
    decision        String // "Approved", "Rejected", "Escalated"
    comment         String?
    createdAt       DateTime    @default(now())

    requisitionId   String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])

    approverId      String
    approver        User                @relation(fields: [approverId], references: [id])
}

// Implicit many-to-many join tables for committee members

model RequisitionFinancialCommittee {
    requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    requisitionId String
    user          User                @relation(fields: [userId], references: [id])
    userId        String

    @@id([requisitionId, userId])
}

model RequisitionTechnicalCommittee {
    requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    requisitionId String
    user          User                @relation(fields: [userId], references: [id])
    userId        String

    @@id([requisitionId, userId])
}
