// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                @id @default(cuid())
  name                    String
  email                   String                @unique
  password                String
  role                    UserRole
  department              Department?           @relation(fields: [departmentId], references: [id])
  departmentId            String?
  vendor                  Vendor?               @relation(fields: [vendorId], references: [id])
  vendorId                String?               @unique
  requisitionsAsRequester PurchaseRequisition[] @relation("RequesterRequisitions")
  requisitionsAsApprover  PurchaseRequisition[] @relation("ApproverRequisitions")
  createdContracts        Contract[]
  receivedGoods           GoodsReceiptNote[]
  financialCommitteeOn    PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommitteeOn    PurchaseRequisition[] @relation("TechnicalCommitteeMembers")
  committeeAssignments    CommitteeAssignment[]
  auditLogs               AuditLog[]
  scoreSets               CommitteeScoreSet[]
}

model Department {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model Vendor {
  id            String         @id @default(cuid())
  name          String
  contactPerson String
  email         String         @unique
  phone         String
  address       String
  kycStatus     KYCStatus
  rejectionReason String?
  user          User?
  userId        String         @unique
  quotations    Quotation[]
  purchaseOrder PurchaseOrder[]
  contracts     Contract[]
  kycDocuments  KYC_Document[]
  createdAt     DateTime       @default(now())
}

model KYC_Document {
  id         String   @id @default(cuid())
  vendor     Vendor   @relation(fields: [vendorId], references: [id])
  vendorId   String
  name       String
  url        String
  submittedAt DateTime
}

model PurchaseRequisition {
  id                           String          @id @default(cuid())
  transactionId                String?         @unique
  requester                    User            @relation("RequesterRequisitions", fields: [requesterId], references: [id])
  requesterId                  String
  requesterName                String
  title                        String
  justification                String
  department                   Department?     @relation(fields: [departmentId], references: [id])
  departmentId                 String?
  status                       RequisitionStatus
  totalPrice                   Float
  items                        RequisitionItem[]
  customQuestions              CustomQuestion[]
  evaluationCriteria           EvaluationCriteria?
  createdAt                    DateTime        @default(now())
  updatedAt                    DateTime        @updatedAt
  approver                     User?           @relation("ApproverRequisitions", fields: [approverId], references: [id])
  approverId                   String?
  approverComment              String?
  quotations                   Quotation[]
  purchaseOrder                PurchaseOrder?
  purchaseOrderId              String?         @unique
  allowedVendorIds             String[]
  deadline                     DateTime?
  scoringDeadline              DateTime?
  awardResponseDeadline        DateTime?
  awardResponseDurationMinutes Int?
  cpoAmount                    Float?
  financialCommitteeMembers    User[]          @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers    User[]          @relation("TechnicalCommitteeMembers")
  committeeName                String?
  committeePurpose             String?
  rfqSettings                  Json?
  contract                     Contract?       @relation(fields: [contractId], references: [id])
  contractId                   String?         @unique
}

model RequisitionItem {
  id            String            @id @default(cuid())
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId String
  name          String
  description   String?
  quantity      Int
  unitPrice     Float
  quoteItems    QuoteItem[]
  purchaseOrder POItem?
}

model CustomQuestion {
  id              String            @id @default(cuid())
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId   String
  questionText    String
  questionType    String
  isRequired      Boolean           @default(false)
  options         String[]
  requisitionItemId String?
  answers         QuoteAnswer[]
}

model EvaluationCriteria {
  id                String               @id @default(cuid())
  requisition       PurchaseRequisition  @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId     String               @unique
  financialWeight   Int
  technicalWeight   Int
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String           @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Int
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String           @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Int
  scores               TechnicalScore[]
}

model Quotation {
  id                String              @id @default(cuid())
  transactionId     String?
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId     String
  vendor            Vendor              @relation(fields: [vendorId], references: [id])
  vendorId          String
  vendorName        String
  items             QuoteItem[]
  totalPrice        Float
  deliveryDate      DateTime
  status            QuotationStatus
  notes             String?
  rank              Int?
  finalAverageScore Float?
  cpoDocumentUrl    String?
  createdAt         DateTime            @default(now())
  answers           QuoteAnswer[]
  scores            CommitteeScoreSet[]
}

model QuoteItem {
  id                String      @id @default(cuid())
  quotation         Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId       String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  itemScores        ItemScore[]
}

model QuoteAnswer {
  id          String   @id @default(cuid())
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId String
  question    CustomQuestion @relation(fields: [questionId], references: [id])
  questionId  String
  answer      String
}

model CommitteeAssignment {
  user            User                @relation(fields: [userId], references: [id])
  userId          String
  requisitionId   String
  scoresSubmitted Boolean
  @@id([userId, requisitionId])
}

model CommitteeScoreSet {
  id               String           @id @default(cuid())
  quotation        Quotation        @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId      String
  scorer           User             @relation(fields: [scorerId], references: [id])
  scorerId         String
  scorerName       String
  committeeComment String?
  finalScore       Float
  submittedAt      DateTime         @default(now())
  itemScores       ItemScore[]
}

model ItemScore {
  id              String           @id @default(cuid())
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  scoreSetId      String
  quoteItem       QuoteItem        @relation(fields: [quoteItemId], references: [id])
  quoteItemId     String           @unique
  finalScore      Float
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
}

model FinancialScore {
  id              String             @id @default(cuid())
  itemScore       ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId     String
  criterion       FinancialCriterion @relation(fields: [criterionId], references: [id])
  criterionId     String
  score           Int
  comment         String?
}

model TechnicalScore {
  id              String             @id @default(cuid())
  itemScore       ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId     String
  criterion       TechnicalCriterion @relation(fields: [criterionId], references: [id])
  criterionId     String
  score           Int
  comment         String?
}


model PurchaseOrder {
  id               String             @id @default(cuid())
  transactionId    String?
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId    String             @unique
  requisitionTitle String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  vendorId         String
  items            POItem[]
  totalAmount      Float
  status           PurchaseOrderStatus
  notes            String?
  createdAt        DateTime           @default(now())
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id                String           @id @default(cuid())
  purchaseOrder     PurchaseOrder    @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  purchaseOrderId   String
  requisitionItem   RequisitionItem  @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId String           @unique
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int
  receipts          ReceiptItem[]
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedById    String
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  goodsReceiptNoteId String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  poItemId           String
  quantityReceived   Int
  condition          ReceiptCondition
  notes              String?
}

model Invoice {
  id               String       @id @default(cuid())
  transactionId    String?
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId  String
  vendorId         String
  invoiceDate      DateTime
  items            InvoiceItem[]
  totalAmount      Float
  status           InvoiceStatus
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
}

model InvoiceItem {
  id        String  @id @default(cuid())
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId String
  name      String
  quantity  Int
  unitPrice Float
  totalPrice Float
}

model Contract {
  id              String    @id @default(cuid())
  contractNumber  String    @default(cuid()) // Simplified: use cuid for contract number
  requisition     PurchaseRequisition?
  vendor          Vendor    @relation(fields: [vendorId], references: [id])
  vendorId        String
  startDate       DateTime
  endDate         DateTime
  filePath        String?
  status          String
  createdAt       DateTime  @default(now())
  createdBy       User      @relation(fields: [createdById], references: [id])
  createdById     String
}


model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String
}


enum UserRole {
  Requester
  Approver
  Procurement_Officer
  Finance
  Admin
  Receiving
  Vendor
  Committee_Member
  Committee
}

enum RequisitionStatus {
  Draft
  Pending_Approval
  Approved
  Rejected
  RFQ_In_Progress
  PO_Created
  Fulfilled
  Closed
}

enum KYCStatus {
  Pending
  Verified
  Rejected
}

enum QuotationStatus {
  Submitted
  Awarded
  Partially_Awarded
  Rejected
  Standby
  Invoice_Submitted
  Failed
  Accepted
  Declined
}

enum PurchaseOrderStatus {
  Issued
  Acknowledged
  Shipped
  Partially_Delivered
  Delivered
  Cancelled
  Matched
  Mismatched
  On_Hold
}

enum ReceiptCondition {
  Good
  Damaged
  Incorrect
}

enum InvoiceStatus {
  Pending
  Approved_for_Payment
  Paid
  Disputed
}
