// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================================================
// Core Models
// ==============================================================

model User {
  id              String            @id @default(cuid())
  name            String
  email           String            @unique
  password        String
  roleName        String
  role            Role              @relation(fields: [roleName], references: [name])
  departmentId    String?
  department      Department?       @relation(fields: [departmentId], references: [id])
  approvalLimit   Float?
  managerId       String?
  manager         User?             @relation("ManagerSubordinates", fields: [managerId], references: [id])
  subordinates    User[]            @relation("ManagerSubordinates")
  vendorId        String?           @unique
  vendor          Vendor?           @relation(fields: [vendorId], references: [id])
  createdReqs     PurchaseRequisition[] @relation("Requester")
  approvedReqs    PurchaseRequisition[] @relation("Approver")
  currentApprovals PurchaseRequisition[] @relation("CurrentApprover")
  assignedCommittees CommitteeAssignment[]
  scoredSets      CommitteeScoreSet[] @relation("Scorer")
  receivedNotes   GoodsReceiptNote[]
  auditLogs       AuditLog[]
  financialCommitteeForRequisitions PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommitteeForRequisitions PurchaseRequisition[] @relation("TechnicalCommitteeMembers")

  @@index([departmentId])
  @@index([managerId])
  @@index([vendorId])
}

model Department {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  headId      String?   @unique
  head        User?     @relation(fields: [headId], references: [id])
  users       User[]
}

model Role {
  name        String @id @unique
  description String?
  users       User[]
  createdAt   DateTime @default(now())
}

// ==============================================================
// Procurement Flow Models
// ==============================================================

model PurchaseRequisition {
  id              String   @id @default(cuid())
  transactionId   String?  @unique
  requesterId     String
  requester       User     @relation("Requester", fields: [requesterId], references: [id])
  requesterName   String
  departmentId    String?
  department      Department? @relation(fields: [departmentId], references: [id])
  title           String
  justification   String
  status          String   @default("Draft") // Draft, Pending_Approval, Approved, Rejected, RFQ_In_Progress, PO_Created, Fulfilled, Closed, Pending_Managerial_Approval
  urgency         String   @default("Low")
  totalPrice      Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Approval Flow
  approverId      String?
  approver        User?    @relation("Approver", fields: [approverId], references: [id])
  approverComment String?
  currentApproverId String?
  currentApprover   User?    @relation("CurrentApprover", fields: [currentApproverId], references: [id])

  // RFQ and Award Flow
  allowedVendorIds      String[]
  awardedQuoteItemIds   String[]
  deadline              DateTime? // For vendor quote submission
  scoringDeadline       DateTime? // For committee scoring
  awardResponseDeadline DateTime? // For vendor to accept/reject award
  awardResponseDurationMinutes Int?
  cpoAmount             Float?
  rfqSettings           Json?

  // Items and Questions
  items           RequisitionItem[]
  customQuestions CustomQuestion[]

  // Committee and Evaluation
  evaluationCriteria        EvaluationCriteria?
  financialCommitteeMembers User[]                @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers User[]                @relation("TechnicalCommitteeMembers")
  committeeAssignments      CommitteeAssignment[]
  committeeName             String?
  committeePurpose          String?

  // Downstream Documents
  quotations      Quotation[]
  purchaseOrderId String?     @unique
  purchaseOrder   PurchaseOrder?
  contracts       Contract[]

  @@index([requesterId])
  @@index([departmentId])
  @@index([approverId])
  @@index([status])
}

model RequisitionItem {
  id            String          @id @default(cuid())
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  name          String
  description   String?
  quantity      Int
  unitPrice     Float
  quoteItems    QuoteItem[]
  poItems       POItem[]

  @@index([requisitionId])
}

model CustomQuestion {
  id              String            @id @default(cuid())
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  questionText    String
  questionType    String // text, boolean, multiple-choice, file
  isRequired      Boolean           @default(false)
  options         String[]
  answers         QuoteAnswer[]

  @@index([requisitionId])
}

model EvaluationCriteria {
  id                String                 @id @default(cuid())
  requisitionId     String                 @unique
  requisition       PurchaseRequisition    @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  financialWeight   Float
  technicalWeight   Float
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                 String
  weight               Float
  scores               FinancialScore[]

  @@index([evaluationCriteriaId])
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                 String
  weight               Float
  scores               TechnicalScore[]

  @@index([evaluationCriteriaId])
}

model CommitteeAssignment {
  userId          String
  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  scoresSubmitted Boolean @default(false)

  @@id([userId, requisitionId])
}

model Quotation {
  id              String   @id @default(cuid())
  transactionId   String?
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  vendorId        String
  vendor          Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorName      String
  totalPrice      Float
  deliveryDate    DateTime
  createdAt       DateTime @default(now())
  status          String // Submitted, Awarded, Partially_Awarded, Rejected, Standby, Invoice_Submitted, Failed, Accepted, Declined
  rank            Int?
  notes           String?
  finalAverageScore Float?
  cpoDocumentUrl    String?
  experienceDocumentUrl String?
  items           QuoteItem[]
  answers         QuoteAnswer[]
  scores          CommitteeScoreSet[]

  @@index([requisitionId])
  @@index([vendorId])
}

model QuoteItem {
  id                String      @id @default(cuid())
  quotationId       String
  quotation         Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  requisitionItemId String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id], onDelete: Restrict)
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  scores            ItemScore[]

  @@index([quotationId])
  @@index([requisitionItemId])
}

model QuoteAnswer {
  id          String   @id @default(cuid())
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  questionId  String
  question    CustomQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer      String

  @@index([quotationId])
  @@index([questionId])
}

model CommitteeScoreSet {
  id               String      @id @default(cuid())
  quotationId      String
  quotation        Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  scorerId         String
  scorer           User        @relation("Scorer", fields: [scorerId], references: [id], onDelete: Cascade)
  scorerName       String
  committeeComment String?
  finalScore       Float       @default(0)
  submittedAt      DateTime    @default(now())
  itemScores       ItemScore[]

  @@unique([quotationId, scorerId])
}

model ItemScore {
  id              String           @id @default(cuid())
  scoreSetId      String
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  quoteItemId     String
  quoteItem       QuoteItem        @relation(fields: [quoteItemId], references: [id], onDelete: Cascade)
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
  finalScore      Float

  @@unique([scoreSetId, quoteItemId])
}

model FinancialScore {
  id          String             @id @default(cuid())
  itemScoreId String
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  criterionId String
  criterion   FinancialCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  score       Float
  comment     String?

  @@index([itemScoreId])
}

model TechnicalScore {
  id          String             @id @default(cuid())
  itemScoreId String
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  criterionId String
  criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  score       Float
  comment     String?

  @@index([itemScoreId])
}

model PurchaseOrder {
  id               String    @id @default(cuid())
  transactionId    String?
  requisitionId    String    @unique
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionTitle String
  vendorId         String
  vendor           Vendor    @relation(fields: [vendorId], references: [id])
  totalAmount      Float
  status           String // Issued, Acknowledged, Shipped, Partially_Delivered, Delivered, Cancelled, Matched, Mismatched, On_Hold
  createdAt        DateTime  @default(now())
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]

  @@index([vendorId])
}

model POItem {
  id                String            @id @default(cuid())
  purchaseOrderId   String
  purchaseOrder     PurchaseOrder     @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  requisitionItemId String
  requisitionItem   RequisitionItem   @relation(fields: [requisitionItemId], references: [id])
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int               @default(0)
  receiptItems      ReceiptItem[]

  @@index([purchaseOrderId])
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedById    String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]

  @@index([purchaseOrderId])
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNoteId String
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  poItemId           String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  quantityReceived   Int
  condition          String // Good, Damaged, Incorrect
  notes              String?

  @@index([goodsReceiptNoteId])
}

model Invoice {
  id               String        @id @default(cuid())
  transactionId    String?
  purchaseOrderId  String
  po               PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  vendorId         String
  vendor           Vendor        @relation(fields: [vendorId], references: [id])
  invoiceDate      DateTime
  totalAmount      Float
  status           String // Pending, Approved_for_Payment, Paid, Disputed
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  items            InvoiceItem[]

  @@index([purchaseOrderId])
  @@index([vendorId])
}

model InvoiceItem {
  id        String  @id @default(cuid())
  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  name      String
  quantity  Int
  unitPrice Float
  totalPrice Float

  @@index([invoiceId])
}

model Vendor {
  id              String          @id @default(cuid())
  name            String
  contactPerson   String
  email           String          @unique
  phone           String
  address         String
  kycStatus       String          @default("Pending") // Pending, Verified, Rejected
  rejectionReason String?
  userId          String          @unique
  user            User?
  quotations      Quotation[]
  purchaseOrders  PurchaseOrder[]
  kycDocuments    KYC_Document[]
  invoices        Invoice[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  name        String // e.g., 'Business License', 'Tax ID'
  url         String
  submittedAt DateTime @default(now())

  @@index([vendorId])
}

model AuditLog {
  id            String   @id @default(cuid())
  transactionId String?
  timestamp     DateTime @default(now())
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
  action        String
  entity        String
  entityId      String
  details       String

  @@index([userId])
  @@index([transactionId])
  @@index([entity, entityId])
}

model Contract {
  id              String              @id @default(cuid())
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId   String
  vendor          Vendor              @relation(fields: [vendorId], references: [id])
  vendorId        String
  contractNumber  String              @unique @default(cuid())
  startDate       DateTime
  endDate         DateTime
  status          String // Draft, Active, Expired
  filePath        String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@index([requisitionId])
  @@index([vendorId])
}
