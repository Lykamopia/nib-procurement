
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                @id @default(uuid())
  name                    String
  email                   String                @unique
  password                String
  role                    UserRole
  departmentId            String?
  vendorId                String?               @unique
  approvalLimit           Float?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  managerId               String?
  manager                 User?                 @relation("ManagerSubordinate", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates            User[]                @relation("ManagerSubordinate")
  department              Department?           @relation("DepartmentUsers", fields: [departmentId], references: [id])
  headedDepartment        Department?           @relation("DepartmentHead")
  vendor                  Vendor?
  createdRequisitions     PurchaseRequisition[] @relation("Requester")
  approvedRequisitions    PurchaseRequisition[] @relation("Approver")
  currentApprovals        PurchaseRequisition[] @relation("CurrentApprover")
  auditLogs               AuditLog[]
  goodsReceipts           GoodsReceiptNote[]
  financialCommitteeOn    PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommitteeOn    PurchaseRequisition[] @relation("TechnicalCommitteeMembers")
  committeeAssignments    CommitteeAssignment[]
  scores                  CommitteeScoreSet[]
}

model Department {
  id          String                @id @default(uuid())
  name        String                @unique
  description String?
  headId      String?               @unique
  head        User?                 @relation("DepartmentHead", fields: [headId], references: [id])
  users       User[]                @relation("DepartmentUsers")
  requisitions PurchaseRequisition[]
}

model Vendor {
  id              String                @id @default(uuid())
  name            String
  contactPerson   String
  email           String                @unique
  phone           String
  address         String
  kycStatus       KycStatus
  rejectionReason String?
  userId          String                @unique
  user            User                  @relation(fields: [userId], references: [id])
  kycDocuments    KYC_Document[]
  quotations      Quotation[]
  purchaseOrders  PurchaseOrder[]
  contracts       Contract[]
}

model KYC_Document {
  id          String   @id @default(uuid())
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  name        String
  url         String
  submittedAt DateTime
}

model PurchaseRequisition {
  id                         String                @id @default(uuid())
  transactionId              String?
  requesterId                String
  requesterName              String
  requester                  User                  @relation("Requester", fields: [requesterId], references: [id])
  departmentId               String?
  department                 Department?           @relation(fields: [departmentId], references: [id])
  title                      String
  justification              String
  status                     RequisitionStatus
  totalPrice                 Float
  urgency                    UrgencyLevel
  createdAt                  DateTime              @default(now())
  updatedAt                  DateTime              @updatedAt
  approverId                 String?
  approver                   User?                 @relation("Approver", fields: [approverId], references: [id])
  approverComment            String?
  currentApproverId          String?
  currentApprover            User?                 @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  purchaseOrderId            String?               @unique
  purchaseOrder              PurchaseOrder?
  deadline                   DateTime?
  awardResponseDeadline      DateTime?
  awardResponseDurationMinutes Int?
  scoringDeadline            DateTime?
  committeeName              String?
  committeePurpose           String?
  cpoAmount                  Float?
  committeeRecommendation    String?
  items                      RequisitionItem[]
  customQuestions            CustomQuestion[]
  evaluationCriteria         EvaluationCriteria?
  quotations                 Quotation[]
  contracts                  Contract[]
  allowedVendorIds           String[]
  awardedQuoteItemIds        String[]
  rfqSettings                Json?
  financialCommitteeMembers  User[]                @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers  User[]                @relation("TechnicalCommitteeMembers")
  committeeAssignments       CommitteeAssignment[]
}

model RequisitionItem {
  id            String             @id @default(uuid())
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  name          String
  quantity      Int
  unitPrice     Float
  description   String?
  quoteItems    QuoteItem[]
  poItems       POItem[]
}

model CustomQuestion {
  id                String             @id @default(uuid())
  requisitionId     String
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  questionText      String
  questionType      QuestionType
  isRequired        Boolean            @default(false)
  options           String[]
  requisitionItemId String?
  answers           QuoteAnswer[]
}

model EvaluationCriteria {
  id                String                @id @default(uuid())
  requisitionId     String                @unique
  requisition       PurchaseRequisition   @relation(fields: [requisitionId], references: [id])
  financialWeight   Int
  technicalWeight   Int
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(uuid())
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  name                 String
  weight               Int
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String             @id @default(uuid())
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  name                 String
  weight               Int
  scores               TechnicalScore[]
}

model Quotation {
  id                    String              @id @default(uuid())
  transactionId         String?
  requisitionId         String
  requisition           PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendorId              String
  vendor                Vendor              @relation(fields: [vendorId], references: [id])
  vendorName            String
  totalPrice            Float
  deliveryDate          DateTime
  status                QuotationStatus
  notes                 String?
  rank                  Int?
  cpoDocumentUrl        String?
  experienceDocumentUrl String?
  finalAverageScore     Float?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  items                 QuoteItem[]
  answers               QuoteAnswer[]
  scores                CommitteeScoreSet[]
}

model QuoteItem {
  id                String    @id @default(uuid())
  quotationId       String
  quotation         Quotation @relation(fields: [quotationId], references: [id])
  requisitionItemId String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  itemScores        ItemScore[]
}

model QuoteAnswer {
  id          String         @id @default(uuid())
  quotationId String
  quotation   Quotation      @relation(fields: [quotationId], references: [id])
  questionId  String
  question    CustomQuestion @relation(fields: [questionId], references: [id])
  answer      String
}

model CommitteeAssignment {
  userId          String
  requisitionId   String
  scoresSubmitted Boolean @default(false)
  user            User    @relation(fields: [userId], references: [id])
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])

  @@id([userId, requisitionId])
}

model CommitteeScoreSet {
  id               String      @id @default(uuid())
  quotationId      String
  quotation        Quotation   @relation(fields: [quotationId], references: [id])
  scorerId         String
  scorer           User        @relation(fields: [scorerId], references: [id])
  scorerName       String
  finalScore       Float
  committeeComment String?
  submittedAt      DateTime    @default(now())
  itemScores       ItemScore[]
}

model ItemScore {
  id              String            @id @default(uuid())
  scoreSetId      String
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id])
  quoteItemId     String
  quoteItem       QuoteItem         @relation(fields: [quoteItemId], references: [id])
  finalScore      Float
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
}

model FinancialScore {
  id          String           @id @default(uuid())
  itemScoreId String
  itemScore   ItemScore        @relation(fields: [itemScoreId], references: [id])
  criterionId String
  criterion   FinancialCriterion @relation(fields: [criterionId], references: [id])
  score       Int
  comment     String?
}

model TechnicalScore {
  id          String           @id @default(uuid())
  itemScoreId String
  itemScore   ItemScore        @relation(fields: [itemScoreId], references: [id])
  criterionId String
  criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id])
  score       Int
  comment     String?
}

model PurchaseOrder {
  id               String             @id @default(uuid())
  transactionId    String?
  requisitionId    String             @unique
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionTitle String
  vendorId         String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  totalAmount      Float
  status           PurchaseOrderStatus
  createdAt        DateTime           @default(now())
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id               String           @id @default(uuid())
  purchaseOrderId  String
  purchaseOrder    PurchaseOrder    @relation(fields: [purchaseOrderId], references: [id])
  requisitionItemId String
  requisitionItem  RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  name             String
  quantity         Int
  unitPrice        Float
  totalPrice       Float
  receivedQuantity Int              @default(0)
  receiptItems     ReceiptItem[]
}

model GoodsReceiptNote {
  id              String        @id @default(uuid())
  transactionId   String?
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedById    String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String           @id @default(uuid())
  goodsReceiptNoteId String
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id])
  poItemId           String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  quantityReceived   Int
  condition          ReceiptCondition
  notes              String?
}

model Invoice {
  id               String       @id @default(uuid())
  transactionId    String?
  purchaseOrderId  String
  po               PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  vendorId         String
  invoiceDate      DateTime
  totalAmount      Float
  status           InvoiceStatus
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  items            InvoiceItem[]
}

model InvoiceItem {
  id         String  @id @default(uuid())
  invoiceId  String
  invoice    Invoice @relation(fields: [invoiceId], references: [id])
  name       String
  quantity   Int
  unitPrice  Float
  totalPrice Float
}

model Contract {
  id              String              @id @default(uuid())
  contractNumber  String              @unique @default(cuid())
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendorId        String
  vendor          Vendor              @relation(fields: [vendorId], references: [id])
  startDate       DateTime
  endDate         DateTime
  filePath        String?
  status          ContractStatus
  createdAt       DateTime            @default(now())
}

model AuditLog {
  id            String   @id @default(uuid())
  transactionId String?
  timestamp     DateTime @default(now())
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
  action        String
  entity        String
  entityId      String
  details       String
}

model Role {
    id String @id @default(uuid())
    name String @unique
    description String
}

enum UserRole {
  Requester
  Approver
  Procurement_Officer
  Finance
  Admin
  Receiving
  Vendor
  Committee_Member
  Committee
  Committee_A_Member
  Committee_B_Member
}

enum RequisitionStatus {
  Draft
  Pending_Approval
  Approved
  Rejected
  RFQ_In_Progress
  PO_Created
  Fulfilled
  Closed
  Pending_Managerial_Approval
  Pending_Committee_B_Review
  Pending_Committee_A_Recommendation
  Pending_Final_Approval
}

enum UrgencyLevel {
  Low
  Medium
  High
  Critical
}

enum KycStatus {
  Pending
  Verified
  Rejected
}

enum QuotationStatus {
  Submitted
  Awarded
  Partially_Awarded
  Rejected
  Standby
  Invoice_Submitted
  Failed
  Accepted
  Declined
}

enum PurchaseOrderStatus {
  Issued
  Acknowledged
  Shipped
  Partially_Delivered
  Delivered
  Cancelled
  Matched
  Mismatched
  On_Hold
}

enum ReceiptCondition {
  Good
  Damaged
  Incorrect
}

enum InvoiceStatus {
  Pending
  Approved_for_Payment
  Paid
  Disputed
}

enum ContractStatus {
  Draft
  Active
  Expired
  Terminated
}

enum QuestionType {
  text
  boolean
  multiple_choice
  file
}

    