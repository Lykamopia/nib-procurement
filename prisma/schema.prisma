
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String                  @id @default(cuid())
  name                    String
  email                   String                  @unique
  password                String
  approvalLimit           Float?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  
  role                    Role                    @relation(fields: [roleName], references: [name])
  roleName                UserRole
  
  department              Department?             @relation(fields: [departmentId], references: [id])
  departmentId            String?

  manager                 User?                   @relation("ManagerSubordinate", fields: [managerId], references: [id])
  managerId               String?
  subordinates            User[]                  @relation("ManagerSubordinate")

  vendor                  Vendor?
  
  createdRequisitions     PurchaseRequisition[]   @relation("Requester")
  approvedRequisitions    PurchaseRequisition[]   @relation("Approver")
  currentApprovals        PurchaseRequisition[]   @relation("CurrentApprover")
  
  financialCommittees     PurchaseRequisition[]   @relation("FinancialCommittee")
  technicalCommittees     PurchaseRequisition[]   @relation("TechnicalCommittee")

  committeeAssignments    CommitteeAssignment[]

  createdContracts        Contract[]
  scoredQuotes            CommitteeScoreSet[]
  receivedGoods           GoodsReceiptNote[]
  auditLogs               AuditLog[]
}

model Department {
  id           String                @id @default(cuid())
  name         String                @unique
  users        User[]
  requisitions PurchaseRequisition[]
}

model Role {
  name        UserRole           @id @unique
  permissions PermissionsOnRoles[]
  users       User[]
}

model Permission {
  id      String   @id @default(cuid())
  action  PermissionAction
  subject PermissionSubject
  roles   PermissionsOnRoles[]

  @@unique([action, subject])
}

model PermissionsOnRoles {
  role         Role       @relation(fields: [roleName], references: [name])
  roleName     UserRole
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  @@id([roleName, permissionId])
}


model PurchaseRequisition {
  id                          String    @id @default(cuid())
  transactionId               String?   @unique
  title                       String
  justification               String
  status                      RequisitionStatus @default(Draft)
  totalPrice                  Float
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  
  department                  Department? @relation(fields: [departmentId], references: [id])
  departmentId                String?

  requester                   User      @relation("Requester", fields: [requesterId], references: [id])
  requesterId                 String
  requesterName               String // Denormalized for convenience

  approver                    User?     @relation("Approver", fields: [approverId], references: [id])
  approverId                  String?
  approverComment             String?

  currentApprover             User?     @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  currentApproverId           String?
  
  items                       RequisitionItem[]
  quotations                  Quotation[]
  customQuestions             CustomQuestion[]

  evaluationCriteria          EvaluationCriteria?

  financialCommitteeMembers   User[]                  @relation("FinancialCommittee")
  technicalCommitteeMembers   User[]                  @relation("TechnicalCommittee")
  committeeAssignments        CommitteeAssignment[]

  committeeName               String?
  committeePurpose            String?

  purchaseOrder               PurchaseOrder?
  purchaseOrderId             String?

  contract                    Contract?

  allowedVendorIds            String[]  @default([])
  awardedQuoteItemIds         String[]  @default([])

  deadline                    DateTime?
  scoringDeadline             DateTime?
  awardResponseDeadline       DateTime?
  awardResponseDurationMinutes Int?
  
  cpoAmount                   Float?
  rfqSettings                 Json?
}

model CommitteeAssignment {
  user              User                @relation(fields: [userId], references: [id])
  userId            String
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId     String
  scoresSubmitted   Boolean             @default(false)

  @@id([userId, requisitionId])
}

model RequisitionItem {
  id            String              @id @default(cuid())
  name          String
  description   String?
  quantity      Int
  unitPrice     Float
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId String
  
  quoteItems    QuoteItem[]
  poItems       POItem[]
}

model CustomQuestion {
  id              String              @id @default(cuid())
  questionText    String
  questionType    QuestionType
  isRequired      Boolean             @default(true)
  options         String[]
  
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId   String
  answers         QuoteAnswer[]
}

model EvaluationCriteria {
  id                String                @id @default(cuid())
  requisition       PurchaseRequisition   @relation(fields: [requisitionId], references: [id])
  requisitionId     String                @unique
  financialWeight   Int
  technicalWeight   Int
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  name                 String
  weight               Int
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  evaluationCriteriaId String
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  name                 String
  weight               Int
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  evaluationCriteriaId String
  scores               TechnicalScore[]
}

model Quotation {
  id                  String              @id @default(cuid())
  transactionId       String?
  requisition         PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId       String
  vendor              Vendor              @relation(fields: [vendorId], references: [id])
  vendorId            String
  vendorName          String
  totalPrice          Float
  deliveryDate        DateTime
  status              QuotationStatus
  notes               String?
  createdAt           DateTime            @default(now())
  rank                Int?
  finalAverageScore   Float?
  cpoDocumentUrl      String?
  experienceDocumentUrl String?
  items               QuoteItem[]
  answers             QuoteAnswer[]
  scores              CommitteeScoreSet[]
}

model QuoteItem {
  id                  String    @id @default(cuid())
  quotation           Quotation @relation(fields: [quotationId], references: [id])
  quotationId         String
  requisitionItem     RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId   String
  name                String
  quantity            Int
  unitPrice           Float
  leadTimeDays        Int
  brandDetails        String?
  scores              ItemScore[]
}

model QuoteAnswer {
  id          String         @id @default(cuid())
  quotation   Quotation      @relation(fields: [quotationId], references: [id])
  quotationId String
  question    CustomQuestion @relation(fields: [questionId], references: [id])
  questionId  String
  answer      String
}

model CommitteeScoreSet {
  id               String      @id @default(cuid())
  quotation        Quotation   @relation(fields: [quotationId], references: [id])
  quotationId      String
  scorer           User        @relation(fields: [scorerId], references: [id])
  scorerId         String
  scorerName       String
  finalScore       Float
  committeeComment String?
  submittedAt      DateTime    @default(now())
  itemScores       ItemScore[]
}

model ItemScore {
  id              String            @id @default(cuid())
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id])
  scoreSetId      String
  quoteItem       QuoteItem         @relation(fields: [quoteItemId], references: [id])
  quoteItemId     String            @unique
  finalScore      Float
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
}

model FinancialScore {
  id          String             @id @default(cuid())
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id])
  itemScoreId String
  criterion   FinancialCriterion @relation(fields: [criterionId], references: [id])
  criterionId String
  score       Float
  comment     String?
}

model TechnicalScore {
  id          String             @id @default(cuid())
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id])
  itemScoreId String
  criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id])
  criterionId String
  score       Float
  comment     String?
}


model PurchaseOrder {
  id               String             @id @default(cuid())
  transactionId    String?
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId    String             @unique
  requisitionTitle String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  vendorId         String
  totalAmount      Float
  status           PurchaseOrderStatus
  createdAt        DateTime           @default(now())
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id                 String          @id @default(cuid())
  po                 PurchaseOrder   @relation(fields: [poId], references: [id])
  poId               String
  requisitionItem    RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId  String
  name               String
  quantity           Int
  unitPrice          Float
  totalPrice         Float
  receivedQuantity   Int             @default(0)
  receiptItems       ReceiptItem[]
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedById    String
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]
}

model ReceiptItem {
  id               String           @id @default(cuid())
  grn              GoodsReceiptNote @relation(fields: [grnId], references: [id])
  grnId            String
  poItem           POItem           @relation(fields: [poItemId], references: [id])
  poItemId         String
  quantityReceived Int
  condition        ReceiptCondition
  notes            String?
}

model Invoice {
  id                String        @id @default(cuid())
  transactionId     String?
  po                PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId   String
  vendor            Vendor        @relation(fields: [vendorId], references: [id])
  vendorId          String
  invoiceDate       DateTime
  totalAmount       Float
  status            InvoiceStatus
  documentUrl       String?
  paymentDate       DateTime?
  paymentReference  String?
  items             InvoiceItem[]
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId   String
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model Vendor {
  id              String      @id @default(cuid())
  name            String
  contactPerson   String
  email           String      @unique
  phone           String
  address         String
  user            User        @relation(fields: [userId], references: [id])
  userId          String      @unique
  kycStatus       KycStatus
  rejectionReason String?
  kycDocuments    KYC_Document[]
  quotations      Quotation[]
  purchaseOrders  PurchaseOrder[]
  invoices        Invoice[]
  contracts       Contract[]
}

model KYC_Document {
    id          String @id @default(cuid())
    vendor      Vendor @relation(fields: [vendorId], references: [id])
    vendorId    String
    name        String
    url         String
    submittedAt DateTime @default(now())
}


model Contract {
  id              String              @id @default(cuid())
  contractNumber  String              @default(cuid())
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId   String              @unique
  vendor          Vendor              @relation(fields: [vendorId], references: [id])
  vendorId        String
  startDate       DateTime
  endDate         DateTime
  status          String
  createdAt       DateTime            @default(now())

  createdBy       User                @relation(fields: [createdById], references: [id])
  createdById     String
}

model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime  @default(now())
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String
}

enum UserRole {
  Admin
  Procurement_Officer
  Requester
  Approver
  Finance
  Receiving
  Committee_Member
  Committee
  Vendor
}

enum PermissionAction {
  VIEW
  CREATE
  EDIT
  DELETE
  APPROVE
  REJECT
  SUBMIT
  VERIFY
  SEND
  MANAGE
  FINALIZE_SCORES
  SCORE
  SUBMIT_SCORES
  PROCESS
}

enum PermissionSubject {
  DASHBOARD
  REQUISITIONS
  APPROVALS
  VENDORS
  QUOTATIONS
  CONTRACTS
  PURCHASE_ORDERS
  INVOICES
  GOODS_RECEIPT
  RECORDS
  AUDIT_LOG
  SETTINGS
  REQUISITION
  VENDOR
  RFQ
  COMMITTEE
  CONTRACT
  PAYMENT
  PERMISSIONS
}


enum RequisitionStatus {
  Draft
  Pending_Approval
  Pending_Managerial_Approval
  Approved
  Rejected
  RFQ_In_Progress
  PO_Created
  Fulfilled
  Closed
}

enum QuotationStatus {
  Submitted
  Awarded
  Partially_Awarded
  Rejected
  Standby
  Invoice_Submitted
  Failed
  Accepted
  Declined
}

enum PurchaseOrderStatus {
  Issued
  Acknowledged
  Shipped
  Partially_Delivered
  Delivered
  Cancelled
  Matched
  Mismatched
  On_Hold
}

enum ReceiptCondition {
  Good
  Damaged
  Incorrect
}

enum InvoiceStatus {
  Pending
  Approved_for_Payment
  Paid
  Disputed
}

enum KycStatus {
    Pending
    Verified
    Rejected
}

enum QuestionType {
  text
  boolean
  multiple_choice
  file
}
