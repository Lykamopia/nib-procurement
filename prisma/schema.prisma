// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String
  users       User[]
}

model User {
  id                  String                @id @default(cuid())
  name                String
  email               String                @unique
  password            String
  role                String
  department          Department?           @relation(fields: [departmentId], references: [id])
  departmentId        String?
  vendor              Vendor?               @relation(fields: [vendorId], references: [id])
  vendorId            String?               @unique
  approvalLimit       Float?
  manager             User?                 @relation("ManagerSubordinates", fields: [managerId], references: [id])
  managerId           String?
  subordinates        User[]                @relation("ManagerSubordinates")
  createdRequisitions PurchaseRequisition[] @relation("Requester")
  approvedRequisitions PurchaseRequisition[] @relation("Approver")
  currentApprovals    PurchaseRequisition[] @relation("CurrentApprover")
  sentContracts       Contract[]            @relation("Sender")

  // For committee memberships
  financialCommitteeOn PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommitteeOn PurchaseRequisition[] @relation("TechnicalCommitteeMembers")
  committeeAssignments CommitteeAssignment[]

  auditLogs   AuditLog[]
  receipts    GoodsReceiptNote[]
  reviews     Review[]
  sentReviews Review[]           @relation("ReviewSender")
}

model Department {
  id           String                @id @default(cuid())
  name         String                @unique
  description  String?
  head         User?                 @relation(fields: [headId], references: [id])
  headId       String?               @unique
  users        User[]
  requisitions PurchaseRequisition[]
}

model PurchaseRequisition {
  id                             String                @id @default(cuid())
  transactionId                String?               @unique
  requester                      User                  @relation("Requester", fields: [requesterId], references: [id])
  requesterId                    String
  department                     Department            @relation(fields: [departmentId], references: [id])
  departmentId                   String
  approver                       User?                 @relation("Approver", fields: [approverId], references: [id])
  approverId                     String?
  approverComment                String?
  currentApprover                User?                 @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  currentApproverId              String?
  title                          String
  justification                  String
  status                         String
  urgency                        String
  totalPrice                     Float
  createdAt                      DateTime              @default(now())
  updatedAt                      DateTime              @updatedAt
  purchaseOrderId                String?               @unique
  allowedVendorIds               String[]
  awardedQuoteItemIds            String[]
  deadline                       DateTime?
  scoringDeadline                DateTime?
  awardResponseDeadline          DateTime?
  awardResponseDurationMinutes Int?
  committeeName                  String?
  committeePurpose               String?
  cpoAmount                      Float?
  rfqSettings                    Json?
  items                          RequisitionItem[]
  customQuestions                CustomQuestion[]
  evaluationCriteria             EvaluationCriteria?
  quotations                     Quotation[]
  contracts                      Contract[]
  purchaseOrders                 PurchaseOrder[]
  reviews                        Review[]
  financialCommitteeMembers      User[]                @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers      User[]                @relation("TechnicalCommitteeMembers")
  committeeAssignments           CommitteeAssignment[]
}

model CommitteeAssignment {
  user              User                @relation(fields: [userId], references: [id])
  userId            String
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId     String
  scoresSubmitted   Boolean             @default(false)
  
  @@id([userId, requisitionId])
}

model RequisitionItem {
  id            String            @id @default(cuid())
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId String
  name          String
  description   String?
  quantity      Int
  unitPrice     Float
  quoteItems    QuoteItem[]
  poItems       POItem[]
}

model CustomQuestion {
  id            String            @id @default(cuid())
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId String
  questionText  String
  questionType  String // "text", "boolean", "multiple_choice", "file"
  isRequired    Boolean           @default(true)
  options       String[]
  answers       QuoteAnswer[]
}

model EvaluationCriteria {
  id                String                 @id @default(cuid())
  requisition       PurchaseRequisition    @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId     String                 @unique
  financialWeight   Int
  technicalWeight   Int
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Int
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Int
}

model Vendor {
  id              String           @id @default(cuid())
  user            User             @relation(fields: [userId], references: [id])
  userId          String           @unique
  name            String
  contactPerson   String
  email           String           @unique
  phone           String
  address         String
  kycStatus       String // "Pending", "Verified", "Rejected"
  rejectionReason String?
  kycDocuments    KYC_Document[]
  quotations      Quotation[]
  contracts       Contract[]
  purchaseOrders  PurchaseOrder[]
  invoices        Invoice[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  vendorId    String
  name        String
  url         String
  submittedAt DateTime
}

model Quotation {
  id                    String              @id @default(cuid())
  transactionId         String?
  requisition           PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId         String
  vendor                Vendor              @relation(fields: [vendorId], references: [id])
  vendorId              String
  vendorName            String
  totalPrice            Float
  deliveryDate          DateTime
  status                String
  notes                 String?
  rank                  Int?
  finalAverageScore     Float?
  cpoDocumentUrl        String?
  experienceDocumentUrl String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  items                 QuoteItem[]
  answers               QuoteAnswer[]
  scores                CommitteeScoreSet[]
}

model QuoteItem {
  id                String            @id @default(cuid())
  quotation         Quotation         @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId       String
  requisitionItem   RequisitionItem   @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  scores            ItemScore[]
}

model QuoteAnswer {
  id          String         @id @default(cuid())
  quotation   Quotation      @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId String
  question    CustomQuestion @relation(fields: [questionId], references: [id])
  questionId  String
  answer      String
}

model CommitteeScoreSet {
  id               String      @id @default(cuid())
  quotation        Quotation   @relation(fields: [quotationId], references: [id])
  quotationId      String
  scorer           User        @relation(fields: [scorerId], references: [id])
  scorerId         String
  committeeComment String?
  finalScore       Float       @default(0)
  itemScores       ItemScore[]
  submittedAt      DateTime    @default(now())

  @@unique([quotationId, scorerId])
}

model ItemScore {
  id         String            @id @default(cuid())
  scoreSet   CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  scoreSetId String
  quoteItem  QuoteItem         @relation(fields: [quoteItemId], references: [id])
  quoteItemId String           @unique
  finalScore Float
  scores     Score[]
}

model Score {
  id          String    @id @default(cuid())
  itemScore   ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId String
  criterionId String
  score       Int
  comment     String?
  type        String // FINANCIAL or TECHNICAL
}

model Contract {
  id              String              @id @default(cuid())
  contractNumber  String              @default(cuid()) @unique
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId   String
  vendor          Vendor              @relation(fields: [vendorId], references: [id])
  vendorId        String
  sender          User                @relation("Sender", fields: [senderId], references: [id])
  senderId        String
  startDate       DateTime
  endDate         DateTime
  filePath        String?
  status          String
  createdAt       DateTime            @default(now())
}

model PurchaseOrder {
  id               String              @id @default(cuid())
  transactionId    String?
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId    String              @unique
  requisitionTitle String
  vendor           Vendor              @relation(fields: [vendorId], references: [id])
  vendorId         String
  totalAmount      Float
  status           String
  createdAt        DateTime            @default(now())
  notes            String?
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id                String          @id @default(cuid())
  purchaseOrder     PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  purchaseOrderId   String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int             @default(0)
  receiptItems      ReceiptItem[]
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedById    String
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  goodsReceiptNoteId String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  poItemId           String
  quantityReceived   Int
  condition          String
  notes              String?
}

model Invoice {
  id               String        @id @default(cuid())
  transactionId    String?
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId  String
  vendor           Vendor        @relation(fields: [vendorId], references: [id])
  vendorId         String
  invoiceDate      DateTime
  totalAmount      Float
  status           String
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  items            InvoiceItem[]
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId   String
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?
  timestamp     DateTime  @default(now())
  action        String
  entity        String
  entityId      String
  details       String
}

model Review {
  id            String              @id @default(cuid())
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId String
  reviewer      User                @relation(fields: [reviewerId], references: [id])
  reviewerId    String
  sender        User                @relation("ReviewSender", fields: [senderId], references: [id])
  senderId      String
  decision      String // "Recommended", "Rejected"
  comments      String?
  createdAt     DateTime            @default(now())
}

model Setting {
  id                 String @id @default(cuid())
  key                String @unique
  value              Json
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}
