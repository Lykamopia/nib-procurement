// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                 @id @default(uuid())
  name                    String
  email                   String                 @unique
  password                String
  role                    String // Corresponds to UserRole enum in types
  departmentId            String?
  vendorId                String?                @unique
  approvalLimit           Float?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  department              Department?            @relation("UsersInDepartment", fields: [departmentId], references: [id])
  vendor                  Vendor?                @relation(fields: [vendorId], references: [id])
  headedDepartment        Department?            @relation("DepartmentHead")
  managerId               String?
  manager                 User?                  @relation("ManagerSubordinates", fields: [managerId], references: [id])
  subordinates            User[]                 @relation("ManagerSubordinates")
  createdRequisitions     PurchaseRequisition[]  @relation("Requester")
  approvedRequisitions    PurchaseRequisition[]  @relation("Approver")
  currentApprovals        PurchaseRequisition[]  @relation("CurrentApprover")
  auditLogs               AuditLog[]
  receipts                GoodsReceiptNote[]
  reviews                 Review[]               @relation("Reviewer")
  financialCommitteeOn    PurchaseRequisition[]  @relation("FinancialCommitteeMembers")
  technicalCommitteeOn    PurchaseRequisition[]  @relation("TechnicalCommitteeMembers")
  committeeAssignments    CommitteeAssignment[]  @relation("CommitteeMemberAssignments")

  @@index([departmentId])
  @@index([vendorId])
  @@index([managerId])
}

model Department {
  id          String                @id @default(uuid())
  name        String                @unique
  description String?
  headId      String?               @unique
  head        User?                 @relation("DepartmentHead", fields: [headId], references: [id])
  users       User[]                @relation("UsersInDepartment")
  requisitions PurchaseRequisition[]
}

model Role {
    id          String @id @default(uuid())
    name        String @unique
    description String?
}

model PurchaseRequisition {
  id                            String                 @id @default(uuid())
  transactionId                 String?                @unique
  title                         String
  justification                 String
  status                        String
  totalPrice                    Float
  urgency                       String                 @default("Low")
  createdAt                     DateTime               @default(now())
  updatedAt                     DateTime               @updatedAt
  requesterId                   String
  requester                     User                   @relation("Requester", fields: [requesterId], references: [id])
  departmentId                  String
  department                    Department             @relation(fields: [departmentId], references: [id])
  approverId                    String?
  approver                      User?                  @relation("Approver", fields: [approverId], references: [id])
  currentApproverId             String?
  currentApprover               User?                  @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  items                         RequisitionItem[]
  customQuestions               CustomQuestion[]
  evaluationCriteria            EvaluationCriteria?
  quotations                    Quotation[]
  purchaseOrderId               String?                @unique
  purchaseOrder                 PurchaseOrder?
  allowedVendorIds              String[]
  awardedQuoteItemIds           String[]
  deadline                      DateTime?
  scoringDeadline               DateTime?
  awardResponseDeadline         DateTime?
  awardResponseDurationMinutes  Int?
  committeeName                 String?
  committeePurpose              String?
  cpoAmount                     Float?
  rfqSettings                   Json?
  reviews                       Review[]               @relation("RequisitionReviews")

  financialCommitteeMembers     User[]                 @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers     User[]                 @relation("TechnicalCommitteeMembers")
  committeeAssignments          CommitteeAssignment[]  @relation("RequisitionAssignments")

  @@index([requesterId])
  @@index([departmentId])
  @@index([approverId])
  @@index([currentApproverId])
}

model RequisitionItem {
  id              String               @id @default(uuid())
  name            String
  quantity        Int
  unitPrice       Float
  description     String?
  requisitionId   String
  requisition     PurchaseRequisition  @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  quoteItems      QuoteItem[]
  poItems         POItem[]

  @@index([requisitionId])
}

model CustomQuestion {
  id              String               @id @default(uuid())
  questionText    String
  questionType    String // "text", "boolean", "multiple_choice", "file"
  isRequired      Boolean              @default(true)
  options         String[]
  requisitionId   String
  requisition     PurchaseRequisition  @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  answers         QuoteAnswer[]

  @@index([requisitionId])
}

model EvaluationCriteria {
  id                 String                @id @default(uuid())
  requisitionId      String                @unique
  requisition        PurchaseRequisition   @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  financialWeight    Int
  technicalWeight    Int
  financialCriteria  FinancialCriterion[]
  technicalCriteria  TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(uuid())
  name                 String
  weight               Int
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)

  @@index([evaluationCriteriaId])
}

model TechnicalCriterion {
  id                   String             @id @default(uuid())
  name                 String
  weight               Int
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)

  @@index([evaluationCriteriaId])
}

model Quotation {
  id                    String        @id @default(uuid())
  transactionId         String?
  requisitionId         String
  vendorId              String
  vendorName            String
  totalPrice            Float
  deliveryDate          DateTime
  status                String
  notes                 String?
  rank                  Int?
  finalAverageScore     Float?
  cpoDocumentUrl        String?
  experienceDocumentUrl String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  requisition           PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  vendor                Vendor        @relation(fields: [vendorId], references: [id])
  items                 QuoteItem[]
  answers               QuoteAnswer[]

  @@index([requisitionId])
  @@index([vendorId])
}

model QuoteItem {
  id                String    @id @default(uuid())
  quotationId       String
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  quotation         Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id], onDelete: NoAction, onUpdate: NoAction) // to avoid cycles

  @@index([quotationId])
  @@index([requisitionItemId])
}

model QuoteAnswer {
  id          String    @id @default(uuid())
  quotationId String
  questionId  String
  answer      String
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  question    CustomQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([quotationId])
  @@index([questionId])
}

model PurchaseOrder {
  id               String           @id @default(uuid())
  transactionId    String?
  requisitionId    String           @unique
  requisitionTitle String
  vendorId         String
  totalAmount      Float
  status           String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor           Vendor           @relation(fields: [vendorId], references: [id])
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]

  @@index([vendorId])
}

model POItem {
  id                String          @id @default(uuid())
  purchaseOrderId   String
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int             @default(0)
  purchaseOrder     PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  receiptItems      ReceiptItem[]

  @@index([purchaseOrderId])
  @@index([requisitionItemId])
}

model GoodsReceiptNote {
  id              String        @id @default(uuid())
  transactionId   String?
  purchaseOrderId String
  receivedById    String
  receivedDate    DateTime      @default(now())
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  items           ReceiptItem[]

  @@index([purchaseOrderId])
  @@index([receivedById])
}

model ReceiptItem {
  id                 String           @id @default(uuid())
  goodsReceiptNoteId String
  poItemId           String
  quantityReceived   Int
  condition          String // "Good", "Damaged", "Incorrect"
  notes              String?
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  poItem             POItem           @relation(fields: [poItemId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([goodsReceiptNoteId])
  @@index([poItemId])
}

model Invoice {
  id                String        @id @default(uuid())
  transactionId     String?
  purchaseOrderId   String
  vendorId          String
  invoiceDate       DateTime
  totalAmount       Float
  status            String
  documentUrl       String?
  paymentDate       DateTime?
  paymentReference  String?
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  items             InvoiceItem[]

  @@index([purchaseOrderId])
}

model InvoiceItem {
  id          String  @id @default(uuid())
  invoiceId   String
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
}

model Vendor {
  id            String      @id @default(uuid())
  userId        String      @unique
  name          String
  contactPerson String
  email         String      @unique
  phone         String
  address       String
  kycStatus     String // "Pending", "Verified", "Rejected"
  rejectionReason String?
  user          User        @relation(fields: [userId], references: [id])
  quotations    Quotation[]
  purchaseOrders PurchaseOrder[]
  contracts     Contract[]
  kycDocuments  KYC_Document[]
}

model KYC_Document {
    id          String   @id @default(uuid())
    vendorId    String
    name        String
    url         String
    submittedAt DateTime
    vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)

    @@index([vendorId])
}

model Contract {
  id             String    @id @default(uuid())
  contractNumber String    @unique @default(cuid())
  requisitionId  String
  vendorId       String
  startDate      DateTime
  endDate        DateTime
  filePath       String?
  status         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  requisition    PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor         Vendor    @relation(fields: [vendorId], references: [id])

  @@index([requisitionId])
  @@index([vendorId])
}

model AuditLog {
  id            String    @id @default(uuid())
  transactionId String?
  timestamp     DateTime
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String
  user          User?     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([transactionId])
}

model Review {
  id            String   @id @default(uuid())
  requisitionId String
  reviewerId    String
  committeeType String // "Committee A", "Committee B"
  decision      String // "Approved", "Rejected"
  comment       String
  createdAt     DateTime @default(now())
  requisition   PurchaseRequisition @relation("RequisitionReviews", fields: [requisitionId], references: [id])
  reviewer      User                @relation("Reviewer", fields: [reviewerId], references: [id])

  @@index([requisitionId])
  @@index([reviewerId])
}

model CommitteeAssignment {
  id               String  @id @default(uuid())
  userId           String
  requisitionId    String
  scoresSubmitted  Boolean @default(false)

  user           User                @relation("CommitteeMemberAssignments", fields: [userId], references: [id])
  requisition    PurchaseRequisition @relation("RequisitionAssignments", fields: [requisitionId], references: [id])

  @@unique([userId, requisitionId])
  @@index([userId])
  @@index([requisitionId])
}

    