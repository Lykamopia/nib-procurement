
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   String                @id @default(cuid())
  name                 String
  email                String                @unique
  password             String
  role                 UserRole
  vendorId             String?               @unique
  vendor               Vendor?               @relation(fields: [vendorId], references: [id])
  departmentId         String?
  department           Department?           @relation(fields: [departmentId], references: [id])
  createdRequisitions  PurchaseRequisition[] @relation("RequesterRequisitions")
  approvedRequisitions PurchaseRequisition[] @relation("ApproverRequisitions")
  goodsReceipts        GoodsReceiptNote[]
  scores               CommitteeScoreSet[]
  auditLogs            AuditLog[]
  // Many-to-many for committee membership
  financialCommitteeOn PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommitteeOn PurchaseRequisition[] @relation("TechnicalCommitteeMembers")

  committeeAssignments CommitteeAssignment[]
}

model CommitteeAssignment {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  scoresSubmitted Boolean @default(false)

  @@unique([userId, requisitionId])
}


model Department {
  id           String                @id @default(cuid())
  name         String                @unique
  users        User[]
  requisitions PurchaseRequisition[]
}

model PurchaseRequisition {
  id                   String    @id @default(cuid())
  requesterId          String
  requester            User      @relation("RequesterRequisitions", fields: [requesterId], references: [id])
  requesterName        String
  title                String
  departmentId         String?
  department           Department? @relation(fields: [departmentId], references: [id])
  items                RequisitionItem[]
  totalPrice           Float?
  justification        String
  status               RequisitionStatus
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  approverId           String?
  approver             User?     @relation("ApproverRequisitions", fields: [approverId], references: [id])
  approverComment      String?
  quotations           Quotation[]
  contract             Json? // Simplified ContractDetails
  negotiationNotes     String?
  purchaseOrderId      String?   @unique
  purchaseOrder        PurchaseOrder?
  allowedVendorIds     String[]
  customQuestions      CustomQuestion[]
  deadline             DateTime?
  scoringDeadline      DateTime?
  awardResponseDeadline DateTime?
  awardResponseDurationMinutes Int?
  evaluationCriteria   EvaluationCriteria?
  financialCommitteeMemberIds String[]
  technicalCommitteeMemberIds String[]
  financialCommitteeMembers   User[] @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers   User[] @relation("TechnicalCommitteeMembers")

  committeeName        String?
  committeePurpose     String?
  cpoAmount            Float?
  committeeAssignments CommitteeAssignment[]
}

model RequisitionItem {
  id            String              @id @default(cuid())
  name          String
  description   String?
  quantity      Int
  unitPrice     Float?
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  quoteItems    QuoteItem[]
}

model CustomQuestion {
  id            String              @id @default(cuid())
  questionText  String
  questionType  QuestionType
  options       String[]
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  answers       QuoteAnswer[]
}

model EvaluationCriteria {
  id                String                 @id @default(cuid())
  requisitionId     String                 @unique
  requisition       PurchaseRequisition    @relation(fields: [requisitionId], references: [id])
  financialWeight   Float
  technicalWeight   Float
  financialCriteria EvaluationCriterion[] @relation("FinancialCriteria")
  technicalCriteria EvaluationCriterion[] @relation("TechnicalCriteria")
}

model EvaluationCriterion {
  id                   String              @id @default(cuid())
  name                 String
  weight               Float
  type                 String // "financial" or "technical"
  financialCriteriaId  String?
  financialCriteria    EvaluationCriteria? @relation("FinancialCriteria", fields: [financialCriteriaId], references: [id])
  technicalCriteriaId  String?
  technicalCriteria    EvaluationCriteria? @relation("TechnicalCriteria", fields: [technicalCriteriaId], references: [id])
  scores               Score[]
}

model AuditLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  role      UserRole
  action    String
  entity    String
  entityId  String
  details   String
}

model Vendor {
  id              String      @id @default(cuid())
  user            User?
  name            String
  contactPerson   String
  email           String      @unique
  phone           String
  address         String
  kycStatus       KycStatus
  kycDocuments    Json[] // Simplified KycDocument
  rejectionReason String?
  quotations      Quotation[]
  purchaseOrders  PurchaseOrder[]
  invoices        Invoice[]
}

model Quotation {
  id                String              @id @default(cuid())
  requisitionId     String
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendorId          String
  vendor            Vendor              @relation(fields: [vendorId], references: [id])
  vendorName        String
  items             QuoteItem[]
  totalPrice        Float
  deliveryDate      DateTime
  createdAt         DateTime            @default(now())
  status            QuotationStatus
  notes             String?
  rank              Int?
  answers           QuoteAnswer[]
  scores            CommitteeScoreSet[]
  finalAverageScore Float?
  cpoDocumentUrl    String?
}

model QuoteItem {
  id                String          @id @default(cuid())
  requisitionItemId String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  quotationId       String
  quotation         Quotation       @relation(fields: [quotationId], references: [id])
}

model QuoteAnswer {
  id          String         @id @default(cuid())
  questionId  String
  question    CustomQuestion @relation(fields: [questionId], references: [id])
  answer      String
  quotationId String
  quotation   Quotation      @relation(fields: [quotationId], references: [id])
}

model CommitteeScoreSet {
  id               String      @id @default(cuid())
  scorerId         String
  scorer           User        @relation(fields: [scorerId], references: [id])
  scorerName       String
  financialScores  Score[]     @relation("FinancialScores")
  technicalScores  Score[]     @relation("TechnicalScores")
  finalScore       Float
  committeeComment String?
  submittedAt      DateTime    @default(now())
  quotationId      String
  quotation        Quotation   @relation(fields: [quotationId], references: [id])
}

model Score {
  id                  String               @id @default(cuid())
  criterionId         String
  criterion           EvaluationCriterion  @relation(fields: [criterionId], references: [id])
  score               Float
  comment             String?
  financialScoreSetId String?
  financialScoreSet   CommitteeScoreSet?   @relation("FinancialScores", fields: [financialScoreSetId], references: [id])
  technicalScoreSetId String?
  technicalScoreSet   CommitteeScoreSet?   @relation("TechnicalScores", fields: [technicalScoreSetId], references: [id])
}

model PurchaseOrder {
  id               String             @id @default(cuid())
  requisitionId    String
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionTitle String
  vendorId         String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  items            POItem[]
  totalAmount      Float
  status           PurchaseOrderStatus
  createdAt        DateTime           @default(now())
  contract         Json?
  notes            String?
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id              String             @id @default(cuid())
  name            String
  quantity        Int
  unitPrice       Float
  totalPrice      Float
  receivedQuantity Int
  purchaseOrderId String
  purchaseOrder   PurchaseOrder      @relation(fields: [purchaseOrderId], references: [id])
  receiptItems    ReceiptItem[]
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedById    String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]
  photos          Json[]
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  poItemId           String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  name               String
  quantityOrdered    Int
  quantityReceived   Int
  condition          String
  notes              String?
  goodsReceiptNoteId String
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id])
}

model Invoice {
  id               String        @id @default(cuid())
  purchaseOrderId  String
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  vendorId         String
  vendor           Vendor        @relation(fields: [vendorId], references: [id])
  invoiceDate      DateTime
  items            InvoiceItem[]
  totalAmount      Float
  status           InvoiceStatus
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
}

model InvoiceItem {
  id         String  @id @default(cuid())
  name       String
  quantity   Int
  unitPrice  Float
  totalPrice Float
  invoiceId  String
  invoice    Invoice @relation(fields: [invoiceId], references: [id])
}


// Enums
enum UserRole {
  Requester
  Approver
  Procurement_Officer @map("Procurement Officer")
  Finance
  Admin
  Receiving
  Vendor
  Committee_Member @map("Committee Member")
  Committee
}

enum RequisitionStatus {
  Draft
  Pending_Approval @map("Pending Approval")
  Approved
  Rejected
  RFQ_In_Progress @map("RFQ In Progress")
  PO_Created @map("PO Created")
  Fulfilled
  Closed
}

enum QuotationStatus {
  Submitted
  Awarded
  Rejected
  Standby
  Invoice_Submitted @map("Invoice Submitted")
  Failed
  Accepted
  Declined
}

enum PurchaseOrderStatus {
  Issued
  Acknowledged
  Shipped
  Partially_Delivered @map("Partially Delivered")
  Delivered
  Cancelled
  Matched
  Mismatched
  On_Hold @map("On Hold")
}

enum InvoiceStatus {
  Pending
  Approved_for_Payment @map("Approved for Payment")
  Paid
  Disputed
}

enum KycStatus {
  Pending
  Verified
  Rejected
}

enum QuestionType {
  text
  boolean
  multiple_choice @map("multiple-choice")
}

    