// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                 @id @default(cuid())
  name                      String
  email                     String                 @unique
  password                  String
  role                      String
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
  departmentId              String?
  vendorId                  String?                @unique
  approvalLimit             Float?
  managerId                 String?
  manager                   User?                  @relation("ManagerSubordinate", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates              User[]                 @relation("ManagerSubordinate")
  createdRequisitions       PurchaseRequisition[]  @relation("Requester")
  approvedRequisitions      PurchaseRequisition[]  @relation("Approver")
  assignedRequisitions      PurchaseRequisition[]  @relation("CurrentApprover")
  department                Department?            @relation("UsersInDepartment", fields: [departmentId], references: [id])
  vendor                    Vendor?
  headedDepartment          Department?            @relation("DepartmentHead")
  goodsReceipts             GoodsReceiptNote[]
  auditLogs                 AuditLog[]
  sentContracts             Contract[]
  committeeScores           CommitteeScoreSet[]    @relation("Scorer")
  financialCommitteeOn      PurchaseRequisition[]  @relation("FinancialCommitteeMembers")
  technicalCommitteeOn      PurchaseRequisition[]  @relation("TechnicalCommitteeMembers")
  reviews                   Review[]
  committeeAssignments      CommitteeAssignment[]  @relation("CommitteeMember")
}

model Department {
  id           String                @id @default(cuid())
  name         String                @unique
  description  String?
  headId       String?               @unique
  head         User?                 @relation("DepartmentHead", fields: [headId], references: [id])
  users        User[]                @relation("UsersInDepartment")
  requisitions PurchaseRequisition[]
}

model PurchaseRequisition {
  id                           String                 @id @default(cuid())
  transactionId                String?
  title                        String
  justification                String
  status                       String
  urgency                      String
  totalPrice                   Float
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  deadline                     DateTime?
  scoringDeadline              DateTime?
  awardResponseDeadline        DateTime?
  awardResponseDurationMinutes Int?
  purchaseOrderId              String?                @unique
  committeeName                String?
  committeePurpose             String?
  approverComment              String?

  requesterId                String
  approverId                 String?
  currentApproverId          String?
  departmentId               String?
  allowedVendorIds           String[]
  awardedQuoteItemIds        String[]
  cpoAmount                  Float?
  rfqSettings                Json?

  requester               User                     @relation("Requester", fields: [requesterId], references: [id])
  approver                User?                    @relation("Approver", fields: [approverId], references: [id])
  currentApprover         User?                    @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  department              Department?              @relation(fields: [departmentId], references: [id])
  items                   RequisitionItem[]
  customQuestions         CustomQuestion[]
  evaluationCriteria      EvaluationCriteria?
  quotations              Quotation[]
  contracts               Contract[]
  purchaseOrders          PurchaseOrder[]
  reviews                 Review[]
  financialCommitteeMembers User[]                   @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers User[]                   @relation("TechnicalCommitteeMembers")
  committeeAssignments      CommitteeAssignment[]
}

model RequisitionItem {
  id            String             @id @default(cuid())
  name          String
  description   String?
  quantity      Int
  unitPrice     Float
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  quoteItems    QuoteItem[]
  poItems       POItem[]
}

model CustomQuestion {
  id              String              @id @default(cuid())
  questionText    String
  questionType    String
  isRequired      Boolean             @default(false)
  options         String[]
  requisitionId   String
  requisition     PurchaseRequisition  @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  answers         QuoteAnswer[]
}

model EvaluationCriteria {
  id                 String               @id @default(cuid())
  requisitionId      String               @unique
  financialWeight    Int
  technicalWeight    Int
  requisition        PurchaseRequisition   @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  financialCriteria  FinancialCriterion[]
  technicalCriteria  TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  name                 String
  weight               Int
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  name                 String
  weight               Int
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
}


model Quotation {
  id                    String              @id @default(cuid())
  transactionId         String?
  vendorId              String
  vendorName            String
  requisitionId         String
  totalPrice            Float
  deliveryDate          DateTime
  status                String
  notes                 String?
  rank                  Int?
  finalAverageScore     Float?
  cpoDocumentUrl        String?
  experienceDocumentUrl String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  vendor      Vendor               @relation(fields: [vendorId], references: [id])
  requisition PurchaseRequisition  @relation(fields: [requisitionId], references: [id])
  items       QuoteItem[]
  answers     QuoteAnswer[]
  scores      CommitteeScoreSet[]
}

model QuoteItem {
  id                String    @id @default(cuid())
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  quotationId       String
  requisitionItemId String
  quotation         Quotation  @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
}

model QuoteAnswer {
  id          String        @id @default(cuid())
  answer      String
  quotationId String
  questionId  String
  quotation   Quotation      @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  question    CustomQuestion @relation(fields: [questionId], references: [id])
}

model PurchaseOrder {
  id               String           @id @default(cuid())
  transactionId    String?
  requisitionTitle String
  totalAmount      Float
  status           String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  vendorId         String
  requisitionId    String
  vendor           Vendor           @relation(fields: [vendorId], references: [id])
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id                String          @id @default(cuid())
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int
  requisitionItemId String
  purchaseOrderId   String
  purchaseOrder     PurchaseOrder    @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  requisitionItem   RequisitionItem  @relation(fields: [requisitionItemId], references: [id])
  receiptItems      ReceiptItem[]
}

model GoodsReceiptNote {
  id              String      @id @default(cuid())
  transactionId   String?
  receivedDate    DateTime    @default(now())
  purchaseOrderId String
  receivedById    String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedBy      User        @relation(fields: [receivedById], references: [id])
  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  quantityReceived   Int
  condition          String
  notes              String?
  goodsReceiptNoteId String
  poItemId           String
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  poItem             POItem           @relation(fields: [poItemId], references: [id])
}

model Invoice {
  id               String       @id @default(cuid())
  transactionId    String?
  invoiceDate      DateTime
  totalAmount      Float
  status           String
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  purchaseOrderId  String
  vendorId         String
  po               PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  items            InvoiceItem[]
}

model InvoiceItem {
  id         String  @id @default(cuid())
  name       String
  quantity   Int
  unitPrice  Float
  totalPrice Float
  invoiceId  String
  invoice    Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Vendor {
  id              String          @id @default(cuid())
  name            String
  contactPerson   String
  email           String          @unique
  phone           String
  address         String
  kycStatus       String
  rejectionReason String?
  userId          String          @unique
  user            User            @relation(fields: [userId], references: [id])
  quotations      Quotation[]
  purchaseOrders  PurchaseOrder[]
  contracts       Contract[]
  kycDocuments    KYC_Document[]
}

model KYC_Document {
    id          String @id @default(cuid())
    name        String
    url         String
    submittedAt DateTime @default(now())
    vendorId    String
    vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model Contract {
  id             String    @id @default(cuid())
  contractNumber String    @default(cuid())
  startDate      DateTime
  endDate        DateTime
  filePath       String?
  status         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  requisitionId  String
  vendorId       String
  sentById       String
  requisition    PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor         Vendor              @relation(fields: [vendorId], references: [id])
  sentBy         User                @relation(fields: [sentById], references: [id])
}

model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime  @default(now())
  action        String
  entity        String
  entityId      String
  details       String
  userId        String?
  user          User?     @relation(fields: [userId], references: [id])
}

model Role {
    id String @id @default(cuid())
    name String @unique
    description String?
}

model Review {
    id String @id @default(cuid())
    decision String // Approved, Rejected
    comment String?
    createdAt DateTime @default(now())

    requisitionId String
    reviewerId String
    committeeType String // Committee A, Committee B

    requisition PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    reviewer User @relation(fields: [reviewerId], references: [id])
}

model CommitteeAssignment {
    id String @id @default(cuid())
    scoresSubmitted Boolean @default(false)

    userId String
    requisitionId String
    user User @relation("CommitteeMember", fields: [userId], references: [id], onDelete: Cascade)
    requisition PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)

    @@unique([userId, requisitionId])
}

model CommitteeScoreSet {
  id                String      @id @default(cuid())
  finalScore        Float
  committeeComment  String?
  submittedAt       DateTime    @default(now())
  quotationId       String
  scorerId          String
  quotation         Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  scorer            User        @relation("Scorer", fields: [scorerId], references: [id], onDelete: Cascade)
  itemScores        ItemScore[]

  @@unique([quotationId, scorerId])
}

model ItemScore {
  id           String            @id @default(cuid())
  finalScore   Float
  quoteItemId  String
  scoreSetId   String
  scoreSet     CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  scores       Score[]
}

enum ScoreType {
  FINANCIAL
  TECHNICAL
}

model Score {
    id          String      @id @default(cuid())
    score       Int
    comment     String?
    criterionId String
    itemScoreId String
    itemScore   ItemScore   @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
    type        ScoreType
}
