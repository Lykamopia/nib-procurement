// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String                @id @default(cuid())
  name                       String
  email                      String                @unique
  password                   String
  roleId                     String
  role                       Role                  @relation(fields: [roleId], references: [id])
  departmentId               String?
  department                 Department?           @relation(fields: [departmentId], references: [id])
  vendor                     Vendor?
  vendorId                   String?               @unique
  approvalLimit              Float?
  managerId                  String?
  manager                    User?                 @relation("ManagerSubordinate", fields: [managerId], references: [id])
  subordinates               User[]                @relation("ManagerSubordinate")
  headOfDepartment           Department?           @relation("DepartmentHead")
  createdRequisitions        PurchaseRequisition[] @relation("Requester")
  approvedRequisitions       PurchaseRequisition[] @relation("Approver")
  currentApproverForReqs     PurchaseRequisition[] @relation("CurrentApprover")
  financialCommitteeFor      PurchaseRequisition[] @relation("FinancialCommittee")
  technicalCommitteeFor      PurchaseRequisition[] @relation("TechnicalCommittee")
  committeeAssignments       CommitteeAssignment[]
  goodsReceipts              GoodsReceiptNote[]
  createdContracts           Contract[]
  auditLogs                  AuditLog[]
  committeeScores            CommitteeScoreSet[]

  @@map("users")
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String
  users       User[]

  @@map("roles")
}

model Vendor {
  id              String             @id @default(cuid())
  user            User               @relation(fields: [userId], references: [id])
  userId          String             @unique
  name            String
  contactPerson   String
  email           String             @unique
  phone           String
  address         String
  kycStatus       String // Pending, Verified, Rejected
  rejectionReason String?
  kycDocuments    KYC_Document[]
  quotations      Quotation[]
  purchaseOrders  PurchaseOrder[]
  contracts       Contract[]

  @@map("vendors")
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  vendorId    String
  name        String
  url         String
  submittedAt DateTime @default(now())

  @@map("kyc_documents")
}

model Department {
  id           String                @id @default(cuid())
  name         String                @unique
  description  String?
  head         User?                 @relation("DepartmentHead", fields: [headId], references: [id])
  headId       String?               @unique
  users        User[]
  requisitions PurchaseRequisition[]

  @@map("departments")
}

model PurchaseRequisition {
  id                           String                 @id @default(cuid())
  transactionId                String?                @unique
  requester                    User                   @relation("Requester", fields: [requesterId], references: [id])
  requesterId                  String
  requesterName                String // Denormalized for convenience
  title                        String
  department                   Department?            @relation(fields: [departmentId], references: [id])
  departmentId                 String?
  justification                String
  status                       String // Draft, Pending Approval, Approved, Rejected, RFQ In Progress, PO Created, Fulfilled, Closed
  urgency                      String                 @default("Low") // Low, Medium, High, Critical
  totalPrice                   Float
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  approver                     User?                  @relation("Approver", fields: [approverId], references: [id])
  approverId                   String?
  approverComment              String?
  currentApprover              User?                  @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  currentApproverId            String?
  purchaseOrderId              String?                @unique
  deadline                     DateTime? // For RFQ submissions
  scoringDeadline              DateTime? // For committee scoring
  awardResponseDeadline        DateTime? // For vendor to accept/reject award
  awardResponseDurationMinutes Int?
  committeeName                String?
  committeePurpose             String?
  cpoAmount                    Float?
  rfqSettings                  Json                   @default("{}")
  allowedVendorIds             String[]
  awardedQuoteItemIds          String[]
  items                        RequisitionItem[]
  customQuestions              CustomQuestion[]
  evaluationCriteria           EvaluationCriteria?
  quotations                   Quotation[]
  purchaseOrder                PurchaseOrder?
  financialCommitteeMembers    User[]                 @relation("FinancialCommittee")
  technicalCommitteeMembers    User[]                 @relation("TechnicalCommittee")
  committeeAssignments         CommitteeAssignment[]
  contract                     Contract?

  @@map("purchase_requisitions")
}

model CommitteeAssignment {
  user              User                @relation(fields: [userId], references: [id])
  userId            String
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId     String
  scoresSubmitted   Boolean             @default(false)

  @@id([userId, requisitionId])
  @@map("committee_assignments")
}

model RequisitionItem {
  id              String              @id @default(cuid())
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId   String
  name            String
  description     String?
  quantity        Int
  unitPrice       Float
  quoteItems      QuoteItem[]
  poItems         POItem[]

  @@map("requisition_items")
}

model CustomQuestion {
  id            String              @id @default(cuid())
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId String
  questionText  String
  questionType  String // text, boolean, multiple-choice, file
  isRequired    Boolean             @default(true)
  options       String[]
  answers       QuoteAnswer[]

  @@map("custom_questions")
}

model EvaluationCriteria {
  id                String                 @id @default(cuid())
  requisition       PurchaseRequisition    @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId     String                 @unique
  financialWeight   Int
  technicalWeight   Int
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]

  @@map("evaluation_criteria")
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Int
  scores               FinancialScore[]

  @@map("financial_criteria")
}

model TechnicalCriterion {
  id                   String           @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Int
  scores               TechnicalScore[]

  @@map("technical_criteria")
}

model Quotation {
  id                    String              @id @default(cuid())
  transactionId         String?
  requisition           PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId         String
  vendor                Vendor              @relation(fields: [vendorId], references: [id])
  vendorId              String
  vendorName            String // Denormalized for convenience
  totalPrice            Float
  deliveryDate          DateTime
  status                String // Submitted, Awarded, Rejected, Standby, Accepted, Declined, Failed, Invoice_Submitted, Partially_Awarded
  notes                 String?
  rank                  Int?
  finalAverageScore     Float?
  createdAt             DateTime            @default(now())
  cpoDocumentUrl        String?
  experienceDocumentUrl String?
  items                 QuoteItem[]
  answers               QuoteAnswer[]
  scores                CommitteeScoreSet[]

  @@map("quotations")
}

model QuoteItem {
  id                String          @id @default(cuid())
  quotation         Quotation       @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId       String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id], onDelete: NoAction)
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  itemScores        ItemScore[]

  @@map("quote_items")
}

model QuoteAnswer {
  id          String         @id @default(cuid())
  quotation   Quotation      @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId String
  question    CustomQuestion @relation(fields: [questionId], references: [id], onDelete: NoAction)
  questionId  String
  answer      String

  @@map("quote_answers")
}

model CommitteeScoreSet {
  id               String           @id @default(cuid())
  quotation        Quotation        @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId      String
  scorer           User             @relation(fields: [scorerId], references: [id])
  scorerId         String
  scorerName       String
  finalScore       Float
  committeeComment String?
  submittedAt      DateTime         @default(now())
  itemScores       ItemScore[]

  @@map("committee_score_sets")
}

model ItemScore {
  id              String            @id @default(cuid())
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  scoreSetId      String
  quoteItem       QuoteItem         @relation(fields: [quoteItemId], references: [id], onDelete: Cascade)
  quoteItemId     String            @unique
  finalScore      Float
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]

  @@map("item_scores")
}

model FinancialScore {
  id          String             @id @default(cuid())
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId String
  criterion   FinancialCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  criterionId String
  score       Float
  comment     String?

  @@map("financial_scores")
}

model TechnicalScore {
  id          String             @id @default(cuid())
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId String
  criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  criterionId String
  score       Float
  comment     String?

  @@map("technical_scores")
}

model PurchaseOrder {
  id               String             @id @default(cuid())
  transactionId    String?
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: NoAction)
  requisitionId    String             @unique
  requisitionTitle String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  vendorId         String
  totalAmount      Float
  status           String // Issued, Acknowledged, Shipped, Partially Delivered, Delivered, Cancelled, Matched, Mismatched
  createdAt        DateTime           @default(now())
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]

  @@map("purchase_orders")
}

model POItem {
  id                String          @id @default(cuid())
  po                PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  purchaseOrderId   String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id], onDelete: NoAction)
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int             @default(0)
  receiptItems      ReceiptItem[]

  @@map("po_items")
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedById    String
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]

  @@map("goods_receipt_notes")
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  goodsReceiptNoteId String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  poItemId           String
  quantityReceived   Int
  condition          String // Good, Damaged, Incorrect
  notes              String?

  @@map("receipt_items")
}

model Invoice {
  id               String        @id @default(cuid())
  transactionId    String?
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId  String
  vendorId         String
  invoiceDate      DateTime
  totalAmount      Float
  status           String // Pending, Approved for Payment, Paid, Disputed
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  items            InvoiceItem[]

  @@map("invoices")
}

model InvoiceItem {
  id        String  @id @default(cuid())
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId String
  name      String
  quantity  Int
  unitPrice Float
  totalPrice Float

  @@map("invoice_items")
}

model Contract {
  id              String              @id @default(cuid())
  contractNumber  String              @unique @default(cuid())
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId   String              @unique
  vendor          Vendor              @relation(fields: [vendorId], references: [id])
  vendorId        String
  startDate       DateTime
  endDate         DateTime
  filePath        String?
  status          String // Draft, Active, Expired
  createdAt       DateTime            @default(now())
  createdBy       User                @relation(fields: [createdById], references: [id])
  createdById     String

  @@map("contracts")
}

model AuditLog {
  id            String   @id @default(cuid())
  transactionId String?
  timestamp     DateTime @default(now())
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String

  @@map("audit_logs")
}
