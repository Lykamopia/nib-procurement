
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                @id @default(cuid())
  name                    String
  email                   String                @unique
  password                String
  role                    String
  vendorId                String?               @unique
  vendor                  Vendor?
  departmentId            String?
  department              Department?           @relation("UsersInDepartment", fields: [departmentId], references: [id])
  managerId               String?
  manager                 User?                 @relation("ManagerSubordinates", fields: [managerId], references: [id])
  subordinates            User[]                @relation("ManagerSubordinates")
  approvalLimit           Float?
  headedDepartment        Department?           @relation("DepartmentHead")
  createdRequisitions     PurchaseRequisition[] @relation("Requester")
  approvedRequisitions    PurchaseRequisition[] @relation("Approver")
  currentApprovals        PurchaseRequisition[] @relation("CurrentApprover")
  receipts                GoodsReceiptNote[]
  auditLogs               AuditLog[]
  financialCommitteeOn    PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommitteeOn    PurchaseRequisition[] @relation("TechnicalCommitteeMembers")
  committeeAssignments    CommitteeAssignment[]
  scores                  CommitteeScoreSet[]
  reviews                 Review[]

  @@index([departmentId])
  @@index([managerId])
}

model Department {
  id          String                @id @default(cuid())
  name        String                @unique
  description String?
  headId      String?               @unique
  head        User?                 @relation("DepartmentHead", fields: [headId], references: [id])
  users       User[]                @relation("UsersInDepartment")
  requisitions PurchaseRequisition[]
}

model Vendor {
  id              String             @id @default(cuid())
  name            String             @unique
  contactPerson   String
  email           String             @unique
  phone           String
  address         String
  kycStatus       String             @default("Pending") // Pending, Verified, Rejected
  rejectionReason String?
  userId          String             @unique
  user            User               @relation(fields: [userId], references: [id])
  kycDocuments    KYC_Document[]
  quotations      Quotation[]
  contracts       Contract[]
  purchaseOrders  PurchaseOrder[]
  invoices        Invoice[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  name        String
  url         String
  submittedAt DateTime @default(now())

  @@index([vendorId])
}

model PurchaseRequisition {
  id                            String                @id @default(cuid())
  transactionId                 String?               @unique
  requesterId                   String
  requester                     User                  @relation("Requester", fields: [requesterId], references: [id])
  title                         String
  departmentId                  String?
  department                    Department?           @relation(fields: [departmentId], references: [id])
  items                         RequisitionItem[]
  totalPrice                    Float
  justification                 String
  status                        String
  urgency                       String                @default("Low")
  createdAt                     DateTime              @default(now())
  updatedAt                     DateTime              @updatedAt
  approverId                    String?
  approver                      User?                 @relation("Approver", fields: [approverId], references: [id])
  approverComment               String?
  currentApproverId             String?
  currentApprover               User?                 @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  quotations                    Quotation[]
  contracts                     Contract[]
  purchaseOrderId               String?               @unique
  purchaseOrder                 PurchaseOrder?
  allowedVendorIds              String[]              @default([])
  awardedQuoteItemIds           String[]              @default([])
  customQuestions               CustomQuestion[]
  deadline                      DateTime?
  scoringDeadline               DateTime?
  awardResponseDeadline         DateTime?
  awardResponseDurationMinutes  Int?
  evaluationCriteria            EvaluationCriteria?
  financialCommitteeMemberIds   String[]
  financialCommitteeMembers     User[]                @relation("FinancialCommitteeMembers")
  technicalCommitteeMemberIds   String[]
  technicalCommitteeMembers     User[]                @relation("TechnicalCommitteeMembers")
  committeeName                 String?
  committeePurpose              String?
  cpoAmount                     Float?
  rfqSettings                   Json?
  committeeAssignments          CommitteeAssignment[]
  reviews                       Review[]

  @@index([requesterId])
  @@index([approverId])
  @@index([currentApproverId])
}

model RequisitionItem {
  id              String             @id @default(cuid())
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  name            String
  description     String?
  quantity        Int
  unitPrice       Float

  @@index([requisitionId])
}

model CustomQuestion {
  id              String             @id @default(cuid())
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  questionText    String
  questionType    String // text, boolean, multiple_choice, file
  isRequired      Boolean            @default(true)
  options         String[]
  requisitionItemId String? // Optional: link question to a specific item
  answers         QuoteAnswer[]

  @@index([requisitionId])
}

model EvaluationCriteria {
  id                String               @id @default(cuid())
  requisitionId     String               @unique
  requisition       PurchaseRequisition   @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  financialWeight   Int
  technicalWeight   Int
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String              @id @default(cuid())
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria  @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                 String
  weight               Int
  scores               FinancialScore[]

  @@index([evaluationCriteriaId])
}

model TechnicalCriterion {
  id                   String              @id @default(cuid())
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria  @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                 String
  weight               Int
  scores               TechnicalScore[]

  @@index([evaluationCriteriaId])
}

model Quotation {
  id                    String              @id @default(cuid())
  transactionId         String?
  requisitionId         String
  requisition           PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendorId              String
  vendor                Vendor              @relation(fields: [vendorId], references: [id])
  vendorName            String
  items                 QuoteItem[]
  totalPrice            Float
  deliveryDate          DateTime
  createdAt             DateTime            @default(now())
  status                String // Submitted, Awarded, Rejected, Standby, etc.
  notes                 String?
  rank                  Int?
  answers               QuoteAnswer[]
  scores                CommitteeScoreSet[]
  finalAverageScore     Float?
  cpoDocumentUrl        String?
  experienceDocumentUrl String?

  @@index([requisitionId])
  @@index([vendorId])
}

model QuoteItem {
  id                String     @id @default(cuid())
  quotationId       String
  quotation         Quotation  @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  scores            ItemScore[]

  @@index([quotationId])
}

model QuoteAnswer {
  id          String    @id @default(cuid())
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  questionId  String
  question    CustomQuestion @relation(fields: [questionId], references: [id])
  answer      String

  @@index([quotationId])
  @@index([questionId])
}

model CommitteeAssignment {
  userId          String
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  scoresSubmitted Boolean             @default(false)

  @@id([userId, requisitionId])
}

model CommitteeScoreSet {
  id               String      @id @default(cuid())
  quotationId      String
  quotation        Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  scorerId         String
  scorer           User        @relation(fields: [scorerId], references: [id])
  scorerName       String
  itemScores       ItemScore[]
  finalScore       Float       @default(0)
  committeeComment String?
  submittedAt      DateTime    @default(now())

  @@unique([quotationId, scorerId])
  @@index([scorerId])
}

model ItemScore {
  id              String           @id @default(cuid())
  scoreSetId      String
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  quoteItemId     String           @unique
  quoteItem       QuoteItem        @relation(fields: [quoteItemId], references: [id])
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
  finalScore      Float

  @@index([scoreSetId])
}

model FinancialScore {
  id                String             @id @default(cuid())
  itemScoreId       String
  itemScore         ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  criterionId       String
  criterion         FinancialCriterion @relation(fields: [criterionId], references: [id])
  score             Int
  comment           String?

  @@index([itemScoreId])
  @@index([criterionId])
}

model TechnicalScore {
  id          String             @id @default(cuid())
  itemScoreId String
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  criterionId String
  criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id])
  score       Int
  comment     String?

  @@index([itemScoreId])
  @@index([criterionId])
}

model Review {
  id            String              @id @default(cuid())
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  reviewerId    String
  reviewer      User                @relation(fields: [reviewerId], references: [id])
  committeeType String // e.g., "Committee A", "Committee B"
  decision      String // Approved, Rejected
  comment       String?
  createdAt     DateTime            @default(now())

  @@index([requisitionId])
  @@index([reviewerId])
}

model Contract {
  id             String              @id @default(cuid())
  contractNumber String              @unique @default(cuid())
  requisitionId  String
  requisition    PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendorId       String
  vendor         Vendor              @relation(fields: [vendorId], references: [id])
  startDate      DateTime
  endDate        DateTime
  filePath       String?
  status         String // Draft, Active, Expired
  createdAt      DateTime            @default(now())

  @@index([requisitionId])
  @@index([vendorId])
}

model PurchaseOrder {
  id               String             @id @default(cuid())
  transactionId    String?
  requisitionId    String             @unique
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionTitle String
  vendorId         String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  items            POItem[]
  totalAmount      Float
  status           String
  createdAt        DateTime           @default(now())
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]

  @@index([vendorId])
}

model POItem {
  id                String          @id @default(cuid())
  purchaseOrderId   String
  purchaseOrder     PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int             @default(0)
  receiptItems      ReceiptItem[]

  @@index([purchaseOrderId])
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedById    String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]

  @@index([purchaseOrderId])
  @@index([receivedById])
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNoteId String
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  poItemId           String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  quantityReceived   Int
  condition          String // Good, Damaged, Incorrect
  notes              String?

  @@index([goodsReceiptNoteId])
  @@index([poItemId])
}

model Invoice {
  id               String        @id @default(cuid())
  transactionId    String?
  purchaseOrderId  String
  po               PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  vendorId         String
  vendor           Vendor        @relation(fields: [vendorId], references: [id])
  invoiceDate      DateTime
  items            InvoiceItem[]
  totalAmount      Float
  status           String // Pending, Approved_for_Payment, Paid, Disputed
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?

  @@index([purchaseOrderId])
  @@index([vendorId])
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float

  @@index([invoiceId])
}

model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime
  userId        String?
  user          User?     @relation(fields: [userId], references: [id])
  action        String
  entity        String
  entityId      String
  details       String

  @@index([userId])
}

    