// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                  @id @default(cuid())
  name                     String
  email                    String                  @unique
  password                 String
  role                     String // e.g., Requester, Approver, Vendor
  vendorId                 String?                 @unique
  vendor                   Vendor?                 @relation(fields: [vendorId], references: [id])
  departmentId             String?
  department               Department?             @relation(fields: [departmentId], references: [id])
  createdRequisitions      PurchaseRequisition[]   @relation("Requester")
  approvedRequisitions     PurchaseRequisition[]   @relation("Approver")
  auditLogs                AuditLog[]
  receipts                 GoodsReceiptNote[]
  committeeAssignments     CommitteeAssignment[]
  scoreSets                CommitteeScoreSet[]     @relation("Scorer")
  financialCommitteeFor    PurchaseRequisition[]   @relation("FinancialCommittee")
  technicalCommitteeFor    PurchaseRequisition[]   @relation("TechnicalCommittee")
}

model Department {
  id           String                @id @default(cuid())
  name         String                @unique
  users        User[]
  requisitions PurchaseRequisition[]
}

model Vendor {
  id             String        @id @default(cuid())
  name           String
  contactPerson  String
  email          String        @unique
  phone          String
  address        String
  userId         String        @unique
  user           User?
  kycStatus      String        @default("Pending") // Pending, Verified, Rejected
  rejectionReason String?
  kycDocuments   KYC_Document[]
  quotations     Quotation[]
  purchaseOrders PurchaseOrder[]
  contracts      Contract[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  name        String
  url         String
  submittedAt DateTime @default(now())
}

model PurchaseRequisition {
  id                             String           @id @default(cuid())
  transactionId                  String?
  requesterId                    String
  requester                      User             @relation("Requester", fields: [requesterId], references: [id])
  requesterName                  String
  title                          String
  justification                  String
  department                     Department?      @relation(fields: [departmentId], references: [id])
  departmentId                   String?
  status                         String           @default("Draft")
  totalPrice                     Float
  createdAt                      DateTime         @default(now())
  updatedAt                      DateTime         @updatedAt
  approverId                     String?
  approver                       User?            @relation("Approver", fields: [approverId], references: [id])
  approverComment                String?
  purchaseOrderId                String?          @unique
  purchaseOrder                  PurchaseOrder?
  allowedVendorIds               String[]
  deadline                       DateTime?
  scoringDeadline                DateTime?
  awardResponseDeadline          DateTime?
  awardResponseDurationMinutes   Int?
  cpoAmount                      Float?
  committeeName                  String?
  committeePurpose               String?
  rfqSettings                    Json?
  items                          RequisitionItem[]
  customQuestions                CustomQuestion[]
  evaluationCriteria             EvaluationCriteria?
  quotations                     Quotation[]
  financialCommitteeMembers      User[]           @relation("FinancialCommittee")
  technicalCommitteeMembers      User[]           @relation("TechnicalCommittee")
  committeeAssignments           CommitteeAssignment[]
  contracts                      Contract[]
}

model RequisitionItem {
  id            String              @id @default(cuid())
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  name          String
  description   String?
  quantity      Int
  unitPrice     Float
  quoteItems    QuoteItem[]
}

model CustomQuestion {
  id            String              @id @default(cuid())
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  questionText  String
  questionType  String // text, boolean, multiple-choice, file
  isRequired    Boolean             @default(true)
  options       String[]
  answers       QuoteAnswer[]
}

model EvaluationCriteria {
  id                String                 @id @default(cuid())
  requisitionId     String                 @unique
  requisition       PurchaseRequisition    @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  financialWeight   Int
  technicalWeight   Int
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                 String
  weight               Int
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                 String
  weight               Int
  scores               TechnicalScore[]
}

model Quotation {
  id                String              @id @default(cuid())
  transactionId     String?
  requisitionId     String
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  vendorId          String
  vendor            Vendor              @relation(fields: [vendorId], references: [id])
  vendorName        String
  totalPrice        Float
  deliveryDate      DateTime
  status            String
  notes             String?
  rank              Int?
  cpoDocumentUrl    String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  items             QuoteItem[]
  answers           QuoteAnswer[]
  scores            CommitteeScoreSet[]
  finalAverageScore Float?
}

model QuoteItem {
  id                String      @id @default(cuid())
  quotationId       String
  quotation         Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  requisitionItemId String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id], onDelete: Cascade)
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  scores            ItemScore[]
}

model QuoteAnswer {
  id          String         @id @default(cuid())
  quotationId String
  quotation   Quotation      @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  questionId  String
  question    CustomQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer      String
}

model CommitteeAssignment {
  userId          String
  user            User                @relation(fields: [userId], references: [id])
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  scoresSubmitted Boolean             @default(false)

  @@id([userId, requisitionId])
}

model CommitteeScoreSet {
  id               String           @id @default(cuid())
  quotationId      String
  quotation        Quotation        @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  scorerId         String
  scorer           User             @relation("Scorer", fields: [scorerId], references: [id])
  scorerName       String
  committeeComment String?
  finalScore       Float // Average score for the whole quote from this scorer
  submittedAt      DateTime         @default(now())
  itemScores       ItemScore[]
}

model ItemScore {
  id              String            @id @default(cuid())
  scoreSetId      String
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  quoteItemId     String
  quoteItem       QuoteItem         @relation(fields: [quoteItemId], references: [id])
  finalScore      Float // Final weighted score for this specific item
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
}

model FinancialScore {
  id            String             @id @default(cuid())
  itemScoreId   String
  itemScore     ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  criterionId   String
  criterion     FinancialCriterion @relation(fields: [criterionId], references: [id])
  score         Int
  comment       String?
}

model TechnicalScore {
  id            String             @id @default(cuid())
  itemScoreId   String
  itemScore     ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  criterionId   String
  criterion     TechnicalCriterion @relation(fields: [criterionId], references: [id])
  score         Int
  comment       String?
}

model PurchaseOrder {
  id               String             @id @default(cuid())
  transactionId    String?
  requisitionId    String             @unique
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionTitle String
  vendorId         String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  totalAmount      Float
  status           String
  createdAt        DateTime           @default(now())
  notes            String?
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id                String           @id @default(cuid())
  purchaseOrderId   String
  purchaseOrder     PurchaseOrder    @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  requisitionItemId String           @unique
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int              @default(0)
  receiptItems      ReceiptItem[]
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedById    String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNoteId String
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  poItemId           String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  quantityReceived   Int
  condition          String // Good, Damaged, Incorrect
  notes              String?
}

model Invoice {
  id               String        @id @default(cuid())
  transactionId    String?
  purchaseOrderId  String
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  vendorId         String
  invoiceDate      DateTime
  totalAmount      Float
  status           String // Pending, Approved for Payment, Paid, Disputed
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  items            InvoiceItem[]
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model Contract {
  id             String              @id @default(cuid())
  contractNumber String              @unique @default(cuid())
  requisitionId  String
  requisition    PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendorId       String
  vendor         Vendor              @relation(fields: [vendorId], references: [id])
  startDate      DateTime
  endDate        DateTime
  filePath       String?
  status         String
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}

model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime
  userId        String?
  user          User?     @relation(fields: [userId], references: [id])
  action        String
  entity        String
  entityId      String
  details       String
}
