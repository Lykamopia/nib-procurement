
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String                @id @default(uuid())
  name                    String
  email                   String                @unique
  password                String
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  departmentId            String?
  vendorId                String?               @unique
  approvalLimit           Float?
  managerId               String?
  currentApproverForReqs  PurchaseRequisition[] @relation("CurrentApprover")
  approvedReqs            PurchaseRequisition[] @relation("Approver")
  
  department              Department?           @relation(fields: [departmentId], references: [id])
  vendor                  Vendor?               @relation(fields: [vendorId], references: [id])
  manager                 User?                 @relation("ManagerSubordinate", fields: [managerId], references: [id])
  subordinates            User[]                @relation("ManagerSubordinate")
  
  createdRequisitions     PurchaseRequisition[] @relation("Requester")
  financialCommitteeFor   PurchaseRequisition[] @relation("FinancialCommittee")
  technicalCommitteeFor   PurchaseRequisition[] @relation("TechnicalCommittee")

  committeeAssignments    CommitteeAssignment[]
  createdAuditLogs        AuditLog[]
  receivedGoods           GoodsReceiptNote[]
  scoresSubmitted         CommitteeScoreSet[]

  roleId                  String
  role                    Role                  @relation(fields: [roleId], references: [id])
}

model Role {
  id            String        @id @default(uuid())
  name          String        @unique
  description   String?
  users         User[]
  permissions   Permission[]  @relation("RolePermissions")
  isSystemRole  Boolean       @default(false)
}

model Permission {
  id          String  @id @default(uuid())
  action      String  // e.g., 'CREATE', 'READ', 'UPDATE', 'DELETE', 'APPROVE'
  subject     String  // e.g., 'Requisition', 'Vendor', 'Invoice'
  description String?
  roles       Role[]  @relation("RolePermissions")

  @@unique([action, subject])
}

model Department {
  id           String                @id @default(uuid())
  name         String                @unique
  users        User[]
  requisitions PurchaseRequisition[]
}

model Vendor {
  id            String        @id @default(uuid())
  name          String
  contactPerson String
  email         String        @unique
  phone         String
  address       String
  kycStatus     String        @default("Pending")
  rejectionReason String?
  userId        String        @unique
  user          User?
  kycDocuments  KYC_Document[]
  quotations    Quotation[]
  purchaseOrders PurchaseOrder[]
  contracts     Contract[]
}

model KYC_Document {
  id          String   @id @default(uuid())
  vendorId    String
  name        String
  url         String
  submittedAt DateTime
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model PurchaseRequisition {
  id                          String    @id @default(uuid())
  transactionId               String?   @unique
  requesterId                 String
  requesterName               String
  departmentId                String?
  title                       String
  justification               String
  totalPrice                  Float
  status                      String
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  approverId                  String?
  approverComment             String?
  currentApproverId           String?
  purchaseOrderId             String?   @unique
  deadline                    DateTime?
  scoringDeadline             DateTime?
  awardResponseDeadline       DateTime?
  awardResponseDurationMinutes Int?
  committeeName               String?
  committeePurpose            String?
  cpoAmount                   Float?
  rfqSettings                 Json      @default("{}")
  allowedVendorIds            String[]
  awardedQuoteItemIds         String[]

  requester               User         @relation("Requester", fields: [requesterId], references: [id])
  department              Department?  @relation(fields: [departmentId], references: [id])
  approver                User?        @relation("Approver", fields: [approverId], references: [id])
  currentApprover         User?        @relation("CurrentApprover", fields: [currentApproverId], references: [id])

  items                   RequisitionItem[]
  customQuestions         CustomQuestion[]
  evaluationCriteria      EvaluationCriteria?
  quotations              Quotation[]
  purchaseOrder           PurchaseOrder?
  financialCommitteeMembers User[]         @relation("FinancialCommittee")
  technicalCommitteeMembers User[]         @relation("TechnicalCommittee")
  committeeAssignments    CommitteeAssignment[]
  contract                Contract?
}

model CommitteeAssignment {
  userId          String
  requisitionId   String
  scoresSubmitted Boolean @default(false)
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)

  @@id([userId, requisitionId])
}

model RequisitionItem {
  id              String                @id @default(uuid())
  requisitionId   String
  name            String
  description     String?
  quantity        Int
  unitPrice       Float
  purchaseRequisition PurchaseRequisition   @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  quoteItems      QuoteItem[]
  poItem          POItem?
}

model CustomQuestion {
  id            String                @id @default(uuid())
  requisitionId String
  questionText  String
  questionType  String
  isRequired    Boolean               @default(true)
  options       String[]
  requisition   PurchaseRequisition   @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  answers       QuoteAnswer[]
}

model EvaluationCriteria {
  id                String                 @id @default(uuid())
  requisitionId     String                 @unique
  financialWeight   Float
  technicalWeight   Float
  requisition       PurchaseRequisition    @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(uuid())
  evaluationCriteriaId String
  name                 String
  weight               Float
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String             @id @default(uuid())
  evaluationCriteriaId String
  name                 String
  weight               Float
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  scores               TechnicalScore[]
}

model Quotation {
  id                  String              @id @default(uuid())
  transactionId       String?
  requisitionId       String
  vendorId            String
  vendorName          String
  totalPrice          Float
  deliveryDate        DateTime
  status              String
  notes               String?
  rank                Int?
  finalAverageScore   Float?
  cpoDocumentUrl      String?
  experienceDocumentUrl String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  requisition         PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  vendor              Vendor              @relation(fields: [vendorId], references: [id])
  items               QuoteItem[]
  answers             QuoteAnswer[]
  scoreSets           CommitteeScoreSet[]
}

model QuoteItem {
  id                String      @id @default(uuid())
  quotationId       String
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  quotation         Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  itemScores        ItemScore[]
}

model QuoteAnswer {
  id          String         @id @default(uuid())
  quotationId String
  questionId  String
  answer      String
  quotation   Quotation      @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  question    CustomQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model CommitteeScoreSet {
  id               String      @id @default(uuid())
  quotationId      String
  scorerId         String
  scorerName       String
  committeeComment String?
  finalScore       Float
  submittedAt      DateTime    @default(now())

  quotation        Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  scorer           User        @relation(fields: [scorerId], references: [id])
  itemScores       ItemScore[]
}

model ItemScore {
  id              String            @id @default(uuid())
  scoreSetId      String
  quoteItemId     String
  finalScore      Float
  
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  quoteItem       QuoteItem         @relation(fields: [quoteItemId], references: [id])
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
}

model FinancialScore {
  id          String           @id @default(uuid())
  itemScoreId String
  criterionId String
  score       Float
  comment     String?
  
  itemScore   ItemScore        @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  criterion   FinancialCriterion @relation(fields: [criterionId], references: [id])
}

model TechnicalScore {
  id          String           @id @default(uuid())
  itemScoreId String
  criterionId String
  score       Float
  comment     String?
  
  itemScore   ItemScore        @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id])
}

model PurchaseOrder {
  id               String             @id @default(uuid())
  transactionId    String?
  requisitionId    String             @unique
  requisitionTitle String
  vendorId         String
  totalAmount      Float
  status           String
  notes            String?
  createdAt        DateTime           @default(now())

  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
  contract         Contract?
}

model POItem {
  id                String          @id @default(uuid())
  purchaseOrderId   String
  requisitionItemId String          @unique
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int
  
  purchaseOrder     PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  receiptItems      ReceiptItem[]
}

model GoodsReceiptNote {
  id              String        @id @default(uuid())
  transactionId   String?
  purchaseOrderId String
  receivedById    String
  receivedDate    DateTime      @default(now())
  
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String           @id @default(uuid())
  goodsReceiptNoteId String
  poItemId           String
  quantityReceived   Int
  condition          String // e.g., 'Good', 'Damaged', 'Incorrect'
  notes              String?
  
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  poItem             POItem           @relation(fields: [poItemId], references: [id])
}

model Invoice {
  id               String        @id @default(uuid())
  transactionId    String?
  purchaseOrderId  String
  vendorId         String
  invoiceDate      DateTime
  totalAmount      Float
  status           String
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  
  po               PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  items            InvoiceItem[]
}

model InvoiceItem {
  id          String  @id @default(uuid())
  invoiceId   String
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Contract {
  id              String              @id @default(uuid())
  contractNumber  String              @unique @default(cuid())
  requisitionId   String              @unique
  vendorId        String
  startDate       DateTime
  endDate         DateTime
  filePath        String?
  status          String
  createdAt       DateTime            @default(now())
  
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor          Vendor              @relation(fields: [vendorId], references: [id])
  purchaseOrder   PurchaseOrder?      @relation(fields: [id], references: [id])
}

model AuditLog {
  id            String   @id @default(uuid())
  transactionId String?
  timestamp     DateTime
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String
  user          User?    @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: SetNull)
}

    