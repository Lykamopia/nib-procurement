
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NECESSARY FOR NEXTAUTH
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  Requester
  Approver
  Procurement_Officer
  Finance
  Admin
  Receiving
  Vendor
  Committee_Member
  Committee
}

enum KycStatus {
  Pending
  Verified
  Rejected
}

model User {
  id                          String                 @id @default(cuid())
  name                        String
  email                       String                 @unique
  password                    String
  role                        Role                   @relation(fields: [roleId], references: [id])
  roleId                      String
  approvalLimit               Float?
  department                  Department?            @relation(fields: [departmentId], references: [id])
  departmentId                String?
  vendor                      Vendor?                @relation(fields: [vendorId], references: [id])
  vendorId                    String?                @unique
  manager                     User?                  @relation("ManagerSubordinates", fields: [managerId], references: [id])
  managerId                   String?
  subordinates                User[]                 @relation("ManagerSubordinates")
  createdRequisitions         PurchaseRequisition[]  @relation("requester")
  approvedRequisitions        PurchaseRequisition[]  @relation("approver")
  currentApproverForReqs      PurchaseRequisition[]  @relation("currentApprover")
  financialCommitteeFor       PurchaseRequisition[]  @relation("financialCommittee")
  technicalCommitteeFor       PurchaseRequisition[]  @relation("technicalCommittee")
  committeeAssignments        CommitteeAssignment[]
  accounts                    Account[]
  sessions                    Session[]
  goodsReceipts               GoodsReceiptNote[]
  auditLogs                   AuditLog[]
  CommitteeScoreSet           CommitteeScoreSet[]
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  users       User[]
  description String?
}

model Department {
  id           String                @id @default(cuid())
  name         String                @unique
  users        User[]
  requisitions PurchaseRequisition[]
}

model Vendor {
  id            String          @id @default(cuid())
  userId        String          @unique
  name          String
  contactPerson String
  email         String
  phone         String
  address       String
  kycStatus     KycStatus
  rejectionReason String?
  user          User            @relation(fields: [userId], references: [id])
  kycDocuments  KYC_Document[]
  quotations    Quotation[]
  purchaseOrders PurchaseOrder[]
  contracts     Contract[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  name        String
  url         String
  submittedAt DateTime
}

enum RequisitionStatus {
  Draft
  Pending_Approval
  Approved
  Rejected
  RFQ_In_Progress
  PO_Created
  Fulfilled
  Closed
  Pending_Managerial_Approval
}

enum Urgency {
  Low
  Medium
  High
  Critical
}

model PurchaseRequisition {
  id                           String                 @id @default(cuid())
  transactionId                String?                @unique
  requester                    User                   @relation("requester", fields: [requesterId], references: [id])
  requesterId                  String
  requesterName                String
  approver                     User?                  @relation("approver", fields: [approverId], references: [id])
  approverId                   String?
  currentApprover              User?                  @relation("currentApprover", fields: [currentApproverId], references: [id])
  currentApproverId            String?
  title                        String
  department                   Department             @relation(fields: [departmentId], references: [id])
  departmentId                 String
  items                        RequisitionItem[]
  justification                String
  status                       RequisitionStatus
  totalPrice                   Float
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  approverComment              String?
  purchaseOrderId              String?
  deadline                     DateTime?
  scoringDeadline              DateTime?
  awardResponseDeadline        DateTime?
  awardResponseDurationMinutes Int?
  committeeName                String?
  committeePurpose             String?
  cpoAmount                    Float?
  rfqSettings                  Json                   @default("{}")
  allowedVendorIds             String[]
  awardedQuoteItemIds          String[]
  urgency                      Urgency                @default(Low)
  customQuestions              CustomQuestion[]
  evaluationCriteria           EvaluationCriteria?
  quotations                   Quotation[]
  purchaseOrder                PurchaseOrder?
  financialCommitteeMembers    User[]                 @relation("financialCommittee")
  technicalCommitteeMembers    User[]                 @relation("technicalCommittee")
  committeeAssignments         CommitteeAssignment[]
  contract                     Contract?
}

model RequisitionItem {
  id              String               @id @default(cuid())
  requisition     PurchaseRequisition  @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId   String
  name            String
  quantity        Int
  unitPrice       Float
  description     String?
  quotedItems     QuoteItem[]
  poItems         POItem[]
}

model CustomQuestion {
  id              String               @id @default(cuid())
  requisition     PurchaseRequisition? @relation(fields: [requisitionId], references: [id])
  requisitionId   String?
  questionText    String
  questionType    String
  isRequired      Boolean              @default(true)
  options         String[]
  answers         QuoteAnswer[]
}

model EvaluationCriteria {
  id                String                 @id @default(cuid())
  requisition       PurchaseRequisition    @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId     String                 @unique
  financialWeight   Float
  technicalWeight   Float
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Float
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Float
  scores               TechnicalScore[]
}

model Quotation {
  id                  String              @id @default(cuid())
  transactionId       String?
  requisition         PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId       String
  vendor              Vendor              @relation(fields: [vendorId], references: [id])
  vendorId            String
  vendorName          String
  items               QuoteItem[]
  totalPrice          Float
  deliveryDate        DateTime
  createdAt           DateTime
  status              String
  notes               String?
  rank                Int?
  answers             QuoteAnswer[]
  scores              CommitteeScoreSet[]
  finalAverageScore   Float?
  cpoDocumentUrl      String?
  experienceDocumentUrl String?
}

model QuoteItem {
  id                String          @id @default(cuid())
  quotation         Quotation       @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId       String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  itemScores        ItemScore[]
}

model QuoteAnswer {
  id          String         @id @default(cuid())
  quotation   Quotation      @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId String
  question    CustomQuestion @relation(fields: [questionId], references: [id])
  questionId  String
  answer      String
}

model CommitteeScoreSet {
  id               String        @id @default(cuid())
  quotation        Quotation     @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId      String
  scorer           User          @relation(fields: [scorerId], references: [id])
  scorerId         String
  scorerName       String
  committeeComment String?
  itemScores       ItemScore[]
  finalScore       Float
  submittedAt      DateTime      @default(now())
}

model ItemScore {
  id                String              @id @default(cuid())
  scoreSet          CommitteeScoreSet   @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  scoreSetId        String
  quoteItem         QuoteItem           @relation(fields: [quoteItemId], references: [id])
  quoteItemId       String              @unique
  finalScore        Float
  financialScores   FinancialScore[]
  technicalScores   TechnicalScore[]
}

model FinancialScore {
  id                String             @id @default(cuid())
  itemScore         ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId       String
  criterion         FinancialCriterion @relation(fields: [criterionId], references: [id])
  criterionId       String
  score             Float
  comment           String?
}

model TechnicalScore {
  id                String             @id @default(cuid())
  itemScore         ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId       String
  criterion         TechnicalCriterion @relation(fields: [criterionId], references: [id])
  criterionId       String
  score             Float
  comment           String?
}

model PurchaseOrder {
  id               String             @id @default(cuid())
  transactionId    String?
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId    String             @unique
  requisitionTitle String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  vendorId         String
  items            POItem[]
  totalAmount      Float
  status           String
  createdAt        DateTime           @default(now())
  notes            String?
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id                String          @id @default(cuid())
  purchaseOrder     PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  purchaseOrderId   String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int
  receiptItems      ReceiptItem[]
}

enum ReceiptItemCondition {
  Good
  Damaged
  Incorrect
}

model GoodsReceiptNote {
  id                String        @id @default(cuid())
  transactionId     String?
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId   String
  receivedBy        User          @relation(fields: [receivedById], references: [id])
  receivedById      String
  receivedDate      DateTime      @default(now())
  items             ReceiptItem[]
}

model ReceiptItem {
  id                 String               @id @default(cuid())
  goodsReceiptNote   GoodsReceiptNote     @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  goodsReceiptNoteId String
  poItem             POItem               @relation(fields: [poItemId], references: [id])
  poItemId           String
  quantityReceived   Int
  condition          ReceiptItemCondition
  notes              String?
}

model Invoice {
  id               String       @id @default(cuid())
  transactionId    String?
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId  String
  vendorId         String
  invoiceDate      DateTime
  items            InvoiceItem[]
  totalAmount      Float
  status           String
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
}

model InvoiceItem {
  id        String    @id @default(cuid())
  invoice   Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId String
  name      String
  quantity  Int
  unitPrice Float
  totalPrice Float
}

model Contract {
  id             String              @id @default(cuid())
  contractNumber String              @unique @default(cuid())
  requisition    PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId  String              @unique
  vendor         Vendor              @relation(fields: [vendorId], references: [id])
  vendorId       String
  startDate      DateTime
  endDate        DateTime
  filePath       String?
  status         String
  createdAt      DateTime            @default(now())
}

model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String
}

model CommitteeAssignment {
  userId          String
  requisitionId   String
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  scoresSubmitted Boolean             @default(false)

  @@id([userId, requisitionId])
}
