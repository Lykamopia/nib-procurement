// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                @id @default(cuid())
  name                      String
  email                     String                @unique
  password                  String
  roleName                  UserRole
  departmentId              String?
  vendorId                  String?               @unique
  approvalLimit             Float?
  managerId                 String?
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime              @updatedAt
  
  department                Department?           @relation(fields: [departmentId], references: [id])
  manager                   User?                 @relation("ManagerSubordinate", fields: [managerId], references: [id])
  subordinates              User[]                @relation("ManagerSubordinate")
  vendor                    Vendor?               @relation(fields: [vendorId], references: [id])
  role                      Role                  @relation(fields: [roleName], references: [name])
  committeeAssignments      CommitteeAssignment[]
  createdContracts          Contract[]
  scoredQuotes              CommitteeScoreSet[]
  goodsReceipts             GoodsReceiptNote[]

  // Relations for PurchaseRequisition
  requisitions              PurchaseRequisition[] @relation("Requester")
  approvedRequisitions      PurchaseRequisition[] @relation("Approvals")
  currentApprovals          PurchaseRequisition[] @relation("CurrentApprovals")
  
  // Relations for Committees
  financialCommittees       PurchaseRequisition[] @relation("FinancialCommittee")
  technicalCommittees       PurchaseRequisition[] @relation("TechnicalCommittee")

  auditLogs                 AuditLog[]
}

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  users       User[]
  requisitions PurchaseRequisition[]
}

model PurchaseRequisition {
  id                          String      @id @default(cuid())
  transactionId               String?
  requesterId                 String
  requester                   User        @relation("Requester", fields: [requesterId], references: [id])
  requesterName               String
  title                       String
  justification               String
  status                      String      @default("Draft")
  totalPrice                  Float
  createdAt                   DateTime    @default(now())
  updatedAt                   DateTime    @updatedAt
  
  approverId                  String?
  approver                    User?       @relation("Approvals", fields: [approverId], references: [id])
  approverComment             String?
  
  currentApproverId           String?
  currentApprover             User?       @relation("CurrentApprovals", fields: [currentApproverId], references: [id])
  
  purchaseOrderId             String?     @unique
  purchaseOrder               PurchaseOrder?

  department                  Department  @relation(fields: [departmentId], references: [id])
  departmentId                String

  items                       RequisitionItem[]
  customQuestions             CustomQuestion[]
  
  evaluationCriteria          EvaluationCriteria?
  
  financialCommitteeMembers   User[]      @relation("FinancialCommittee")
  technicalCommitteeMembers   User[]      @relation("TechnicalCommittee")
  
  committeeName               String?
  committeePurpose            String?
  
  committeeAssignments        CommitteeAssignment[]

  allowedVendorIds            String[]
  deadline                    DateTime?
  scoringDeadline             DateTime?
  awardResponseDeadline       DateTime?
  awardResponseDurationMinutes Int?
  cpoAmount                   Float?
  
  rfqSettings                 Json?
  
  awardedQuoteItemIds         String[]    @default([])
  
  quotations                  Quotation[]
  contracts                   Contract[]
}

model RequisitionItem {
  id              String   @id @default(cuid())
  name            String
  quantity        Int
  unitPrice       Float?
  description     String?
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId   String
  
  quotedItems     QuoteItem[]
  poItems         POItem[]
}

model CustomQuestion {
  id                String  @id @default(cuid())
  questionText      String
  questionType      String // e.g., 'text', 'boolean', 'multiple-choice', 'file'
  isRequired        Boolean @default(false)
  options           String[]
  requisitionItemId String? // Optional link to a specific item
  
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId     String
  
  answers           QuoteAnswer[]
}

model EvaluationCriteria {
  id              String      @id @default(cuid())
  requisitionId   String      @unique
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  financialWeight Float
  technicalWeight Float
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                    String      @id @default(cuid())
  name                  String
  weight                Float
  evaluationCriteria    EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  evaluationCriteriaId  String
  scores                FinancialScore[]
}

model TechnicalCriterion {
  id                    String      @id @default(cuid())
  name                  String
  weight                Float
  evaluationCriteria    EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  evaluationCriteriaId  String
  scores                TechnicalScore[]
}

model CommitteeAssignment {
  userId          String
  requisitionId   String
  scoresSubmitted Boolean @default(false)

  user            User @relation(fields: [userId], references: [id])
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])

  @@id([userId, requisitionId])
}

// Intermediary table for many-to-many relationship between Role and Permission
model PermissionsOnRoles {
  roleName     UserRole
  permissionId String

  role         Role       @relation(fields: [roleName], references: [name])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleName, permissionId])
}

model Role {
  name        UserRole      @unique
  permissions PermissionsOnRoles[]
  users       User[]
}

model Permission {
  id          String   @id @default(cuid())
  action      PermissionAction
  subject     PermissionSubject
  description String?
  roles       PermissionsOnRoles[]

  @@unique([action, subject])
}

model Vendor {
  id              String      @id @default(cuid())
  name            String
  contactPerson   String
  email           String
  phone           String
  address         String
  kycStatus       String      @default("Pending")
  rejectionReason String?
  userId          String      @unique
  user            User
  
  kycDocuments    KYC_Document[]
  quotations      Quotation[]
  purchaseOrders  PurchaseOrder[]
  contracts       Contract[]
}

model KYC_Document {
    id          String   @id @default(cuid())
    vendorId    String
    vendor      Vendor   @relation(fields: [vendorId], references: [id])
    name        String
    url         String
    submittedAt DateTime @default(now())
}

model Quotation {
  id            String   @id @default(cuid())
  transactionId String?
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendorId      String
  vendor        Vendor   @relation(fields: [vendorId], references: [id])
  vendorName    String
  totalPrice    Float
  deliveryDate  DateTime
  status        String   @default("Submitted")
  notes         String?
  rank          Int?
  createdAt     DateTime @default(now())
  
  items         QuoteItem[]
  answers       QuoteAnswer[]
  scores        CommitteeScoreSet[]
  
  cpoDocumentUrl        String?
  experienceDocumentUrl String?
  finalAverageScore     Float?
}

model QuoteItem {
  id                String      @id @default(cuid())
  requisitionItemId String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  
  quotationId       String
  quotation         Quotation   @relation(fields: [quotationId], references: [id])
  
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?

  itemScores        ItemScore[]
}

model QuoteAnswer {
  id          String    @id @default(cuid())
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id])
  questionId  String
  question    CustomQuestion @relation(fields: [questionId], references: [id])
  answer      String
}

model CommitteeScoreSet {
  id                String      @id @default(cuid())
  quotationId       String
  quotation         Quotation   @relation(fields: [quotationId], references: [id])
  
  scorerId          String
  scorer            User        @relation(fields: [scorerId], references: [id])
  scorerName        String
  
  finalScore        Float
  committeeComment  String?
  submittedAt       DateTime    @default(now())
  
  itemScores        ItemScore[]
}

model ItemScore {
  id            String @id @default(cuid())
  scoreSetId    String
  scoreSet      CommitteeScoreSet @relation(fields: [scoreSetId], references: [id])
  quoteItemId   String
  quoteItem     QuoteItem @relation(fields: [quoteItemId], references: [id])
  finalScore    Float

  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
}

model FinancialScore {
  id          String    @id @default(cuid())
  itemScoreId String
  itemScore   ItemScore @relation(fields: [itemScoreId], references: [id])
  criterionId String
  criterion   FinancialCriterion @relation(fields: [criterionId], references: [id])
  score       Float
  comment     String?
}

model TechnicalScore {
  id          String    @id @default(cuid())
  itemScoreId String
  itemScore   ItemScore @relation(fields: [itemScoreId], references: [id])
  criterionId String
  criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id])
  score       Float
  comment     String?
}

model Contract {
  id             String    @id @default(cuid())
  contractNumber String    @default(cuid())
  transactionId  String?
  requisition    PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId  String    @unique
  vendorId       String
  vendor         Vendor    @relation(fields: [vendorId], references: [id])
  startDate      DateTime
  endDate        DateTime
  filePath       String?
  status         String    @default("Draft")
  createdAt      DateTime  @default(now())
  createdById    String
  createdBy      User      @relation(fields: [createdById], references: [id])
}

model PurchaseOrder {
  id               String   @id @default(cuid())
  transactionId    String?
  requisitionId    String   @unique
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionTitle String
  vendorId         String
  vendor           Vendor   @relation(fields: [vendorId], references: [id])
  totalAmount      Float
  status           String   @default("Issued")
  createdAt        DateTime @default(now())
  notes            String?
  
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id                String  @id @default(cuid())
  purchaseOrderId   String
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  
  requisitionItemId String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int     @default(0)
  
  receiptItems      ReceiptItem[]
}

model GoodsReceiptNote {
  id              String   @id @default(cuid())
  transactionId   String?
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedById    String
  receivedBy      User     @relation(fields: [receivedById], references: [id])
  receivedDate    DateTime @default(now())
  
  items           ReceiptItem[]
  photos          Json[]
}

model ReceiptItem {
  id                String  @id @default(cuid())
  grnId             String
  grn               GoodsReceiptNote @relation(fields: [grnId], references: [id])
  poItemId          String
  poItem            POItem  @relation(fields: [poItemId], references: [id])
  quantityReceived  Int
  condition         String  // e.g., 'Good', 'Damaged', 'Incorrect'
  notes             String?
}

model Invoice {
  id                String   @id @default(cuid())
  transactionId     String?
  purchaseOrderId   String
  po                PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  vendorId          String
  invoiceDate       DateTime
  totalAmount       Float
  status            String   @default("Pending")
  documentUrl       String?
  paymentDate       DateTime?
  paymentReference  String?
  
  items             InvoiceItem[]
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime  @default(now())
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String
}

enum UserRole {
  Admin
  Procurement_Officer
  Requester
  Approver
  Finance
  Receiving
  Committee
  Committee_Member
  Vendor
}

enum PermissionAction {
  VIEW
  CREATE
  EDIT
  DELETE
  APPROVE
  REJECT
  SUBMIT
  VERIFY
  SEND
  MANAGE
  PROCESS
  FINALIZE_SCORES
  SCORE
  SUBMIT_SCORES
}

enum PermissionSubject {
  DASHBOARD
  REQUISITIONS
  APPROVALS
  VENDORS
  QUOTATIONS
  CONTRACTS
  PURCHASE_ORDERS
  INVOICES
  GOODS_RECEIPT
  RECORDS
  AUDIT_LOG
  SETTINGS
  REQUISITION
  VENDOR
  RFQ
  COMMITTEE
  PAYMENT
  PERMISSIONS
}
