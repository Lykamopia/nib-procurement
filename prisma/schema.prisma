// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  users       User[]
}

model Department {
  id           String                @id @default(cuid())
  name         String                @unique
  description  String?
  headId       String?               @unique
  head         User?                 @relation("DepartmentHead", fields: [headId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  requisitions PurchaseRequisition[]
  users        User[]                @relation("DepartmentMembers")
}

model User {
  id                                String                  @id @default(cuid())
  name                              String
  email                             String                  @unique
  password                          String
  role                              String
  departmentId                      String?
  approvalLimit                     Float?
  managerId                         String?
  createdAt                         DateTime                @default(now())
  updatedAt                         DateTime                @updatedAt
  vendorId                          String?                 @unique
  vendor                            Vendor?                 @relation(fields: [vendorId], references: [id])
  department                        Department?             @relation("DepartmentMembers", fields: [departmentId], references: [id])
  headedDepartment                  Department?             @relation("DepartmentHead")
  manager                           User?                   @relation("ManagerSubordinates", fields: [managerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  subordinates                      User[]                  @relation("ManagerSubordinates")
  createdRequisitions               PurchaseRequisition[]   @relation("Requester")
  approvedRequisitions              PurchaseRequisition[]   @relation("Approver")
  currentApprovals                  PurchaseRequisition[]   @relation("CurrentApprover")
  receipts                          GoodsReceiptNote[]
  auditLogs                         AuditLog[]
  committeeAssignments              CommitteeAssignment[]
  recommendations                   CommitteeRecommendation[]
  financialCommitteesRequisitions PurchaseRequisition[]   @relation("FinancialCommitteeMembers")
  technicalCommitteesRequisitions PurchaseRequisition[]   @relation("TechnicalCommitteeMembers")
  scoresGiven                       CommitteeScoreSet[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  name        String
  url         String
  submittedAt DateTime @default(now())

  @@index([vendorId])
}

model Vendor {
  id            String        @id @default(cuid())
  name          String
  contactPerson String
  email         String        @unique
  phone         String
  address       String
  kycStatus     String        @default("Pending") // Pending, Verified, Rejected
  rejectionReason String?
  userId        String        @unique
  user          User          @relation(fields: [userId], references: [id])
  quotations    Quotation[]
  purchaseOrders PurchaseOrder[]
  contracts      Contract[]
  kycDocuments  KYC_Document[]
}

model PurchaseRequisition {
  id                  String   @id @default(cuid())
  transactionId       String?  @unique
  requesterId         String
  requesterName       String
  title               String
  departmentId        String?
  justification       String
  status              String   @default("Draft")
  urgency             String   @default("Low")
  totalPrice          Float
  approverId          String?
  approverComment     String?
  currentApproverId   String?
  purchaseOrderId     String?  @unique
  deadline            DateTime?
  scoringDeadline     DateTime?
  awardResponseDeadline DateTime?
  awardResponseDurationMinutes Int?
  committeeName         String?
  committeePurpose      String?
  cpoAmount             Float?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  allowedVendorIds      String[]
  awardedQuoteItemIds   String[]

  // JSON field for flexible settings
  rfqSettings Json?

  // Relations
  requester               User                      @relation("Requester", fields: [requesterId], references: [id])
  approver                User?                     @relation("Approver", fields: [approverId], references: [id])
  currentApprover         User?                     @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  department              Department?               @relation(fields: [departmentId], references: [id])
  items                   RequisitionItem[]
  customQuestions         CustomQuestion[]
  evaluationCriteria      EvaluationCriteria?
  quotations              Quotation[]
  purchaseOrder           PurchaseOrder?            @relation(fields: [purchaseOrderId], references: [id])
  contracts               Contract[]
  committeeAssignments    CommitteeAssignment[]
  recommendations         CommitteeRecommendation[]
  
  // Explicit Many-to-Many for Committee Members
  financialCommitteeMembers   User[] @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers   User[] @relation("TechnicalCommitteeMembers")

  // Indexes
  @@index([requesterId])
  @@index([approverId])
  @@index([currentApproverId])
  @@index([departmentId])
  @@index([status])
}

model RequisitionItem {
  id            String              @id @default(cuid())
  requisitionId String
  name          String
  quantity      Int
  unitPrice     Float?
  description   String?
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)

  @@index([requisitionId])
}

model CustomQuestion {
  id              String              @id @default(cuid())
  requisitionId   String
  questionText    String
  questionType    String // 'text', 'boolean', 'multiple-choice', 'file'
  isRequired      Boolean             @default(true)
  options         String[]
  requisitionItemId String?
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  answers         QuoteAnswer[]

  @@index([requisitionId])
}

model EvaluationCriteria {
  id                String                @id @default(cuid())
  requisitionId     String                @unique
  financialWeight   Int
  technicalWeight   Int
  requisition       PurchaseRequisition   @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteriaId String
  name                 String
  weight               Int
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  scores               FinancialScore[]

  @@index([evaluationCriteriaId])
}

model TechnicalCriterion {
  id                   String           @id @default(cuid())
  evaluationCriteriaId String
  name                 String
  weight               Int
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  scores               TechnicalScore[]

  @@index([evaluationCriteriaId])
}

model Quotation {
  id                String   @id @default(cuid())
  transactionId     String?
  requisitionId     String
  vendorId          String
  vendorName        String
  totalPrice        Float
  deliveryDate      DateTime
  status            String
  notes             String?
  rank              Int?
  cpoDocumentUrl    String?
  experienceDocumentUrl String?
  finalAverageScore Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  requisition PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  vendor      Vendor              @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  items       QuoteItem[]
  answers     QuoteAnswer[]
  scores      CommitteeScoreSet[]

  @@index([requisitionId])
  @@index([vendorId])
}

model QuoteItem {
  id                String    @id @default(cuid())
  quotationId       String
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  quotation         Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  scores            ItemScore[]

  @@index([quotationId])
}

model QuoteAnswer {
  id          String         @id @default(cuid())
  quotationId String
  questionId  String
  answer      String
  quotation   Quotation      @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  question    CustomQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([quotationId])
  @@index([questionId])
}

model CommitteeScoreSet {
    id                String        @id @default(cuid())
    quotationId       String
    scorerId          String
    scorerName        String
    committeeComment  String?
    finalScore        Float
    submittedAt       DateTime      @default(now())
    quotation       Quotation     @relation(fields: [quotationId], references: [id], onDelete: Cascade)
    scorer          User          @relation(fields: [scorerId], references: [id])
    itemScores      ItemScore[]

    @@unique([quotationId, scorerId])
    @@index([scorerId])
}

model ItemScore {
    id              String            @id @default(cuid())
    scoreSetId      String
    quoteItemId     String
    finalScore      Float
    scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
    quoteItem       QuoteItem         @relation(fields: [quoteItemId], references: [id], onDelete: Cascade)
    financialScores FinancialScore[]
    technicalScores TechnicalScore[]

    @@index([scoreSetId])
}

model FinancialScore {
    id          String              @id @default(cuid())
    itemScoreId String
    criterionId String
    score       Int
    comment     String?
    itemScore   ItemScore           @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
    criterion   FinancialCriterion  @relation(fields: [criterionId], references: [id], onDelete: Cascade)

    @@index([itemScoreId])
}

model TechnicalScore {
    id          String              @id @default(cuid())
    itemScoreId String
    criterionId String
    score       Int
    comment     String?
    itemScore   ItemScore           @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
    criterion   TechnicalCriterion  @relation(fields: [criterionId], references: [id], onDelete: Cascade)

    @@index([itemScoreId])
}


model PurchaseOrder {
  id               String             @id @default(cuid())
  transactionId    String?
  requisitionId    String
  requisitionTitle String
  vendorId         String
  totalAmount      Float
  status           String
  notes            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]

  @@index([requisitionId])
  @@index([vendorId])
}

model POItem {
  id                 String          @id @default(cuid())
  purchaseOrderId    String
  requisitionItemId  String
  name               String
  quantity           Int
  unitPrice          Float
  totalPrice         Float
  receivedQuantity   Int             @default(0)
  purchaseOrder      PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  receiptItems       ReceiptItem[]

  @@index([purchaseOrderId])
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrderId String
  receivedById    String
  receivedDate    DateTime      @default(now())
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  items           ReceiptItem[]

  @@index([purchaseOrderId])
  @@index([receivedById])
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNoteId String
  poItemId           String
  quantityReceived   Int
  condition          String // Good, Damaged, Incorrect
  notes              String?
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  poItem             POItem           @relation(fields: [poItemId], references: [id])

  @@index([goodsReceiptNoteId])
  @@index([poItemId])
}

model Invoice {
  id                String        @id @default(cuid())
  transactionId     String?
  purchaseOrderId   String
  vendorId          String
  invoiceDate       DateTime
  totalAmount       Float
  status            String // Pending, Approved for Payment, Paid, Disputed
  documentUrl       String?
  paymentDate       DateTime?
  paymentReference  String?
  po                PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  items             InvoiceItem[]

  @@index([purchaseOrderId])
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
}

model Contract {
  id              String              @id @default(cuid())
  contractNumber  String              @unique @default(cuid())
  requisitionId   String
  vendorId        String
  startDate       DateTime
  endDate         DateTime
  filePath        String?
  status          String // Draft, Active, Expired
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor          Vendor              @relation(fields: [vendorId], references: [id])

  @@index([requisitionId])
  @@index([vendorId])
}

model AuditLog {
  id            String   @id @default(cuid())
  transactionId String?
  timestamp     DateTime @default(now())
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String
  user          User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([transactionId])
}


// Explicit many-to-many join table for CommitteeAssignment
model CommitteeAssignment {
  userId          String
  requisitionId   String
  scoresSubmitted Boolean             @default(false)
  user            User                @relation(fields: [userId], references: [id])
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])

  @@id([userId, requisitionId])
  @@index([requisitionId])
}

model RequisitionFinancialCommittee {
    requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    requisitionId String
    user          User                @relation(fields: [userId], references: [id])
    userId        String
    @@id([requisitionId, userId])
}

model RequisitionTechnicalCommittee {
    requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    requisitionId String
    user          User                @relation(fields: [userId], references: [id])
    userId        String
    @@id([requisitionId, userId])
}


model CommitteeRecommendation {
  id              String              @id @default(cuid())
  requisitionId   String
  userId          String
  committeeRole   String
  recommendation  String // 'Recommend for Approval', 'Request Changes'
  comment         String?
  createdAt       DateTime            @default(now())
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  user            User                @relation(fields: [userId], references: [id])

  @@index([requisitionId])
  @@index([userId])
}
