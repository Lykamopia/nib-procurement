// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String
  users       User[]
}

model User {
  id                         String                @id @default(cuid())
  name                       String
  email                      String                @unique
  password                   String
  roleId                     String
  role                       Role                  @relation(fields: [roleId], references: [id])
  departmentId               String?
  department                 Department?           @relation(fields: [departmentId], references: [id])
  vendorId                   String?               @unique
  vendor                     Vendor?
  createdRequisitions        PurchaseRequisition[] @relation("Requester")
  approvedRequisitions       PurchaseRequisition[] @relation("Approver")
  currentApproverForReqs     PurchaseRequisition[] @relation("CurrentApprover")
  receiptsReceived           GoodsReceiptNote[]
  auditLogs                  AuditLog[]
  financialCommitteeFor      PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommitteeFor      PurchaseRequisition[] @relation("TechnicalCommitteeMembers")
  committeeAssignments       CommitteeAssignment[]
  managerId                  String?
  manager                    User?                 @relation("ManagerSubordinates", fields: [managerId], references: [id])
  subordinates               User[]                @relation("ManagerSubordinates")
  headOfDepartments          Department[]          @relation("DepartmentHead")
  scores                     CommitteeScoreSet[]
}

model Department {
  id           String                @id @default(cuid())
  name         String                @unique
  description  String?
  users        User[]
  requisitions PurchaseRequisition[]
  headId       String?
  head         User?                 @relation("DepartmentHead", fields: [headId], references: [id])
}

model PurchaseRequisition {
  id                           String                 @id @default(cuid())
  transactionId                String?
  requesterId                  String
  requesterName                String
  title                        String
  justification                String
  status                       String
  totalPrice                   Float
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  requester                    User                   @relation("Requester", fields: [requesterId], references: [id])
  departmentId                 String?
  department                   Department?            @relation(fields: [departmentId], references: [id])
  approverId                   String?
  approver                     User?                  @relation("Approver", fields: [approverId], references: [id])
  approverComment              String?
  currentApproverId            String?
  currentApprover              User?                  @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  purchaseOrderId              String?
  deadline                     DateTime?
  scoringDeadline              DateTime?
  awardResponseDeadline        DateTime?
  awardResponseDurationMinutes Int?
  committeeName                String?
  committeePurpose             String?
  cpoAmount                    Float?
  urgency                      String                 @default("Low")
  rfqSettings                  Json                   @default("{}")
  allowedVendorIds             String[]
  awardedQuoteItemIds          String[]
  items                        RequisitionItem[]
  customQuestions              CustomQuestion[]
  evaluationCriteria           EvaluationCriteria?
  quotations                   Quotation[]
  purchaseOrder                PurchaseOrder?         @relation(fields: [purchaseOrderId], references: [id])
  financialCommitteeMembers    User[]                 @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers    User[]                 @relation("TechnicalCommitteeMembers")
  committeeAssignments         CommitteeAssignment[]
  contract                     Contract?
}

model RequisitionItem {
  id                    String              @id @default(cuid())
  name                  String
  quantity              Int
  unitPrice             Float
  description           String
  requisitionId         String
  purchaseRequisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  purchaseOrderItem     POItem?
}

model CustomQuestion {
  id            String              @id @default(cuid())
  questionText  String
  questionType  String // text, boolean, multiple-choice, file
  isRequired    Boolean             @default(true)
  options       String[]
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  answers       QuoteAnswer[]
}

model EvaluationCriteria {
  id                String                 @id @default(cuid())
  requisitionId     String                 @unique
  requisition       PurchaseRequisition    @relation(fields: [requisitionId], references: [id])
  financialWeight   Int
  technicalWeight   Int
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  name                 String
  weight               Int
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  name                 String
  weight               Int
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  scores               TechnicalScore[]
}

model Vendor {
  id              String           @id @default(cuid())
  userId          String           @unique
  user            User             @relation(fields: [userId], references: [id])
  name            String
  contactPerson   String
  email           String           @unique
  phone           String
  address         String
  kycStatus       String
  rejectionReason String?
  kycDocuments    KYC_Document[]
  quotations      Quotation[]
  purchaseOrders  PurchaseOrder[]
  contracts       Contract[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  name        String
  url         String
  submittedAt DateTime @default(now())
}

model Quotation {
  id                    String              @id @default(cuid())
  transactionId         String?
  requisitionId         String
  requisition           PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendorId              String
  vendor                Vendor              @relation(fields: [vendorId], references: [id])
  vendorName            String
  totalPrice            Float
  deliveryDate          DateTime
  createdAt             DateTime            @default(now())
  status                String
  notes                 String?
  rank                  Int?
  finalAverageScore     Float?
  cpoDocumentUrl        String?
  experienceDocumentUrl String?
  items                 QuoteItem[]
  answers               QuoteAnswer[]
  scores                CommitteeScoreSet[]
}

model QuoteItem {
  id                String     @id @default(cuid())
  quotationId       String
  quotation         Quotation  @relation(fields: [quotationId], references: [id])
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  itemScores        ItemScore[]
}

model QuoteAnswer {
  id          String          @id @default(cuid())
  quotationId String
  quotation   Quotation       @relation(fields: [quotationId], references: [id])
  questionId  String
  question    CustomQuestion  @relation(fields: [questionId], references: [id])
  answer      String
}

model CommitteeAssignment {
  userId          String
  user            User                @relation(fields: [userId], references: [id])
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  scoresSubmitted Boolean             @default(false)

  @@id([userId, requisitionId])
}

model CommitteeScoreSet {
  id               String      @id @default(cuid())
  quotationId      String
  quotation        Quotation   @relation(fields: [quotationId], references: [id])
  scorerId         String
  scorer           User        @relation(fields: [scorerId], references: [id])
  scorerName       String
  committeeComment String?
  finalScore       Float
  submittedAt      DateTime    @default(now())
  itemScores       ItemScore[]
}

model ItemScore {
  id              String              @id @default(cuid())
  scoreSetId      String
  scoreSet        CommitteeScoreSet   @relation(fields: [scoreSetId], references: [id])
  quoteItemId     String              @unique
  quoteItem       QuoteItem           @relation(fields: [quoteItemId], references: [id])
  finalScore      Float
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
}

model FinancialScore {
  id          String             @id @default(cuid())
  itemScoreId String
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id])
  criterionId String
  criterion   FinancialCriterion @relation(fields: [criterionId], references: [id])
  score       Float
  comment     String?
}

model TechnicalScore {
  id          String             @id @default(cuid())
  itemScoreId String
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id])
  criterionId String
  criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id])
  score       Float
  comment     String?
}

model PurchaseOrder {
  id               String             @id @default(cuid())
  transactionId    String?
  requisitionId    String             @unique
  requisition      PurchaseRequisition?
  requisitionTitle String
  vendorId         String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  totalAmount      Float
  status           String
  createdAt        DateTime           @default(now())
  notes            String?
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id                String          @id @default(cuid())
  purchaseOrderId   String
  purchaseOrder     PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id])
  requisitionItemId String          @unique
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int
  receiptItems      ReceiptItem[]
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedById    String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNoteId String
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id])
  poItemId           String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  quantityReceived   Int
  condition          String
  notes              String?
}

model Invoice {
  id               String        @id @default(cuid())
  transactionId    String?
  purchaseOrderId  String
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  vendorId         String
  invoiceDate      DateTime
  totalAmount      Float
  status           String
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  items            InvoiceItem[]
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model Contract {
  id              String              @id @default(cuid())
  contractNumber  String              @unique @default(cuid())
  requisitionId   String              @unique
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendorId        String
  vendor          Vendor              @relation(fields: [vendorId], references: [id])
  startDate       DateTime
  endDate         DateTime
  status          String
  filePath        String?
  createdAt       DateTime            @default(now())
}

model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime  @default(now())
  userId        String?
  user          User?     @relation(fields: [userId], references: [id])
  action        String
  entity        String
  entityId      String
  details       String
}
