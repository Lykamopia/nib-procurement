// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                 @id @default(cuid())
  name                    String
  email                   String                 @unique
  password                String
  role                    String
  departmentId            String?
  vendorId                String?                @unique
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  approvalLimit           Float?
  managerId               String?
  manager                 User?                  @relation("ManagerSubordinate", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates            User[]                 @relation("ManagerSubordinate")
  department              Department?            @relation("UsersInDepartment", fields: [departmentId], references: [id])
  vendor                  Vendor?
  headedDepartment        Department?            @relation("DepartmentHead")
  createdRequisitions     PurchaseRequisition[]  @relation("Requester")
  approvedRequisitions    PurchaseRequisition[]  @relation("Approver")
  currentApprovals        PurchaseRequisition[]  @relation("CurrentApprover")
  receipts                GoodsReceiptNote[]
  auditLogs               AuditLog[]
  reviews                 Review[]
  financialCommitteeOn    PurchaseRequisition[]  @relation("FinancialCommitteeMembers")
  technicalCommitteeOn    PurchaseRequisition[]  @relation("TechnicalCommitteeMembers")
  committeeAssignments    CommitteeAssignment[]
  scoreSets               CommitteeScoreSet[]

  @@map("users")
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String
}

model Department {
  id          String                @id @default(cuid())
  name        String                @unique
  description String?
  headId      String?               @unique
  head        User?                 @relation("DepartmentHead", fields: [headId], references: [id])
  users       User[]                @relation("UsersInDepartment")
  requisitions PurchaseRequisition[]
}

model PurchaseRequisition {
  id                 String    @id @default(cuid())
  transactionId      String?   @unique
  title              String
  justification      String
  status             String
  urgency            String    @default("Low")
  totalPrice         Float
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deadline           DateTime?
  scoringDeadline    DateTime?
  awardResponseDeadline DateTime?
  awardResponseDurationMinutes Int?
  purchaseOrderId    String?
  
  requesterId        String
  requester          User      @relation("Requester", fields: [requesterId], references: [id])
  
  departmentId       String?
  department         Department? @relation(fields: [departmentId], references: [id])
  
  approverId         String?
  approver           User?     @relation("Approver", fields: [approverId], references: [id])
  
  currentApproverId  String?
  currentApprover    User?     @relation("CurrentApprover", fields: [currentApproverId], references: [id])

  items              RequisitionItem[]
  customQuestions    CustomQuestion[]
  evaluationCriteria EvaluationCriteria?
  quotations         Quotation[]
  contracts          Contract[]
  purchaseOrders     PurchaseOrder[]
  reviews            Review[]

  // Committee relations
  committeeName        String?
  committeePurpose     String?
  financialCommitteeMembers User[] @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers User[] @relation("TechnicalCommitteeMembers")
  committeeAssignments CommitteeAssignment[]

  // Vendor relations
  allowedVendorIds     String[]
  awardedQuoteItemIds  String[]

  // RFQ Settings
  cpoAmount            Float?
  rfqSettings          Json?
}

model RequisitionItem {
  id            String              @id @default(cuid())
  name          String
  description   String?
  quantity      Int
  unitPrice     Float
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  poItems       POItem[]
}

model EvaluationCriteria {
  id                String               @id @default(cuid())
  requisitionId     String               @unique
  requisition       PurchaseRequisition  @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  financialWeight   Float
  technicalWeight   Float
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  name                 String
  weight               Float
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  name                 String
  weight               Float
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
}

model CustomQuestion {
  id              String              @id @default(cuid())
  questionText    String
  questionType    String // "text", "boolean", "multiple-choice", "file"
  isRequired      Boolean             @default(true)
  options         String[]
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionItemId String? // Optional: Link question to a specific item
  answers         QuoteAnswer[]
}

model Vendor {
  id              String        @id @default(cuid())
  name            String
  contactPerson   String
  email           String        @unique
  phone           String
  address         String
  kycStatus       String        @default("Pending")
  rejectionReason String?
  userId          String        @unique
  user            User          @relation(fields: [userId], references: [id])
  quotations      Quotation[]
  contracts       Contract[]
  purchaseOrders  PurchaseOrder[]
  invoices        Invoice[]
  kycDocuments    KYC_Document[]
}

model KYC_Document {
    id          String @id @default(cuid())
    vendorId    String
    vendor      Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
    name        String
    url         String
    submittedAt DateTime
}

model Quotation {
  id                  String              @id @default(cuid())
  transactionId       String?
  requisitionId       String
  vendorId            String
  vendorName          String
  totalPrice          Float
  deliveryDate        DateTime
  status              String
  notes               String?
  cpoDocumentUrl      String?
  experienceDocumentUrl String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  rank                Int?
  finalAverageScore   Float?
  
  requisition         PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  vendor              Vendor              @relation(fields: [vendorId], references: [id])
  items               QuoteItem[]
  answers             QuoteAnswer[]
  scores              CommitteeScoreSet[]
}

model QuoteItem {
  id                String    @id @default(cuid())
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  quotationId       String
  quotation         Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
}

model QuoteAnswer {
  id          String    @id @default(cuid())
  questionId  String
  quotationId String
  answer      String
  question    CustomQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  quotation   Quotation      @relation(fields: [quotationId], references: [id], onDelete: Cascade)
}

model PurchaseOrder {
  id              String      @id @default(cuid())
  transactionId   String?
  requisitionId   String
  requisitionTitle String
  vendorId        String
  totalAmount     Float
  status          String
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor          Vendor              @relation(fields: [vendorId], references: [id])
  items           POItem[]
  receipts        GoodsReceiptNote[]
  invoices        Invoice[]
}

model POItem {
  id                String          @id @default(cuid())
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int             @default(0)
  purchaseOrderId   String
  purchaseOrder     PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  receiptItems      ReceiptItem[]
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
}

model GoodsReceiptNote {
  id              String      @id @default(cuid())
  transactionId   String?
  purchaseOrderId String
  receivedById    String
  receivedDate    DateTime    @default(now())
  
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  poItemId           String
  quantityReceived   Int
  condition          String
  notes              String?
  goodsReceiptNoteId String
  
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
}

model Invoice {
  id               String       @id @default(cuid())
  transactionId    String?
  purchaseOrderId  String
  vendorId         String
  invoiceDate      DateTime
  totalAmount      Float
  status           String
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  po               PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  vendor           Vendor        @relation(fields: [vendorId], references: [id])
  items            InvoiceItem[]
}

model InvoiceItem {
  id         String  @id @default(cuid())
  name       String
  quantity   Int
  unitPrice  Float
  totalPrice Float
  invoiceId  String
  invoice    Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Contract {
  id              String    @id @default(cuid())
  contractNumber  String    @unique @default(cuid())
  requisitionId   String
  vendorId        String
  startDate       DateTime
  endDate         DateTime
  filePath        String?
  status          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor          Vendor    @relation(fields: [vendorId], references: [id])
}

model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime  @default(now())
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String
  user          User?     @relation(fields: [userId], references: [id])
}

model Review {
  id            String    @id @default(cuid())
  requisitionId String
  reviewerId    String
  committeeType String // "Committee A" or "Committee B"
  decision      String // "Approved", "Rejected"
  comment       String?
  createdAt     DateTime  @default(now())
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  reviewer      User @relation(fields: [reviewerId], references: [id])
}

model CommitteeAssignment {
  userId          String
  requisitionId   String
  scoresSubmitted Boolean   @default(false)
  user            User      @relation(fields: [userId], references: [id])
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])

  @@id([userId, requisitionId])
}

model CommitteeScoreSet {
    id              String @id @default(cuid())
    quotationId     String
    scorerId        String
    scorerName      String
    committeeComment String?
    finalScore      Float  @default(0)
    submittedAt     DateTime @default(now())

    quotation       Quotation @relation(fields: [quotationId], references: [id])
    scorer          User      @relation(fields: [scorerId], references: [id])
    itemScores      ItemScore[]

    @@unique([quotationId, scorerId])
}

model ItemScore {
    id              String @id @default(cuid())
    scoreSetId      String
    quoteItemId     String
    finalScore      Float

    scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id])
    financialScores Score[] @relation("FinancialScores")
    technicalScores Score[] @relation("TechnicalScores")
}

model Score {
    id              String @id @default(cuid())
    criterionId     String
    score           Int
    comment         String?

    itemScoreId     String?
    itemScore       ItemScore? @relation("FinancialScores", fields: [itemScoreId], references: [id])

    technicalItemScoreId String?
    technicalItemScore   ItemScore? @relation("TechnicalScores", fields: [technicalItemScoreId], references: [id])
}
