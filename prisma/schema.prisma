
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id @default(cuid())
  name                    String
  email                   String                  @unique
  password                String
  role                    String
  approvalLimit           Int?
  managerId               String?
  vendorId                String?                 @unique
  vendor                  Vendor?
  departmentId            String?
  department              Department?             @relation(fields: [departmentId], references: [id])
  createdRequisitions     PurchaseRequisition[]   @relation("Requester")
  approvedRequisitions    PurchaseRequisition[]   @relation("Approver")
  auditLogs               AuditLog[]
  receipts                GoodsReceiptNote[]
  committeeAssignments    CommitteeAssignment[]
  financialCommitteeFor   PurchaseRequisition[]   @relation("FinancialCommittee")
  technicalCommitteeFor   PurchaseRequisition[]   @relation("TechnicalCommittee")
  scores                  CommitteeScoreSet[]

  @@index([departmentId])
  @@index([vendorId])
}

model Department {
  id           String                @id @default(cuid())
  name         String                @unique
  users        User[]
  requisitions PurchaseRequisition[]
}

model PurchaseRequisition {
  id                           String                  @id @default(cuid())
  transactionId                String?                 @unique
  requesterId                  String
  requesterName                String? // Kept for simplicity on some queries, but tied to requesterId
  requester                    User                    @relation("Requester", fields: [requesterId], references: [id])
  title                        String
  departmentId                 String?
  department                   Department?             @relation(fields: [departmentId], references: [id])
  items                        RequisitionItem[]
  totalPrice                   Float
  justification                String
  status                       String
  createdAt                    DateTime                @default(now())
  updatedAt                    DateTime                @updatedAt
  approverId                   String?
  approver                     User?                   @relation("Approver", fields: [approverId], references: [id])
  approverComment              String?
  currentApproverId            String?
  contract                     Contract?
  purchaseOrderId              String?                 @unique
  purchaseOrder                PurchaseOrder?
  deadline                     DateTime?
  cpoAmount                    Float?
  scoringDeadline              DateTime?
  awardResponseDeadline        DateTime?
  awardResponseDurationMinutes Int?
  allowedVendorIds             String[]
  awardedQuoteItemIds          String[]                @default([])
  committeeName                String?
  committeePurpose             String?
  rfqSettings                  Json?
  customQuestions              CustomQuestion[]
  evaluationCriteria           EvaluationCriteria?
  quotations                   Quotation[]
  financialCommitteeMembers    User[]                  @relation("FinancialCommittee")
  technicalCommitteeMembers    User[]                  @relation("TechnicalCommittee")
  committeeAssignments         CommitteeAssignment[]

  @@index([requesterId])
  @@index([approverId])
  @@index([departmentId])
}

model RequisitionItem {
  id              String            @id @default(cuid())
  name            String
  quantity        Int
  unitPrice       Float
  description     String
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  quotedOn        QuoteItem[]
  purchasedOn     POItem[]

  @@index([requisitionId])
}

model CustomQuestion {
  id              String            @id @default(cuid())
  questionText    String
  questionType    String // e.g., 'text', 'boolean', 'multiple-choice', 'file'
  isRequired      Boolean           @default(true)
  options         String[]
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  answers         QuoteAnswer[]

  @@index([requisitionId])
}

model Vendor {
  id              String           @id @default(cuid())
  name            String
  contactPerson   String
  email           String           @unique
  phone           String
  address         String
  kycStatus       String
  rejectionReason String?
  userId          String           @unique
  user            User             @relation(fields: [userId], references: [id])
  quotations      Quotation[]
  purchaseOrders  PurchaseOrder[]
  kycDocuments    KYC_Document[]
  contracts       Contract[]

  @@index([userId])
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  name        String
  url         String
  submittedAt DateTime

  @@index([vendorId])
}


model EvaluationCriteria {
    id                  String                  @id @default(cuid())
    requisitionId       String                  @unique
    requisition         PurchaseRequisition     @relation(fields: [requisitionId], references: [id])
    financialWeight     Int
    technicalWeight     Int
    financialCriteria   FinancialCriterion[]
    technicalCriteria   TechnicalCriterion[]
}

model FinancialCriterion {
    id                      String              @id @default(cuid())
    evaluationCriteriaId    String
    evaluationCriteria      EvaluationCriteria  @relation(fields: [evaluationCriteriaId], references: [id])
    name                    String
    weight                  Int
    scores                  FinancialScore[]
}

model TechnicalCriterion {
    id                      String              @id @default(cuid())
    evaluationCriteriaId    String
    evaluationCriteria      EvaluationCriteria  @relation(fields: [evaluationCriteriaId], references: [id])
    name                    String
    weight                  Int
    scores                  TechnicalScore[]
}


model Quotation {
    id                  String              @id @default(cuid())
    transactionId       String?
    requisitionId       String
    requisition         PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    vendorId            String
    vendor              Vendor              @relation(fields: [vendorId], references: [id])
    vendorName          String
    items               QuoteItem[]
    totalPrice          Float
    deliveryDate        DateTime
    createdAt           DateTime            @default(now())
    status              String
    notes               String?
    rank                Int?
    answers             QuoteAnswer[]
    scores              CommitteeScoreSet[]
    finalAverageScore   Float?
    cpoDocumentUrl      String?

    @@index([requisitionId])
    @@index([vendorId])
}

model QuoteItem {
    id                  String      @id @default(cuid())
    quotationId         String
    quotation           Quotation   @relation(fields: [quotationId], references: [id])
    requisitionItemId   String
    requisitionItem     RequisitionItem @relation(fields: [requisitionItemId], references: [id])
    name                String
    quantity            Int
    unitPrice           Float
    leadTimeDays        Int
    brandDetails        String?
    itemScores          ItemScore[]

    @@index([quotationId])
    @@index([requisitionItemId])
}

model QuoteAnswer {
    id          String      @id @default(cuid())
    quotationId String
    quotation   Quotation   @relation(fields: [quotationId], references: [id])
    questionId  String
    question    CustomQuestion @relation(fields: [questionId], references: [id])
    answer      String

    @@index([quotationId])
    @@index([questionId])
}

model CommitteeAssignment {
  userId          String
  user            User                @relation(fields: [userId], references: [id])
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  scoresSubmitted Boolean             @default(false)

  @@id([userId, requisitionId])
}

model CommitteeScoreSet {
    id                  String      @id @default(cuid())
    quotationId         String
    quotation           Quotation   @relation(fields: [quotationId], references: [id])
    scorerId            String
    scorer              User        @relation(fields: [scorerId], references: [id])
    scorerName          String
    itemScores          ItemScore[]
    finalScore          Float
    committeeComment    String?
    submittedAt         DateTime    @default(now())

    @@index([quotationId])
    @@index([scorerId])
}

model ItemScore {
    id                  String              @id @default(cuid())
    scoreSetId          String
    scoreSet            CommitteeScoreSet   @relation(fields: [scoreSetId], references: [id])
    quoteItemId         String
    quoteItem           QuoteItem           @relation(fields: [quoteItemId], references: [id])
    finalScore          Float
    financialScores     FinancialScore[]
    technicalScores     TechnicalScore[]
}

model FinancialScore {
    id              String              @id @default(cuid())
    itemScoreId     String
    itemScore       ItemScore           @relation(fields: [itemScoreId], references: [id])
    criterionId     String
    criterion       FinancialCriterion  @relation(fields: [criterionId], references: [id])
    score           Int
    comment         String?
}

model TechnicalScore {
    id              String              @id @default(cuid())
    itemScoreId     String
    itemScore       ItemScore           @relation(fields: [itemScoreId], references: [id])
    criterionId     String
    criterion       TechnicalCriterion  @relation(fields: [criterionId], references: [id])
    score           Int
    comment         String?
}

model PurchaseOrder {
  id              String           @id @default(cuid())
  transactionId   String?
  requisitionId   String           @unique
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionTitle String
  vendorId        String
  vendor          Vendor           @relation(fields: [vendorId], references: [id])
  items           POItem[]
  totalAmount     Float
  status          String
  createdAt       DateTime         @default(now())
  receipts        GoodsReceiptNote[]
  invoices        Invoice[]

  @@index([vendorId])
}

model POItem {
  id                String          @id @default(cuid())
  purchaseOrderId   String
  purchaseOrder     PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id])
  requisitionItemId String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int
  receiptItems      ReceiptItem[]

  @@index([purchaseOrderId])
  @@index([requisitionItemId])
}

model GoodsReceiptNote {
    id              String      @id @default(cuid())
    transactionId   String?
    purchaseOrderId String
    purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
    receivedById    String
    receivedBy      User        @relation(fields: [receivedById], references: [id])
    receivedDate    DateTime    @default(now())
    items           ReceiptItem[]
    photos          Json[]

    @@index([purchaseOrderId])
    @@index([receivedById])
}

model ReceiptItem {
    id                  String      @id @default(cuid())
    goodsReceiptNoteId  String
    goodsReceiptNote    GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id])
    poItemId            String
    poItem              POItem      @relation(fields: [poItemId], references: [id])
    quantityReceived    Int
    condition           String
    notes               String?

    @@index([goodsReceiptNoteId])
    @@index([poItemId])
}

model Invoice {
  id              String          @id @default(cuid())
  transactionId   String?
  purchaseOrderId String
  purchaseOrder   PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id])
  vendorId        String
  invoiceDate     DateTime
  items           InvoiceItem[]
  totalAmount     Float
  status          String
  documentUrl     String?
  paymentDate     DateTime?
  paymentReference String?

  @@index([purchaseOrderId])
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float

  @@index([invoiceId])
}

model Contract {
  id              String      @id @default(cuid())
  contractNumber  String      @unique @default(cuid())
  requisitionId   String      @unique
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendorId        String
  vendor          Vendor      @relation(fields: [vendorId], references: [id])
  startDate       DateTime
  endDate         DateTime
  filePath        String?
  status          String
  createdAt       DateTime    @default(now())

  @@index([vendorId])
}

model AuditLog {
    id            String      @id @default(cuid())
    transactionId String?
    timestamp     DateTime    @default(now())
    userId        String?
    user          User?       @relation(fields: [userId], references: [id])
    action        String
    entity        String
    entityId      String
    details       String

    @@index([userId])
}
