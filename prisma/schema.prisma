
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================================= //
//                 Core Models                         //
// ================================================= //

model User {
  id                      String                 @id @default(cuid())
  name                    String
  email                   String                 @unique
  password                String
  role                    Role                   @relation(fields: [roleName], references: [name])
  roleName                String
  vendor                  Vendor?                @relation(fields: [vendorId], references: [id])
  vendorId                String?                @unique
  department              Department?            @relation(fields: [departmentId], references: [id])
  departmentId            String?
  approvalLimit           Float?
  manager                 User?                  @relation("ManagerSubordinates", fields: [managerId], references: [id])
  managerId               String?
  subordinates            User[]                 @relation("ManagerSubordinates")

  // Relationships
  requisitions            PurchaseRequisition[]  @relation("Requester")
  approvedRequisitions    PurchaseRequisition[]  @relation("Approver")
  currentApprovals        PurchaseRequisition[]  @relation("CurrentApprover")
  receipts                GoodsReceiptNote[]
  auditLogs               AuditLog[]
  financialCommittees     PurchaseRequisition[]  @relation("FinancialCommitteeMembers")
  technicalCommittees     PurchaseRequisition[]  @relation("TechnicalCommitteeMembers")
  committeeAssignments    CommitteeAssignment[]
  departmentHead          Department?            @relation("DepartmentHead")
  scores                  CommitteeScoreSet[]

  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
}

model Role {
  name        String @id @unique
  description String?
  users       User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  head        User?    @relation("DepartmentHead", fields: [headId], references: [id])
  headId      String?  @unique
  users       User[]

  requisitions PurchaseRequisition[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vendor {
  id                      String                 @id @default(cuid())
  name                    String
  contactPerson           String
  email                   String                 @unique
  phone                   String
  address                 String
  kycStatus               String                 @default("Pending") // Pending, Verified, Rejected
  rejectionReason         String?
  user                    User                   @relation(fields: [userId], references: [id])
  userId                  String                 @unique
  kycDocuments            KYC_Document[]
  quotations              Quotation[]
  contracts               Contract[]
  purchaseOrders          PurchaseOrder[]

  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId    String
  name        String
  url         String
  submittedAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ================================================= //
//               Procurement Models                  //
// ================================================= //

model PurchaseRequisition {
  id                         String                 @id @default(cuid())
  transactionId              String?                @unique
  requester                  User                   @relation("Requester", fields: [requesterId], references: [id])
  requesterId                String
  requesterName              String
  title                      String
  department                 Department             @relation(fields: [departmentId], references: [id])
  departmentId               String
  items                      RequisitionItem[]
  totalPrice                 Float
  justification              String
  status                     String                 @default("Draft") // Draft, Pending_Approval, Approved, Rejected, RFQ_In_Progress, PO_Created, Fulfilled, Closed
  urgency                    String                 @default("Low") // Low, Medium, High, Critical
  approver                   User?                  @relation("Approver", fields: [approverId], references: [id])
  approverId                 String?
  currentApprover            User?                  @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  currentApproverId          String?
  approverComment            String?
  purchaseOrderId            String?                @unique
  purchaseOrder              PurchaseOrder?
  allowedVendorIds           String[]
  awardedQuoteItemIds        String[]
  deadline                   DateTime? // Deadline for vendors to submit quotes
  scoringDeadline            DateTime? // Deadline for committee to submit scores
  awardResponseDeadline      DateTime? // Deadline for awarded vendor to respond
  awardResponseDurationMinutes Int?
  cpoAmount                  Float?
  rfqSettings                Json?

  // Relationships
  quotations                 Quotation[]
  contract                   Contract?
  customQuestions            CustomQuestion[]
  evaluationCriteria         EvaluationCriteria?
  financialCommitteeMembers  User[]                 @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers  User[]                 @relation("TechnicalCommitteeMembers")
  committeeAssignments       CommitteeAssignment[]
  committeeName              String?
  committeePurpose           String?

  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime               @updatedAt
}

model RequisitionItem {
  id            String            @id @default(cuid())
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId String
  name          String
  description   String?
  quantity      Int
  unitPrice     Float
  quoteItems    QuoteItem[]
  poItems       POItem[]
}

model CustomQuestion {
  id            String              @id @default(cuid())
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId String
  questionText  String
  questionType  String // 'text', 'boolean', 'multiple-choice'
  isRequired    Boolean             @default(false)
  options       String[]
  answers       QuoteAnswer[]
}

model EvaluationCriteria {
  id                String                @id @default(cuid())
  requisition       PurchaseRequisition   @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId     String                @unique
  financialWeight   Int
  technicalWeight   Int
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Int
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  evaluationCriteriaId String
  name                 String
  weight               Int
  scores               TechnicalScore[]
}

model Quotation {
  id                    String              @id @default(cuid())
  transactionId         String?
  requisition           PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId         String
  vendor                Vendor              @relation(fields: [vendorId], references: [id])
  vendorId              String
  vendorName            String
  items                 QuoteItem[]
  answers               QuoteAnswer[]
  scores                CommitteeScoreSet[]
  totalPrice            Float
  deliveryDate          DateTime
  status                String              @default("Submitted") // Submitted, Awarded, Rejected, Standby, Accepted, Declined
  rank                  Int?
  notes                 String?
  finalAverageScore     Float?
  cpoDocumentUrl        String?
  experienceDocumentUrl String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model QuoteItem {
  id                String            @id @default(cuid())
  quotation         Quotation         @relation(fields: [quotationId], references: [id], onDelete Cascade)
  quotationId       String
  requisitionItem   RequisitionItem   @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  scores            ItemScore[]
}

model QuoteAnswer {
  id          String         @id @default(cuid())
  quotation   Quotation      @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId String
  question    CustomQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String
  answer      String
}

model CommitteeAssignment {
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId   String
  scoresSubmitted Boolean             @default(false)

  @@id([userId, requisitionId])
}

model CommitteeScoreSet {
  id               String      @id @default(cuid())
  quotation        Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  quotationId      String
  scorer           User        @relation(fields: [scorerId], references: [id])
  scorerId         String
  scorerName       String
  committeeComment String?
  itemScores       ItemScore[]
  finalScore       Float
  submittedAt      DateTime    @default(now())
}

model ItemScore {
  id              String            @id @default(cuid())
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  scoreSetId      String
  quoteItem       QuoteItem         @relation(fields: [quoteItemId], references: [id])
  quoteItemId     String
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
  finalScore      Float

  @@unique([scoreSetId, quoteItemId])
}


model FinancialScore {
  id          String             @id @default(cuid())
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId String
  criterion   FinancialCriterion @relation(fields: [criterionId], references: [id])
  criterionId String
  score       Int
  comment     String?
}

model TechnicalScore {
  id          String             @id @default(cuid())
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  itemScoreId String
  criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id])
  criterionId String
  score       Int
  comment     String?
}

model PurchaseOrder {
  id               String               @id @default(cuid())
  transactionId    String?
  requisition      PurchaseRequisition  @relation(fields: [requisitionId], references: [id], onDelete: Restrict)
  requisitionId    String               @unique
  requisitionTitle String
  vendor           Vendor               @relation(fields: [vendorId], references: [id])
  vendorId         String
  items            POItem[]
  totalAmount      Float
  status           String               @default("Issued") // Issued, Acknowledged, Shipped, Partially_Delivered, Delivered, Cancelled
  notes            String?
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}

model POItem {
  id                 String          @id @default(cuid())
  purchaseOrder      PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  purchaseOrderId    String
  requisitionItem    RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  requisitionItemId  String
  name               String
  quantity           Int
  unitPrice          Float
  totalPrice         Float
  receivedQuantity   Int             @default(0)
  receiptItems       ReceiptItem[]
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedById    String
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  goodsReceiptNoteId String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  poItemId           String
  quantityReceived   Int
  condition          String // Good, Damaged, Incorrect
  notes              String?
}

model Invoice {
  id               String        @id @default(cuid())
  transactionId    String?
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId  String
  vendorId         String
  invoiceDate      DateTime
  items            InvoiceItem[]
  totalAmount      Float
  status           String        @default("Pending") // Pending, Approved_for_Payment, Paid, Disputed
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId   String
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model Contract {
  id              String              @id @default(cuid())
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  requisitionId   String              @unique
  vendor          Vendor              @relation(fields: [vendorId], references