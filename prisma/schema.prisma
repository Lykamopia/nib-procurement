
// datasource and generator definitions...
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Main Models
model User {
  id                      String                @id @default(cuid())
  name                    String
  email                   String                @unique
  password                String
  role                    String
  departmentId            String?
  department              Department?           @relation("DepartmentUsers", fields: [departmentId], references: [id])
  headedDepartment        Department?           @relation("DepartmentHead")
  managerId               String?
  manager                 User?                 @relation("ManagerSubordinates", fields: [managerId], references: [id])
  subordinates            User[]                @relation("ManagerSubordinates")
  vendorId                String?               @unique
  vendor                  Vendor?
  approvalLimit           Float?
  requisitions            PurchaseRequisition[] @relation("Requester")
  approvedRequisitions    PurchaseRequisition[] @relation("Approver")
  currentApprovals        PurchaseRequisition[] @relation("CurrentApprover")
  sentContracts           Contract[]
  receivedGoods           GoodsReceiptNote[]
  auditLogs               AuditLog[]
  scores                  CommitteeScoreSet[]
  committeeAssignments    CommitteeAssignment[]
  reviews                 Review[]
  financialCommittees     PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommittees     PurchaseRequisition[] @relation("TechnicalCommitteeMembers")
}

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  headId      String?  @unique
  head        User?    @relation("DepartmentHead", fields: [headId], references: [id])
  users       User[]   @relation("DepartmentUsers")
  requisitions PurchaseRequisition[]
}


model PurchaseRequisition {
  id                           String                 @id @default(cuid())
  transactionId                String?
  requesterId                  String
  requester                    User                   @relation("Requester", fields: [requesterId], references: [id])
  departmentId                 String?
  department                   Department?            @relation(fields: [departmentId], references: [id])
  title                        String
  justification                String
  status                       String
  urgency                      String                 @default("Low")
  totalPrice                   Float
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  approverId                   String?
  approver                     User?                  @relation("Approver", fields: [approverId], references: [id])
  currentApproverId            String?
  currentApprover              User?                  @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  approverComment              String?
  purchaseOrderId              String?                @unique
  items                        RequisitionItem[]
  customQuestions              CustomQuestion[]
  evaluationCriteria           EvaluationCriteria?
  quotations                   Quotation[]
  contracts                    Contract[]
  purchaseOrders               PurchaseOrder[]
  allowedVendorIds             String[]
  awardedQuoteItemIds          String[]
  deadline                     DateTime?
  scoringDeadline              DateTime?
  awardResponseDeadline        DateTime?
  awardResponseDurationMinutes Int?
  financialCommitteeMembers    User[]                 @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers    User[]                 @relation("TechnicalCommitteeMembers")
  committeeName                String?
  committeePurpose             String?
  cpoAmount                    Float?
  rfqSettings                  Json?
  reviews                      Review[]
  committeeAssignments         CommitteeAssignment[]
}

model RequisitionItem {
  id              String             @id @default(cuid())
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  name            String
  quantity        Int
  unitPrice       Float
  description     String?
  quoteItems      QuoteItem[]
  poItems         POItem[]
}

model CustomQuestion {
  id              String             @id @default(cuid())
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  questionText    String
  questionType    String // text, boolean, multiple_choice, file
  isRequired      Boolean            @default(true)
  options         String[]
  requisitionItemId String? // Optional link to a specific item
  answers         QuoteAnswer[]
}

model EvaluationCriteria {
  id                   String                 @id @default(cuid())
  requisitionId        String                 @unique
  requisition          PurchaseRequisition    @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  financialWeight      Float
  technicalWeight      Float
  financialCriteria    FinancialCriterion[]
  technicalCriteria    TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                 String
  weight               Float
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                 String
  weight               Float
}

model Vendor {
  id              String         @id @default(cuid())
  name            String
  contactPerson   String
  email           String         @unique
  phone           String
  address         String
  userId          String         @unique
  user            User           @relation(fields: [userId], references: [id])
  quotations      Quotation[]
  contracts       Contract[]
  kycStatus       String
  kycDocuments    KYC_Document[]
  rejectionReason String?
  purchaseOrders  PurchaseOrder[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  name        String
  url         String
  submittedAt DateTime @default(now())
}


model Quotation {
  id                  String              @id @default(cuid())
  transactionId       String?
  requisitionId       String
  requisition         PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  vendorId            String
  vendor              Vendor              @relation(fields: [vendorId], references: [id])
  vendorName          String
  totalPrice          Float
  deliveryDate        DateTime
  status              String
  createdAt           DateTime            @default(now())
  notes               String?
  rank                Int?
  finalAverageScore   Float?
  cpoDocumentUrl      String?
  experienceDocumentUrl String?
  items               QuoteItem[]
  answers             QuoteAnswer[]
  scores              CommitteeScoreSet[]
}

model QuoteItem {
  id                String       @id @default(cuid())
  quotationId       String
  quotation         Quotation    @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  requisitionItemId String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  scores            ItemScore[]
}

model QuoteAnswer {
  id          String    @id @default(cuid())
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  questionId  String
  question    CustomQuestion @relation(fields: [questionId], references: [id])
  answer      String
}

model CommitteeAssignment {
  userId        String
  requisitionId String
  user          User   @relation(fields: [userId], references: [id])
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  scoresSubmitted Boolean @default(false)

  @@id([userId, requisitionId])
}


model CommitteeScoreSet {
  id               String      @id @default(cuid())
  quotationId      String
  quotation        Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  scorerId         String
  scorer           User        @relation(fields: [scorerId], references: [id])
  committeeComment String?
  finalScore       Float
  itemScores       ItemScore[]
  submittedAt      DateTime    @default(now())

  @@unique([quotationId, scorerId])
}

model ItemScore {
  id          String            @id @default(cuid())
  scoreSetId  String
  scoreSet    CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  quoteItemId String
  quoteItem   QuoteItem         @relation(fields: [quoteItemId], references: [id])
  finalScore  Float
  scores      Score[]
}

model Score {
  id          String    @id @default(cuid())
  itemScoreId String
  itemScore   ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  criterionId String
  score       Float
  comment     String?
  type        String // FINANCIAL or TECHNICAL
}

model PurchaseOrder {
  id               String             @id @default(cuid())
  transactionId    String?
  requisitionId    String
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionTitle String
  vendorId         String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  totalAmount      Float
  status           String
  createdAt        DateTime           @default(now())
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
  notes            String?
}

model POItem {
  id                String          @id @default(cuid())
  poId              String
  purchaseOrder     PurchaseOrder   @relation(fields: [poId], references: [id], onDelete: Cascade)
  requisitionItemId String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int             @default(0)
  receiptItems      ReceiptItem[]
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedById    String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNoteId String
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  poItemId           String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  quantityReceived   Int
  condition          String // Good, Damaged, Incorrect
  notes              String?
}

model Invoice {
  id               String        @id @default(cuid())
  transactionId    String?
  purchaseOrderId  String
  po               PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  vendorId         String
  invoiceDate      DateTime
  totalAmount      Float
  status           String
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  items            InvoiceItem[]
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model Contract {
    id              String      @id @default(cuid())
    contractNumber  String      @unique @default(cuid())
    requisitionId   String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    vendorId        String
    vendor          Vendor      @relation(fields: [vendorId], references: [id])
    startDate       DateTime
    endDate         DateTime
    filePath        String?
    status          String // Draft, Active, Expired
    createdAt       DateTime    @default(now())
    notes           String?
}

model Review {
    id              String      @id @default(cuid())
    requisitionId   String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    reviewerId      String
    reviewer        User        @relation(fields: [reviewerId], references: [id])
    committeeType   String // 'Committee A' or 'Committee B'
    decision        String // 'Approved' or 'Rejected'
    comment         String
    createdAt       DateTime    @default(now())
}

model Role {
    id          String @id @default(cuid())
    name        String @unique
    description String?
}

model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime  @default(now())
  userId        String?
  user          User?     @relation(fields: [userId], references: [id])
  action        String
  entity        String
  entityId      String
  details       String
}
