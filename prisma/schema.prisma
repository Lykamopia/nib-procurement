
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(cuid())
  name            String
  email           String        @unique
  password        String
  role            UserRole      @default(Requester)
  departmentId    String?
  department      Department?   @relation("DepartmentUsers", fields: [departmentId], references: [id])
  vendorId        String?       @unique
  vendor          Vendor?       @relation(fields: [vendorId], references: [id])
  requisitions    PurchaseRequisition[] @relation("Requester")
  approvals       Approval[]
  headedDepartment Department? @relation("DepartmentHead")
  createdContracts Contract[]
  receivedNotes   GoodsReceiptNote[]
  auditLogs       AuditLog[]
  committeeAssignments CommitteeAssignment[]
  financialCommitteesForRequisitions PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommitteesForRequisitions PurchaseRequisition[] @relation("TechnicalCommitteeMembers")
  managerId       String?
  manager         User?         @relation("ManagerSubordinates", fields: [managerId], references: [id])
  subordinates    User[]        @relation("ManagerSubordinates")
  scores          CommitteeScoreSet[]
  approvalLimit   Float?

  @@index([departmentId])
  @@index([managerId])
}

model Role {
    id          String @id @default(cuid())
    name        String @unique
    description String?
}


model Department {
  id            String        @id @default(cuid())
  name          String        @unique
  description   String?
  users         User[]        @relation("DepartmentUsers")
  requisitions  PurchaseRequisition[]
  headId        String?       @unique
  head          User?         @relation("DepartmentHead", fields: [headId], references: [id])
}

model PurchaseRequisition {
  id                    String      @id @default(cuid())
  transactionId         String      @unique @default(cuid())
  requesterId           String
  requesterName         String
  requester             User        @relation("Requester", fields: [requesterId], references: [id])
  departmentId          String?
  department            Department? @relation(fields: [departmentId], references: [id])
  title                 String
  totalPrice            Float
  justification         String
  status                RequisitionStatus @default(Draft)
  urgency               Urgency     @default(Low)
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  purchaseOrderId       String?     @unique
  purchaseOrder         PurchaseOrder?
  deadline              DateTime?
  scoringDeadline       DateTime?
  awardResponseDeadline DateTime?
  awardResponseDurationMinutes Int?
  cpoAmount             Float?
  rfqSettings           Json?
  items                 RequisitionItem[]
  customQuestions       CustomQuestion[]
  quotations            Quotation[]
  contracts             Contract[]
  evaluationCriteria    EvaluationCriteria?
  approverId            String?
  approver              User?       @relation("ApprovedRequisitions", fields: [approverId], references: [id])
  currentApproverId     String?
  currentApprover       User?       @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  approvals             Approval[]
  committeeAssignments  CommitteeAssignment[]
  committeeRecommendations CommitteeRecommendation[]
  financialCommitteeMemberIds String[]
  financialCommitteeMembers User[]     @relation("FinancialCommitteeMembers")
  technicalCommitteeMemberIds String[]
  technicalCommitteeMembers User[]     @relation("TechnicalCommitteeMembers")
  allowedVendorIds      String[]
  awardedQuoteItemIds   String[]
  committeeName         String?
  committeePurpose      String?

  @@index([requesterId])
  @@index([departmentId])
  @@index([approverId])
  @@index([currentApproverId])
}

model Approval {
    id              String   @id @default(cuid())
    requisitionId   String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    approverId      String
    approver        User     @relation(fields: [approverId], references: [id])
    status          String   // e.g., 'Approved', 'Rejected'
    comment         String?
    createdAt       DateTime @default(now())

    @@index([requisitionId])
    @@index([approverId])
}


model RequisitionItem {
  id              String        @id @default(cuid())
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  name            String
  quantity        Int
  unitPrice       Float
  description     String?
  quotedItems     QuoteItem[]
  poItems         POItem[]

  @@index([requisitionId])
}

model CustomQuestion {
  id              String        @id @default(cuid())
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  questionText    String
  questionType    QuestionType
  isRequired      Boolean       @default(true)
  options         String[]
  answers         QuoteAnswer[]
  
  @@index([requisitionId])
}

model EvaluationCriteria {
    id                  String @id @default(cuid())
    requisitionId       String @unique
    requisition         PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    financialWeight     Int
    technicalWeight     Int
    financialCriteria   FinancialCriterion[]
    technicalCriteria   TechnicalCriterion[]
}

model FinancialCriterion {
    id                      String @id @default(cuid())
    evaluationCriteriaId    String
    evaluationCriteria      EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
    name                    String
    weight                  Int
    scores                  FinancialScore[]
}

model TechnicalCriterion {
    id                      String @id @default(cuid())
    evaluationCriteriaId    String
    evaluationCriteria      EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
    name                    String
    weight                  Int
    scores                  TechnicalScore[]
}

model CommitteeAssignment {
    userId          String
    requisitionId   String
    user            User        @relation(fields: [userId], references: [id])
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    scoresSubmitted Boolean     @default(false)
    
    @@id([userId, requisitionId])
}

model CommitteeRecommendation {
    id              String      @id @default(cuid())
    requisitionId   String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    committeeType   String // 'Committee A' or 'Committee B'
    recommendation  String // 'Recommend Approval', 'Recommend Rejection'
    justification   String?
    createdAt       DateTime    @default(now())

    @@index([requisitionId])
}

model Vendor {
  id              String        @id @default(cuid())
  userId          String        @unique
  user            User?
  name            String
  contactPerson   String
  email           String        @unique
  phone           String
  address         String
  kycStatus       KycStatus     @default(Pending)
  rejectionReason String?
  kycDocuments    KYC_Document[]
  quotations      Quotation[]
  contracts       Contract[]
  purchaseOrders  PurchaseOrder[]
}

model KYC_Document {
    id           String   @id @default(cuid())
    vendorId     String
    vendor       Vendor   @relation(fields: [vendorId], references: [id])
    name         String
    url          String
    submittedAt  DateTime
    
    @@index([vendorId])
}

model Quotation {
  id                      String        @id @default(cuid())
  transactionId           String?
  requisitionId           String
  requisition             PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendorId                String
  vendor                  Vendor        @relation(fields: [vendorId], references: [id])
  vendorName              String
  totalPrice              Float
  deliveryDate            DateTime
  createdAt               DateTime      @default(now())
  status                  QuotationStatus @default(Submitted)
  notes                   String?
  rank                    Int?
  finalAverageScore       Float?
  cpoDocumentUrl          String?
  experienceDocumentUrl   String?
  items                   QuoteItem[]
  answers                 QuoteAnswer[]
  scores                  CommitteeScoreSet[]

  @@index([requisitionId])
  @@index([vendorId])
}

model QuoteItem {
  id                      String    @id @default(cuid())
  quotationId             String
  quotation               Quotation @relation(fields: [quotationId], references: [id])
  requisitionItemId       String
  requisitionItem         RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  name                    String
  quantity                Int
  unitPrice               Float
  leadTimeDays            Int
  brandDetails            String?
  scores                  ItemScore[]

  @@index([quotationId])
  @@index([requisitionItemId])
}

model QuoteAnswer {
  id              String        @id @default(cuid())
  quotationId     String
  quotation       Quotation     @relation(fields: [quotationId], references: [id])
  questionId      String
  question        CustomQuestion @relation(fields: [questionId], references: [id])
  answer          String

  @@index([quotationId])
  @@index([questionId])
}

model CommitteeScoreSet {
    id                  String @id @default(cuid())
    quotationId         String
    quotation           Quotation @relation(fields: [quotationId], references: [id])
    scorerId            String
    scorer              User @relation(fields: [scorerId], references: [id])
    scorerName          String
    committeeComment    String?
    finalScore          Float
    itemScores          ItemScore[]
    submittedAt         DateTime @default(now())

    @@unique([quotationId, scorerId])
}

model ItemScore {
    id              String @id @default(cuid())
    scoreSetId      String
    scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id])
    quoteItemId     String
    quoteItem       QuoteItem @relation(fields: [quoteItemId], references: [id])
    finalScore      Float
    financialScores FinancialScore[]
    technicalScores TechnicalScore[]
    
    @@unique([scoreSetId, quoteItemId])
}

model FinancialScore {
    id                  String @id @default(cuid())
    itemScoreId         String
    itemScore           ItemScore @relation(fields: [itemScoreId], references: [id])
    criterionId         String
    criterion           FinancialCriterion @relation(fields: [criterionId], references: [id])
    score               Int
    comment             String?
}

model TechnicalScore {
    id                  String @id @default(cuid())
    itemScoreId         String
    itemScore           ItemScore @relation(fields: [itemScoreId], references: [id])
    criterionId         String
    criterion           TechnicalCriterion @relation(fields: [criterionId], references: [id])
    score               Int
    comment             String?
}

model PurchaseOrder {
  id                String        @id @default(cuid())
  transactionId     String?
  requisitionId     String        @unique
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionTitle  String
  vendorId          String
  vendor            Vendor        @relation(fields: [vendorId], references: [id])
  totalAmount       Float
  status            PurchaseOrderStatus @default(Issued)
  createdAt         DateTime      @default(now())
  notes             String?
  items             POItem[]
  receipts          GoodsReceiptNote[]
  invoices          Invoice[]

  @@index([vendorId])
}

model POItem {
  id                String        @id @default(cuid())
  purchaseOrderId   String
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  requisitionItemId String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int           @default(0)
  receiptItems      ReceiptItem[]

  @@index([purchaseOrderId])
  @@index([requisitionItemId])
}

model GoodsReceiptNote {
  id                String        @id @default(cuid())
  transactionId     String?
  purchaseOrderId   String
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedById      String
  receivedBy        User          @relation(fields: [receivedById], references: [id])
  receivedDate      DateTime      @default(now())
  items             ReceiptItem[]

  @@index([purchaseOrderId])
  @@index([receivedById])
}

model ReceiptItem {
  id                 String             @id @default(cuid())
  goodsReceiptNoteId String
  goodsReceiptNote   GoodsReceiptNote   @relation(fields: [goodsReceiptNoteId], references: [id])
  poItemId           String
  poItem             POItem             @relation(fields: [poItemId], references: [id])
  quantityReceived   Int
  condition          ReceiptItemCondition
  notes              String?

  @@index([goodsReceiptNoteId])
  @@index([poItemId])
}

model Invoice {
  id                String        @id @default(cuid())
  transactionId     String?
  purchaseOrderId   String
  po                PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  vendorId          String
  invoiceDate       DateTime
  totalAmount       Float
  status            InvoiceStatus @default(Pending)
  documentUrl       String?
  paymentDate       DateTime?
  paymentReference  String?
  items             InvoiceItem[]
  
  @@index([purchaseOrderId])
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float

  @@index([invoiceId])
}

model Contract {
  id              String   @id @default(cuid())
  contractNumber  String   @unique @default(cuid())
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendorId        String
  vendor          Vendor   @relation(fields: [vendorId], references: [id])
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  startDate       DateTime
  endDate         DateTime
  filePath        String?
  status          String   @default("Draft")
  createdAt       DateTime @default(now())

  @@index([requisitionId])
  @@index([vendorId])
  @@index([userId])
}

model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime  @default(now())
  userId        String?
  user          User?     @relation(fields: [userId], references: [id])
  action        String
  entity        String
  entityId      String
  details       String

  @@index([userId])
}

enum RequisitionStatus {
  Draft
  Pending_Approval
  Approved
  Rejected
  RFQ_In_Progress
  PO_Created
  Fulfilled
  Closed
  Pending_Managerial_Approval
  Pending_Committee_B_Review
  Pending_Committee_A_Recommendation
}

enum Urgency {
  Low
  Medium
  High
  Critical
}

enum UserRole {
  Requester
  Approver
  Procurement_Officer
  Finance
  Admin
  Receiving
  Vendor
  Committee
  Committee_Member
  Committee_A_Member
  Committee_B_Member
}

enum KycStatus {
  Pending
  Verified
  Rejected
}

enum QuestionType {
  text
  boolean
  "multiple-choice"
  file
}

enum QuotationStatus {
  Submitted
  Awarded
  Partially_Awarded
  Rejected
  Standby
  Invoice_Submitted
  Failed
  Accepted
  Declined
}

enum PurchaseOrderStatus {
  Issued
  Acknowledged
  Shipped
  Partially_Delivered
  Delivered
  Cancelled
  Matched
  Mismatched
  On_Hold
}

enum ReceiptItemCondition {
  Good
  Damaged
  Incorrect
}

enum InvoiceStatus {
  Pending
  Approved_for_Payment
  Paid
  Disputed
}
