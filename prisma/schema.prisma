
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @default(cuid())
  name            String
  email           String      @unique
  password        String
  role            String      
  approvalLimit   Float?
  departmentId    String?
  vendorId        String?     @unique
  managerId       String?

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  department      Department? @relation("DepartmentUsers", fields: [departmentId], references: [id])
  manager         User?       @relation("ManagerSubordinates", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates    User[]      @relation("ManagerSubordinates")
  vendor          Vendor?     @relation(fields: [vendorId], references: [id])
  
  headedDepartment Department? @relation("DepartmentHead")

  createdRequisitions   PurchaseRequisition[] @relation("Requester")
  approvedRequisitions  PurchaseRequisition[] @relation("Approver")
  currentApprovals      PurchaseRequisition[] @relation("CurrentApprover")
  
  financialCommitteeForRequisitions PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommitteeForRequisitions PurchaseRequisition[] @relation("TechnicalCommitteeMembers")

  auditLogs           AuditLog[]
  receipts            GoodsReceiptNote[]
  committeeAssignments CommitteeAssignment[]

  reviews             Review[] @relation("Reviewer")
}

model Department {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  
  users       User[] @relation("DepartmentUsers")
  
  headId      String?     @unique
  head        User?       @relation("DepartmentHead", fields: [headId], references: [id])

  requisitions PurchaseRequisition[]
}

model Role {
  name        String @id @unique
  description String?
}


model PurchaseRequisition {
  id                          String      @id @default(cuid())
  transactionId               String?     @unique
  title                       String
  justification               String
  status                      String
  urgency                     String      @default("Low")
  totalPrice                  Float
  createdAt                   DateTime    @default(now())
  updatedAt                   DateTime    @updatedAt
  
  requesterId                 String
  requester                   User        @relation("Requester", fields: [requesterId], references: [id])
  
  departmentId                String?
  department                  Department? @relation(fields: [departmentId], references: [id])
  
  approverId                  String?
  approver                    User?       @relation("Approver", fields: [approverId], references: [id])
  
  currentApproverId           String?
  currentApprover             User?       @relation("CurrentApprover", fields: [currentApproverId], references: [id])

  deadline                    DateTime?
  scoringDeadline             DateTime?
  awardResponseDeadline       DateTime?
  awardResponseDurationMinutes Int?
  
  items                       RequisitionItem[]
  customQuestions             CustomQuestion[]
  evaluationCriteria          EvaluationCriteria?
  
  allowedVendorIds            String[]
  awardedQuoteItemIds         String[]
  
  financialCommitteeMemberIds String[]
  technicalCommitteeMemberIds String[]
  committeeName               String?
  committeePurpose            String?

  financialCommitteeMembers   User[] @relation("FinancialCommitteeMembers", fields: [financialCommitteeMemberIds], references: [id])
  technicalCommitteeMembers   User[] @relation("TechnicalCommitteeMembers", fields: [technicalCommitteeMemberIds], references: [id])
  
  quotations                  Quotation[]
  committeeAssignments        CommitteeAssignment[]

  purchaseOrderId             String?      @unique
  purchaseOrder               PurchaseOrder?

  contracts                   Contract[]
  reviews                     Review[] @relation("RequisitionReviews")
}

model CommitteeAssignment {
  userId          String
  requisitionId   String
  scoresSubmitted Boolean  @default(false)
  
  user          User                @relation(fields: [userId], references: [id])
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])

  @@id([userId, requisitionId])
}


model RequisitionItem {
  id            String      @id @default(cuid())
  name          String
  quantity      Int
  unitPrice     Float
  description   String?
  
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  
  quoteItems    QuoteItem[]
  poItems       POItem[]
}

model CustomQuestion {
  id            String      @id @default(cuid())
  questionText  String
  questionType  QuestionType
  isRequired    Boolean     @default(true)
  options       String[]
  
  requisitionId String?
  requisition   PurchaseRequisition? @relation(fields: [requisitionId], references: [id], onDelete: Cascade)

  answers       QuoteAnswer[]
}

model EvaluationCriteria {
    id              String      @id @default(cuid())
    requisitionId   String      @unique
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    
    financialWeight Float
    technicalWeight Float

    financialCriteria   FinancialCriterion[]
    technicalCriteria   TechnicalCriterion[]
}

model FinancialCriterion {
    id          String      @id @default(cuid())
    name        String
    weight      Float
    
    evaluationCriteriaId String
    evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)

    scores FinancialScore[]
}

model TechnicalCriterion {
    id          String      @id @default(cuid())
    name        String
    weight      Float

    evaluationCriteriaId String
    evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)

    scores TechnicalScore[]
}


model Quotation {
  id            String      @id @default(cuid())
  transactionId String?
  requisitionId String
  vendorId      String
  vendorName    String
  totalPrice    Float
  deliveryDate  DateTime
  status        String
  notes         String?
  rank          Int?
  finalAverageScore Float?
  cpoDocumentUrl String?
  experienceDocumentUrl String?
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  vendor        Vendor      @relation(fields: [vendorId], references: [id])

  items         QuoteItem[]
  answers       QuoteAnswer[]
  scores        CommitteeScoreSet[]
}

model QuoteItem {
  id                  String      @id @default(cuid())
  requisitionItemId   String
  name                String
  quantity            Int
  unitPrice           Float
  leadTimeDays        Int
  brandDetails        String?
  
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)

  requisitionItem RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  
  scores ItemScore[]
}

model QuoteAnswer {
  id          String      @id @default(cuid())
  questionId  String
  answer      String
  
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)

  question    CustomQuestion @relation(fields: [questionId], references: [id])
}

model CommitteeScoreSet {
    id              String      @id @default(cuid())
    quotationId     String
    scorerId        String
    scorerName      String
    finalScore      Float
    committeeComment String?
    
    submittedAt     DateTime    @default(now())
    
    quotation       Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
    scorer          User        @relation(fields: [scorerId], references: [id])
    
    itemScores      ItemScore[]

    @@unique([quotationId, scorerId])
}

model ItemScore {
    id          String      @id @default(cuid())
    scoreSetId  String
    quoteItemId String
    finalScore  Float
    
    scoreSet    CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
    quoteItem   QuoteItem         @relation(fields: [quoteItemId], references: [id])

    financialScores FinancialScore[]
    technicalScores TechnicalScore[]
}

model FinancialScore {
    id          String      @id @default(cuid())
    itemScoreId String
    criterionId String
    score       Float
    comment     String?

    itemScore   ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
    criterion   FinancialCriterion @relation(fields: [criterionId], references: [id])
}

model TechnicalScore {
    id          String      @id @default(cuid())
    itemScoreId String
    criterionId String
    score       Float
    comment     String?

    itemScore   ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
    criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id])
}


model PurchaseOrder {
  id              String      @id @default(cuid())
  transactionId   String?
  requisitionId   String      @unique
  requisitionTitle String
  vendorId        String
  totalAmount     Float
  status          String
  notes           String?
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor        Vendor      @relation(fields: [vendorId], references: [id])
  
  items         POItem[]
  receipts      GoodsReceiptNote[]
  invoices      Invoice[]
}

model POItem {
  id              String      @id @default(cuid())
  name            String
  quantity        Int
  unitPrice       Float
  totalPrice      Float
  receivedQuantity Int        @default(0)
  
  requisitionItemId String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])

  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  
  receiptItems    ReceiptItem[]
}


model GoodsReceiptNote {
  id              String      @id @default(cuid())
  transactionId   String?
  purchaseOrderId String
  receivedById    String
  
  receivedDate    DateTime    @default(now())
  
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedBy      User          @relation(fields: [receivedById], references: [id])

  items           ReceiptItem[]
}

model ReceiptItem {
  id                  String      @id @default(cuid())
  poItemId            String
  quantityReceived    Int
  condition           String
  notes               String?
  
  goodsReceiptNoteId  String
  goodsReceiptNote    GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  poItem              POItem           @relation(fields: [poItemId], references: [id])
}

model Invoice {
  id                String      @id @default(cuid())
  transactionId     String?
  purchaseOrderId   String
  vendorId          String
  invoiceDate       DateTime
  totalAmount       Float
  status            String
  documentUrl       String?
  paymentDate       DateTime?
  paymentReference  String?

  po                PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])

  items             InvoiceItem[]
}

model InvoiceItem {
  id          String      @id @default(cuid())
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  
  invoiceId   String
  invoice     Invoice     @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Contract {
  id              String      @id @default(cuid())
  contractNumber  String      @unique @default(cuid())
  requisitionId   String
  vendorId        String
  startDate       DateTime
  endDate         DateTime
  status          String
  filePath        String?
  notes           String?
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor          Vendor              @relation(fields: [vendorId], references: [id])
}


model Vendor {
  id            String      @id @default(cuid())
  name          String
  contactPerson String
  email         String      @unique
  phone         String
  address       String
  kycStatus     String      @default("Pending")
  rejectionReason String?
  
  userId        String      @unique
  user          User        

  quotations    Quotation[]
  purchaseOrders PurchaseOrder[]
  contracts     Contract[]
  kycDocuments  KYC_Document[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendorId    String
  name        String
  url         String
  submittedAt DateTime @default(now())

  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}


model AuditLog {
  id            String   @id @default(cuid())
  transactionId String?
  timestamp     DateTime @default(now())
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String

  user          User?    @relation(fields: [userId], references: [id])
}

model Review {
  id            String      @id @default(cuid())
  requisitionId String
  reviewerId    String
  committeeType String      // "Committee A" or "Committee B"
  decision      String      // "Approved", "Rejected"
  comment       String?
  createdAt     DateTime    @default(now())

  requisition   PurchaseRequisition @relation("RequisitionReviews", fields: [requisitionId], references: [id])
  reviewer      User                @relation("Reviewer", fields: [reviewerId], references: [id])

  @@unique([requisitionId, reviewerId])
}

enum QuestionType {
  text
  boolean
  multiple_choice
  file
}
