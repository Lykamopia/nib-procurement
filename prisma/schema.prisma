// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String                @id @default(cuid())
  name                      String
  email                     String                @unique
  password                  String
  role                      String
  departmentId              String?
  vendorId                  String?               @unique
  approvalLimit             Float?
  managerId                 String?
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime              @updatedAt
  department                Department?           @relation(fields: [departmentId], references: [id])
  vendor                    Vendor?
  createdRequisitions       PurchaseRequisition[] @relation("CreatedRequisitions")
  approvedRequisitions      PurchaseRequisition[] @relation("ApprovedRequisitions")
  currentApprovals          PurchaseRequisition[] @relation("CurrentApprovals")
  manager                   User?                 @relation("ManagerSubordinates", fields: [managerId], references: [id])
  subordinates              User[]                @relation("ManagerSubordinates")
  receivedGoods             GoodsReceiptNote[]
  auditLogs                 AuditLog[]
  sentContracts             Contract[]
  committeeScores           CommitteeScoreSet[]   @relation("Scorer")
  financialCommitteeOn      PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommitteeOn      PurchaseRequisition[] @relation("TechnicalCommitteeMembers")
  committeeAssignments      CommitteeAssignment[]
}

model Department {
  id           String                @id @default(cuid())
  name         String                @unique
  description  String?
  headId       String?               @unique
  head         User?                 @relation(fields: [headId], references: [id])
  users        User[]
  requisitions PurchaseRequisition[]
}

model Vendor {
  id            String                @id @default(cuid())
  name          String
  contactPerson String
  email         String                @unique
  phone         String
  address       String
  userId        String                @unique
  kycStatus     String // Pending, Verified, Rejected
  rejectionReason String?
  user          User                  @relation(fields: [userId], references: [id])
  kycDocuments  KYC_Document[]
  quotations    Quotation[]
  contracts     Contract[]
  purchaseOrders PurchaseOrder[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendorId    String
  name        String
  url         String
  submittedAt DateTime
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model PurchaseRequisition {
  id                           String                 @id @default(cuid())
  transactionId                String?                @unique
  title                        String
  justification                String
  status                       String
  urgency                      String
  totalPrice                   Float
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  approverComment              String?
  deadline                     DateTime?
  scoringDeadline              DateTime?
  awardResponseDeadline        DateTime?
  awardResponseDurationMinutes Int?
  purchaseOrderId              String?
  committeeName                String?
  committeePurpose             String?
  requesterId                  String
  departmentId                 String?
  approverId                   String?
  currentApproverId            String?
  allowedVendorIds             String[]
  awardedQuoteItemIds          String[]
  cpoAmount                    Float?
  rfqSettings                  Json?
  requester                    User                   @relation("CreatedRequisitions", fields: [requesterId], references: [id])
  department                   Department?            @relation(fields: [departmentId], references: [id])
  approver                     User?                  @relation("ApprovedRequisitions", fields: [approverId], references: [id])
  currentApprover              User?                  @relation("CurrentApprovals", fields: [currentApproverId], references: [id])
  items                        RequisitionItem[]
  customQuestions              CustomQuestion[]
  evaluationCriteria           EvaluationCriteria?
  quotations                   Quotation[]
  contracts                    Contract[]
  purchaseOrders               PurchaseOrder[]
  reviews                      Review[]
  financialCommitteeMembers    User[]                 @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers    User[]                 @relation("TechnicalCommitteeMembers")
  committeeAssignments         CommitteeAssignment[]
}

model RequisitionItem {
  id            String              @id @default(cuid())
  requisitionId String
  name          String
  quantity      Int
  unitPrice     Float?
  description   String?
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  quoteItems    QuoteItem[]
  poItems       POItem[]
}

model EvaluationCriteria {
  id                String                 @id @default(cuid())
  requisitionId     String                 @unique
  financialWeight   Float
  technicalWeight   Float
  requisition       PurchaseRequisition    @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteriaId String
  name                 String
  weight               Float
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteriaId String
  name                 String
  weight               Float
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
}


model CustomQuestion {
  id            String              @id @default(cuid())
  requisitionId String
  questionText  String
  questionType  String // text, boolean, multiple-choice, file
  isRequired    Boolean             @default(false)
  options       String[]
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  answers       QuoteAnswer[]
}

model Quotation {
  id                    String              @id @default(cuid())
  transactionId         String?
  requisitionId         String
  vendorId              String
  vendorName            String
  totalPrice            Float
  deliveryDate          DateTime
  status                String // Submitted, Awarded, Rejected, etc.
  notes                 String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  rank                  Int?
  finalAverageScore     Float?
  cpoDocumentUrl        String?
  experienceDocumentUrl String?
  requisition           PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  vendor                Vendor              @relation(fields: [vendorId], references: [id])
  items                 QuoteItem[]
  answers               QuoteAnswer[]
  scores                CommitteeScoreSet[]
}

model QuoteItem {
  id                String    @id @default(cuid())
  quotationId       String
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  quotation         Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id], onDelete: Cascade)
  scores            ItemScore[]
}

model QuoteAnswer {
  id          String         @id @default(cuid())
  quotationId String
  questionId  String
  answer      String
  quotation   Quotation      @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  question    CustomQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model CommitteeAssignment {
  userId          String
  requisitionId   String
  scoresSubmitted Boolean @default(false)
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  
  @@id([userId, requisitionId])
}

model CommitteeScoreSet {
  id               String      @id @default(cuid())
  quotationId      String
  scorerId         String
  scorerName       String
  committeeComment String?
  finalScore       Float
  submittedAt      DateTime    @default(now())
  quotation        Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  scorer           User        @relation("Scorer", fields: [scorerId], references: [id], onDelete: Cascade)
  itemScores       ItemScore[]
  
  @@unique([quotationId, scorerId])
}

model ItemScore {
  id         String            @id @default(cuid())
  scoreSetId String
  quoteItemId String
  finalScore Float
  scoreSet   CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  quoteItem  QuoteItem         @relation(fields: [quoteItemId], references: [id], onDelete: Cascade)
  scores     Score[]
}

model Contract {
  id              String              @id @default(cuid())
  contractNumber  String              @default(cuid())
  requisitionId   String
  vendorId        String
  sentById        String
  startDate       DateTime
  endDate         DateTime
  status          String
  filePath        String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor          Vendor              @relation(fields: [vendorId], references: [id])
  sentBy          User                @relation(fields: [sentById], references: [id])
}

model PurchaseOrder {
  id               String           @id @default(cuid())
  transactionId    String?
  requisitionId    String
  requisitionTitle String
  vendorId         String
  totalAmount      Float
  status           String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  notes            String?
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor           Vendor           @relation(fields: [vendorId], references: [id])
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id                String            @id @default(cuid())
  purchaseOrderId   String
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int
  purchaseOrder     PurchaseOrder     @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  requisitionItem   RequisitionItem   @relation(fields: [requisitionItemId], references: [id])
  receiptItems      ReceiptItem[]
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrderId String
  receivedById    String
  receivedDate    DateTime      @default(now())
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNoteId String
  poItemId           String
  quantityReceived   Int
  condition          String // Good, Damaged, Incorrect
  notes              String?
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  poItem             POItem           @relation(fields: [poItemId], references: [id])
}

model Invoice {
  id               String         @id @default(cuid())
  transactionId    String?
  purchaseOrderId  String
  vendorId         String
  invoiceDate      DateTime
  totalAmount      Float
  status           String
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  purchaseOrder    PurchaseOrder  @relation(fields: [purchaseOrderId], references: [id])
  items            InvoiceItem[]
}

model InvoiceItem {
  id         String  @id @default(cuid())
  invoiceId  String
  name       String
  quantity   Int
  unitPrice  Float
  totalPrice Float
  invoice    Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id            String   @id @default(cuid())
  transactionId String?
  userId        String?
  timestamp     DateTime
  action        String
  entity        String
  entityId      String
  details       String
  user          User?    @relation(fields: [userId], references: [id])
}

model Review {
  id            String  @id @default(cuid())
  requisitionId String
  reviewerId    String
  committeeType String // Committee A, Committee B
  decision      String // Approved, Rejected
  comment       String
  createdAt     DateTime @default(now())

  requisition PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  reviewer    User @relation(fields: [reviewerId], references: [id])
}

enum ScoreType {
  FINANCIAL
  TECHNICAL
}

model Score {
    id          String      @id @default(cuid())
    criterionId String
    score       Int
    comment     String?
    itemScoreId String
    itemScore   ItemScore   @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
    type        ScoreType
}
