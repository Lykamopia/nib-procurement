
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id @default(cuid())
  name                    String
  email                   String                  @unique
  password                String
  role                    String
  approvalLimit           Float?
  managerId               String?
  vendorId                String?                 @unique
  departmentId            String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  department              Department?             @relation("DepartmentUsers", fields: [departmentId], references: [id])
  headedDepartment        Department?             @relation("DepartmentHead")
  manager                 User?                   @relation("ManagerSubordinates", fields: [managerId], references: [id])
  subordinates            User[]                  @relation("ManagerSubordinates")
  requisitions            PurchaseRequisition[]   @relation("Requester")
  approvedRequisitions    PurchaseRequisition[]   @relation("Approver")
  currentApprovals        PurchaseRequisition[]   @relation("CurrentApprover")
  vendor                  Vendor?
  sentContracts           Contract[]
  auditLogs               AuditLog[]
  committeeScores         CommitteeScoreSet[]
  receipts                GoodsReceiptNote[]
  reviews                 Review[]
  financialCommitteeOn    PurchaseRequisition[]   @relation("FinancialCommitteeMembers")
  technicalCommitteeOn    PurchaseRequisition[]   @relation("TechnicalCommitteeMembers")
  committeeAssignments    CommitteeAssignment[]

  @@index([departmentId])
  @@index([managerId])
}

model Department {
  id           String                @id @default(cuid())
  name         String                @unique
  description  String?
  headId       String?               @unique
  head         User?                 @relation("DepartmentHead", fields: [headId], references: [id])
  users        User[]                @relation("DepartmentUsers")
  requisitions PurchaseRequisition[]
}

model Vendor {
  id              String                @id @default(cuid())
  name            String
  contactPerson   String
  email           String                @unique
  phone           String
  address         String
  kycStatus       String                @default("Pending") // Pending, Verified, Rejected
  rejectionReason String?
  userId          String                @unique
  user            User                  @relation(fields: [userId], references: [id])
  quotations      Quotation[]
  purchaseOrders  PurchaseOrder[]
  kycDocuments    KYC_Document[]
  contracts       Contract[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendorId    String
  name        String // e.g., 'Business License', 'Tax ID'
  url         String
  submittedAt DateTime
  vendor      Vendor   @relation(fields: [vendorId], references: [id])

  @@index([vendorId])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String
}

model Contract {
  id              String              @id @default(cuid())
  contractNumber  String              @unique @default(cuid())
  requisitionId   String
  vendorId        String
  sentById        String
  startDate       DateTime
  endDate         DateTime
  status          String // Draft, Active, Expired
  filePath        String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor          Vendor              @relation(fields: [vendorId], references: [id])
  sentBy          User                @relation(fields: [sentById], references: [id])

  @@index([requisitionId])
  @@index([vendorId])
  @@index([sentById])
}

model EvaluationCriteria {
  id                 String               @id @default(cuid())
  requisitionId      String               @unique
  financialWeight    Float
  technicalWeight    Float
  financialCriteria  FinancialCriterion[]
  technicalCriteria  TechnicalCriterion[]
  requisition        PurchaseRequisition  @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  name                 String
  weight               Float
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)

  @@index([evaluationCriteriaId])
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  name                 String
  weight               Float
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)

  @@index([evaluationCriteriaId])
}

model PurchaseRequisition {
  id                           String                 @id @default(cuid())
  transactionId                String?                @unique
  title                        String
  justification                String
  status                       String
  totalPrice                   Float
  urgency                      String                 @default("Low") // Low, Medium, High, Critical
  requesterId                  String
  departmentId                 String
  approverId                   String?
  currentApproverId            String?
  approverComment              String?
  purchaseOrderId              String?                @unique
  deadline                     DateTime? // Deadline for vendors to submit quotes
  scoringDeadline              DateTime? // Deadline for committee to score
  awardResponseDeadline        DateTime?
  awardResponseDurationMinutes Int?
  committeeName                String?
  committeePurpose             String?
  cpoAmount                    Float?
  rfqSettings                  Json?
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  requester                    User                   @relation("Requester", fields: [requesterId], references: [id])
  approver                     User?                  @relation("Approver", fields: [approverId], references: [id])
  currentApprover              User?                  @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  department                   Department             @relation(fields: [departmentId], references: [id])
  items                        RequisitionItem[]
  customQuestions              CustomQuestion[]
  evaluationCriteria           EvaluationCriteria?
  quotations                   Quotation[]
  financialCommitteeMembers    User[]                 @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers    User[]                 @relation("TechnicalCommitteeMembers")
  allowedVendorIds             String[]
  awardedQuoteItemIds          String[]
  contracts                    Contract[]
  purchaseOrders               PurchaseOrder[]
  reviews                      Review[]
  committeeAssignments         CommitteeAssignment[]

  @@index([requesterId])
  @@index([approverId])
  @@index([departmentId])
  @@index([currentApproverId])
}

model RequisitionItem {
  id            String              @id @default(cuid())
  name          String
  description   String?
  quantity      Int
  unitPrice     Float?
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  quoteItems    QuoteItem[]
  poItems       POItem[]

  @@index([requisitionId])
}

model CustomQuestion {
  id              String              @id @default(cuid())
  questionText    String
  questionType    String // text, boolean, multiple-choice, file
  options         String[]
  isRequired      Boolean             @default(true)
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  answers         QuoteAnswer[]

  @@index([requisitionId])
}

model Quotation {
  id                    String              @id @default(cuid())
  transactionId         String?
  requisitionId         String
  vendorId              String
  vendorName            String
  totalPrice            Float
  deliveryDate          DateTime
  status                String
  notes                 String?
  rank                  Int?
  finalAverageScore     Float?
  cpoDocumentUrl        String?
  experienceDocumentUrl String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  requisition           PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor                Vendor              @relation(fields: [vendorId], references: [id])
  items                 QuoteItem[]
  answers               QuoteAnswer[]
  scores                CommitteeScoreSet[]

  @@index([requisitionId])
  @@index([vendorId])
}

model QuoteItem {
  id                String      @id @default(cuid())
  requisitionItemId String
  quotationId       String
  name              String
  brandDetails      String?
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  quotation         Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  scores            ItemScore[]

  @@index([requisitionItemId])
  @@index([quotationId])
}

model QuoteAnswer {
  id          String    @id @default(cuid())
  quotationId String
  questionId  String
  answer      String
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  question    CustomQuestion @relation(fields: [questionId], references: [id])

  @@index([quotationId])
  @@index([questionId])
}

model PurchaseOrder {
  id               String               @id @default(cuid())
  transactionId    String?
  requisitionId    String
  requisitionTitle String
  vendorId         String
  totalAmount      Float
  status           String // Issued, Acknowledged, Shipped, Partially Delivered, Delivered, Cancelled, Matched, Mismatched, On_Hold
  notes            String?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  vendor           Vendor               @relation(fields: [vendorId], references: [id])
  requisition      PurchaseRequisition  @relation(fields: [requisitionId], references: [id])
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]

  @@index([vendorId])
  @@index([requisitionId])
}

model POItem {
  id                String          @id @default(cuid())
  purchaseOrderId   String
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int             @default(0)
  purchaseOrder     PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  receiptItems      ReceiptItem[]

  @@index([purchaseOrderId])
  @@index([requisitionItemId])
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrderId String
  receivedById    String
  receivedDate    DateTime      @default(now())
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  items           ReceiptItem[]

  @@index([purchaseOrderId])
  @@index([receivedById])
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNoteId String
  poItemId           String
  quantityReceived   Int
  condition          String // Good, Damaged, Incorrect
  notes              String?
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  poItem             POItem           @relation(fields: [poItemId], references: [id])

  @@index([goodsReceiptNoteId])
  @@index([poItemId])
}

model Invoice {
  id               String        @id @default(cuid())
  transactionId    String?
  purchaseOrderId  String
  vendorId         String
  invoiceDate      DateTime
  totalAmount      Float
  status           String // Pending, Approved_for_Payment, Paid, Disputed
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  items            InvoiceItem[]

  @@index([purchaseOrderId])
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
}

model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime  @default(now())
  userId        String?
  action        String
  entity        String
  entityId      String
  details       String
  user          User?     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model CommitteeAssignment {
  userId          String
  requisitionId   String
  scoresSubmitted Boolean @default(false)
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)

  @@id([userId, requisitionId])
}

model Review {
  id            String              @id @default(cuid())
  requisitionId String
  reviewerId    String
  committeeType String // e.g., 'Committee A', 'Committee B'
  decision      String // Approved, Rejected
  comment       String
  createdAt     DateTime            @default(now())
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  reviewer      User                @relation(fields: [reviewerId], references: [id])

  @@index([requisitionId])
  @@index([reviewerId])
}

model CommitteeScoreSet {
  id               String      @id @default(cuid())
  quotationId      String
  scorerId         String
  committeeComment String?
  finalScore       Float
  submittedAt      DateTime    @default(now())
  quotation        Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  scorer           User        @relation(fields: [scorerId], references: [id], onDelete: Cascade)
  itemScores       ItemScore[]

  @@unique([quotationId, scorerId])
}

model ItemScore {
  id         String            @id @default(cuid())
  scoreSetId String
  quoteItemId String
  finalScore Float
  scoreSet   CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  quoteItem  QuoteItem         @relation(fields: [quoteItemId], references: [id], onDelete: Cascade)
  scores     Score[]

  @@index([scoreSetId])
  @@index([quoteItemId])
}

enum ScoreType {
  FINANCIAL
  TECHNICAL
}

model Score {
  id          String    @id @default(cuid())
  itemScoreId String
  itemScore   ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  type        ScoreType
  criterionId String
  score       Float
  comment     String?

  @@index([itemScoreId])
}
