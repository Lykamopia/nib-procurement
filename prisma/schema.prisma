
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id @default(cuid())
  name                    String
  email                   String                  @unique
  password                String
  role                    UserRole
  approvalLimit           Float?
  managerId               String?
  manager                 User?                   @relation("UserHierarchy", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reports                 User[]                  @relation("UserHierarchy")
  vendorId                String?                 @unique
  vendor                  Vendor?                 @relation(fields: [vendorId], references: [id])
  departmentId            String?
  department              Department?             @relation(fields: [departmentId], references: [id])
  createdRequisitions     PurchaseRequisition[]   @relation("Requester")
  approvedRequisitions    PurchaseRequisition[]   @relation("Approver")
  auditLogs               AuditLog[]
  receipts                GoodsReceiptNote[]
  committeeAssignments    CommitteeAssignment[]
  financialCommitteeFor   PurchaseRequisition[]   @relation("FinancialCommitteeMembers")
  technicalCommitteeFor   PurchaseRequisition[]   @relation("TechnicalCommitteeMembers")
  scores                  CommitteeScoreSet[]

  @@index([managerId])
}

model Department {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
  purchaseRequisitions PurchaseRequisition[]
}

model Vendor {
  id            String          @id @default(cuid())
  name          String
  contactPerson String
  email         String          @unique
  phone         String
  address       String
  kycStatus     KycStatus       @default(Pending)
  rejectionReason String?
  userId        String          @unique
  user          User?
  kycDocuments  KYC_Document[]
  quotations    Quotation[]
  contracts     Contract[]
  purchaseOrders PurchaseOrder[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  name        String
  url         String
  submittedAt DateTime @default(now())

  @@index([vendorId])
}

model PurchaseRequisition {
  id                           String                  @id @default(cuid())
  transactionId                String?                 @unique
  requesterId                  String
  requesterName                String // Denormalized for convenience
  requester                    User                    @relation("Requester", fields: [requesterId], references: [id])
  title                        String
  departmentId                 String
  department                   Department              @relation(fields: [departmentId], references: [id])
  justification                String
  totalPrice                   Float
  status                       RequisitionStatus       @default(Draft)
  approverId                   String?
  approver                     User?                   @relation("Approver", fields: [approverId], references: [id])
  approverComment              String?
  currentApproverId            String? // For hierarchical approval
  purchaseOrderId              String?
  createdAt                    DateTime                @default(now())
  updatedAt                    DateTime                @updatedAt
  items                        RequisitionItem[]
  customQuestions              CustomQuestion[]
  evaluationCriteria           EvaluationCriteria?
  financialCommitteeMembers    User[]                  @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers    User[]                  @relation("TechnicalCommitteeMembers")
  committeeAssignments         CommitteeAssignment[]
  quotations                   Quotation[]
  contract                     Contract?
  purchaseOrders               PurchaseOrder[]
  allowedVendorIds             String[]
  deadline                     DateTime?
  scoringDeadline              DateTime?
  awardResponseDeadline        DateTime?
  awardResponseDurationMinutes Int?
  committeeName                String?
  committeePurpose             String?
  cpoAmount                    Float?
  rfqSettings                  Json?
  awardedQuoteItemIds          String[]                @default([])


  @@index([requesterId])
  @@index([approverId])
}

model CommitteeAssignment {
  userId          String
  requisitionId   String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  scoresSubmitted Boolean  @default(false)

  @@id([userId, requisitionId])
}

model RequisitionItem {
  id              String             @id @default(cuid())
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  name            String
  description     String?
  quantity        Int
  unitPrice       Float
  quoteItems      QuoteItem[]
  poItems         POItem[]

  @@index([requisitionId])
}

model CustomQuestion {
  id                String             @id @default(cuid())
  requisitionId     String
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  questionText      String
  questionType      QuestionType
  isRequired        Boolean            @default(true)
  options           String[]
  requisitionItemId String? // Optional link to a specific item
  answers           QuoteAnswer[]

  @@index([requisitionId])
}

model EvaluationCriteria {
  id                String                 @id @default(cuid())
  requisitionId     String                 @unique
  requisition       PurchaseRequisition    @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  financialWeight   Float
  technicalWeight   Float
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String              @id @default(cuid())
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                 String
  weight               Float
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String              @id @default(cuid())
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                 String
  weight               Float
  scores               TechnicalScore[]
}

model Quotation {
  id                    String              @id @default(cuid())
  transactionId         String?
  requisitionId         String
  requisition           PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  vendorId              String
  vendor                Vendor              @relation(fields: [vendorId], references: [id])
  vendorName            String
  totalPrice            Float
  deliveryDate          DateTime
  status                QuotationStatus     @default(Submitted)
  notes                 String?
  rank                  Int?
  finalAverageScore     Float?
  createdAt             DateTime            @default(now())
  cpoDocumentUrl        String?
  experienceDocumentUrl String?
  items                 QuoteItem[]
  answers               QuoteAnswer[]
  scores                CommitteeScoreSet[]

  @@index([requisitionId])
  @@index([vendorId])
}

model QuoteItem {
  id                String      @id @default(cuid())
  quotationId       String
  quotation         Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  requisitionItemId String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  scores            ItemScore[]

  @@index([quotationId])
  @@index([requisitionItemId])
}

model QuoteAnswer {
  id          String         @id @default(cuid())
  quotationId String
  quotation   Quotation      @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  questionId  String
  question    CustomQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer      String

  @@index([quotationId])
  @@index([questionId])
}

model CommitteeScoreSet {
  id               String           @id @default(cuid())
  quotationId      String
  quotation        Quotation        @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  scorerId         String
  scorer           User             @relation(fields: [scorerId], references: [id])
  scorerName       String // Denormalized for convenience
  committeeComment String?
  finalScore       Float
  submittedAt      DateTime         @default(now())
  itemScores       ItemScore[]

  @@unique([quotationId, scorerId])
  @@index([scorerId])
}

model ItemScore {
  id              String           @id @default(cuid())
  scoreSetId      String
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  quoteItemId     String
  quoteItem       QuoteItem         @relation(fields: [quoteItemId], references: [id], onDelete: Cascade)
  finalScore      Float
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]

  @@index([scoreSetId])
  @@index([quoteItemId])
}

model FinancialScore {
  id          String             @id @default(cuid())
  itemScoreId String
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  criterionId String
  criterion   FinancialCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  score       Float
  comment     String?

  @@index([itemScoreId])
}

model TechnicalScore {
  id          String             @id @default(cuid())
  itemScoreId String
  itemScore   ItemScore          @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  criterionId String
  criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  score       Float
  comment     String?

  @@index([itemScoreId])
}

model Contract {
  id             String             @id @default(cuid())
  contractNumber String             @default(cuid()) @unique
  requisitionId  String             @unique
  requisition    PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  vendorId       String
  vendor         Vendor             @relation(fields: [vendorId], references: [id])
  startDate      DateTime
  endDate        DateTime
  filePath       String?
  status         ContractStatus
  createdAt      DateTime           @default(now())

  @@index([vendorId])
}


model PurchaseOrder {
  id               String             @id @default(cuid())
  transactionId    String?
  requisitionId    String
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionTitle String
  vendorId         String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  totalAmount      Float
  status           PurchaseOrderStatus @default(Issued)
  createdAt        DateTime           @default(now())
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
  notes            String?

  @@index([requisitionId])
  @@index([vendorId])
}

model POItem {
  id                String             @id @default(cuid())
  purchaseOrderId   String
  purchaseOrder     PurchaseOrder      @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  requisitionItemId String
  requisitionItem   RequisitionItem    @relation(fields: [requisitionItemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int                @default(0)
  receiptItems      ReceiptItem[]

  @@index([purchaseOrderId])
  @@index([requisitionItemId])
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedById    String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]

  @@index([purchaseOrderId])
  @@index([receivedById])
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNoteId String
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  poItemId           String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  quantityReceived   Int
  condition          ReceiptCondition
  notes              String?

  @@index([goodsReceiptNoteId])
  @@index([poItemId])
}

model Invoice {
  id               String        @id @default(cuid())
  transactionId    String?
  purchaseOrderId  String
  po               PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  vendorId         String
  invoiceDate      DateTime
  totalAmount      Float
  status           InvoiceStatus @default(Pending)
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  items            InvoiceItem[]

  @@index([purchaseOrderId])
}

model InvoiceItem {
  id        String   @id @default(cuid())
  invoiceId String
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  name      String
  quantity  Int
  unitPrice Float
  totalPrice Float

  @@index([invoiceId])
}

model AuditLog {
  id            String   @id @default(cuid())
  transactionId String?
  timestamp     DateTime @default(now())
  userId        String?
  user          User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action        String
  entity        String
  entityId      String
  details       String

  @@index([userId])
  @@index([transactionId])
}

enum UserRole {
  Requester
  Approver
  Procurement_Officer
  Finance
  Admin
  Receiving
  Vendor
  Committee_Member
  Committee // General committee role if needed
}

enum RequisitionStatus {
  Draft
  Pending_Approval
  Approved
  Rejected
  RFQ_In_Progress
  PO_Created
  Fulfilled
  Closed
  Pending_Managerial_Approval
}

enum KycStatus {
  Pending
  Verified
  Rejected
}

enum QuestionType {
  text
  boolean
  multiple_choice
  file
}

enum QuotationStatus {
  Submitted
  Awarded
  Partially_Awarded
  Rejected
  Standby
  Invoice_Submitted
  Failed
  Accepted
  Declined
}

enum PurchaseOrderStatus {
  Issued
  Acknowledged
  Shipped
  Partially_Delivered
  Delivered
  Cancelled
  Matched
  Mismatched
  On_Hold
}

enum ReceiptCondition {
  Good
  Damaged
  Incorrect
}

enum InvoiceStatus {
  Pending
  Approved_for_Payment
  Paid
  Disputed
}

enum ContractStatus {
  Draft
  Active
  Expired
}
