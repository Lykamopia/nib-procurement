
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                String                      @id @default(cuid())
  name                              String
  email                             String                      @unique
  password                          String
  role                              Role                        @relation(fields: [roleName], references: [name])
  roleName                          String
  vendorId                          String?                     @unique
  vendor                            Vendor?
  departmentId                      String?
  department                        Department?                 @relation("DepartmentMembers", fields: [departmentId], references: [id])
  approvalLimit                     Float?
  managerId                         String?
  manager                           User?                       @relation("ManagerSubordinates", fields: [managerId], references: [id])
  subordinates                      User[]                      @relation("ManagerSubordinates")
  requisitions                      PurchaseRequisition[]       @relation("Requester")
  approvalsGiven                    Approval[]                  @relation("Approver")
  headedDepartment                  Department?                 @relation("DepartmentHead")
  auditLogs                         AuditLog[]
  goodsReceipts                     GoodsReceiptNote[]
  committeeAssignments              CommitteeAssignment[]
  scoresGiven                       CommitteeScoreSet[]
  financialCommitteesForRequisitions PurchaseRequisition[]       @relation("FinancialCommitteeMembers")
  technicalCommitteesForRequisitions PurchaseRequisition[]       @relation("TechnicalCommitteeMembers")
  approverForRequisitions           PurchaseRequisition[]       @relation("Approver")
  currentApproverForRequisitions    PurchaseRequisition[]       @relation("CurrentApprover")
  recommendations                   CommitteeRecommendation[]
}

model Vendor {
  id              String        @id @default(cuid())
  name            String
  contactPerson   String
  email           String        @unique
  phone           String
  address         String
  kycStatus       KycStatus     @default(Pending)
  rejectionReason String?
  userId          String        @unique
  user            User          @relation(fields: [userId], references: [id])
  quotations      Quotation[]
  contracts       Contract[]
  purchaseOrders  PurchaseOrder[]
  kycDocuments    KYC_Document[]
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  name        String
  url         String
  submittedAt DateTime @default(now())
}

model PurchaseRequisition {
  id                            String                @id @default(cuid())
  transactionId                 String?
  requesterId                   String
  requester                     User                  @relation("Requester", fields: [requesterId], references: [id])
  title                         String
  departmentId                  String?
  department                    Department?           @relation(fields: [departmentId], references: [id])
  totalPrice                    Float
  justification                 String
  status                        RequisitionStatus     @default(Draft)
  urgency                       Urgency               @default(Low)
  createdAt                     DateTime              @default(now())
  updatedAt                     DateTime              @updatedAt
  approverId                    String?
  approver                      User?                 @relation("Approver", fields: [approverId], references: [id])
  currentApproverId             String?
  currentApprover               User?                 @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  purchaseOrderId               String?               @unique
  purchaseOrder                 PurchaseOrder?
  deadline                      DateTime?
  scoringDeadline               DateTime?
  awardResponseDeadline         DateTime?
  awardResponseDurationMinutes  Int?
  cpoAmount                     Float?
  rfqSettings                   Json?
  allowedVendorIds              String[]
  awardedQuoteItemIds           String[]
  items                         RequisitionItem[]
  customQuestions               CustomQuestion[]
  quotations                    Quotation[]
  contracts                     Contract[]
  evaluationCriteria            EvaluationCriteria?
  committeeAssignments          CommitteeAssignment[]
  committeeRecommendations      CommitteeRecommendation[]
  approvals                     Approval[]
  financialCommitteeMembers     User[]                @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers     User[]                @relation("TechnicalCommitteeMembers")
  committeeName                 String?
  committeePurpose              String?
}

model RequisitionItem {
  id              String              @id @default(cuid())
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  name            String
  description     String?
  quantity        Int
  unitPrice       Float?
  quoteItems      QuoteItem[]
}

model EvaluationCriteria {
  id                  String                 @id @default(cuid())
  requisitionId       String                 @unique
  requisition         PurchaseRequisition    @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  financialCriteria   FinancialCriterion[]
  technicalCriteria   TechnicalCriterion[]
  financialWeight     Int
  technicalWeight     Int
}

model FinancialCriterion {
  id                    String             @id @default(cuid())
  evaluationCriteriaId  String
  evaluationCriteria    EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                  String
  weight                Int
}

model TechnicalCriterion {
  id                    String             @id @default(cuid())
  evaluationCriteriaId  String
  evaluationCriteria    EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                  String
  weight                Int
}

model CustomQuestion {
  id              String              @id @default(cuid())
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  questionText    String
  questionType    QuestionType
  isRequired      Boolean             @default(true)
  options         String[]
  answers         QuoteAnswer[]
}

model PurchaseOrder {
  id               String           @id @default(cuid())
  transactionId    String?
  requisitionId    String           @unique
  requisitionTitle String
  vendorId         String
  totalAmount      Float
  status           PurchaseOrderStatus @default(Issued)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor           Vendor           @relation(fields: [vendorId], references: [id])
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id                 String           @id @default(cuid())
  purchaseOrderId    String
  purchaseOrder      PurchaseOrder    @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  requisitionItemId  String
  name               String
  quantity           Int
  unitPrice          Float
  totalPrice         Float
  receivedQuantity   Int
  receiptItems       ReceiptItem[]
}

model GoodsReceiptNote {
  id            String        @id @default(cuid())
  transactionId String?
  purchaseOrderId String
  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedById  String
  receivedBy    User          @relation(fields: [receivedById], references: [id])
  receivedDate  DateTime      @default(now())
  items         ReceiptItem[]
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNoteId String
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  poItemId           String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  quantityReceived   Int
  condition          ReceiptCondition
  notes              String?
}

model Invoice {
  id               String        @id @default(cuid())
  transactionId    String?
  purchaseOrderId  String
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  vendorId         String
  invoiceDate      DateTime
  totalAmount      Float
  status           InvoiceStatus @default(Pending)
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  items            InvoiceItem[]
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model Quotation {
  id                  String              @id @default(cuid())
  transactionId       String?
  requisitionId       String
  requisition         PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  vendorId            String
  vendor              Vendor              @relation(fields: [vendorId], references: [id])
  vendorName          String
  totalPrice          Float
  deliveryDate        DateTime
  status              QuotationStatus     @default(Submitted)
  createdAt           DateTime            @default(now())
  notes               String?
  rank                Int?
  finalAverageScore   Float?
  cpoDocumentUrl      String?
  experienceDocumentUrl String?
  items               QuoteItem[]
  answers             QuoteAnswer[]
  scores              CommitteeScoreSet[]
}

model QuoteItem {
  id                String        @id @default(cuid())
  quotationId       String
  quotation         Quotation     @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  requisitionItemId String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  scores            ItemScore[]
}

model QuoteAnswer {
  id          String        @id @default(cuid())
  quotationId String
  quotation   Quotation     @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  questionId  String
  question    CustomQuestion @relation(fields: [questionId], references: [id])
  answer      String
}

model AuditLog {
  id            String    @id @default(cuid())
  transactionId String?
  timestamp     DateTime  @default(now())
  userId        String?
  user          User?     @relation(fields: [userId], references: [id])
  action        String
  entity        String
  entityId      String
  details       String
}

model CommitteeScoreSet {
  id               String      @id @default(cuid())
  quotationId      String
  quotation        Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  scorerId         String
  scorer           User        @relation(fields: [scorerId], references: [id])
  scorerName       String
  committeeComment String?
  finalScore       Float
  submittedAt      DateTime    @default(now())
  itemScores       ItemScore[]
}

model ItemScore {
  id              String            @id @default(cuid())
  scoreSetId      String
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  quoteItemId     String            @unique
  quoteItem       QuoteItem         @relation(fields: [quoteItemId], references: [id])
  finalScore      Float
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
}

model FinancialScore {
  id          String    @id @default(cuid())
  itemScoreId String
  itemScore   ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  criterionId String
  score       Int
  comment     String?
}

model TechnicalScore {
  id          String    @id @default(cuid())
  itemScoreId String
  itemScore   ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  criterionId String
  score       Int
  comment     String?
}

model Department {
  id          String                @id @default(cuid())
  name        String                @unique
  description String?
  headId      String?               @unique
  head        User?                 @relation("DepartmentHead", fields: [headId], references: [id])
  members     User[]                @relation("DepartmentMembers")
  requisitions PurchaseRequisition[]
}

model Contract {
  id              String              @id @default(cuid())
  contractNumber  String              @unique @default(cuid())
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendorId        String
  vendor          Vendor              @relation(fields: [vendorId], references: [id])
  startDate       DateTime
  endDate         DateTime
  filePath        String?
  status          ContractStatus      @default(Draft)
  createdAt       DateTime            @default(now())
}

model CommitteeAssignment {
  userId        String
  requisitionId String
  user          User                @relation(fields: [userId], references: [id])
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  scoresSubmitted Boolean           @default(false)

  @@id([userId, requisitionId])
}

model CommitteeRecommendation {
  id              String              @id @default(cuid())
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  userId          String
  user            User                @relation(fields: [userId], references: [id])
  committeeRole   String
  recommendation  String // "Recommend for Approval" or "Request Changes"
  comment         String?
  createdAt       DateTime            @default(now())
}

model Approval {
  id            String              @id @default(cuid())
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  approverId    String
  approver      User                @relation("Approver", fields: [approverId], references: [id])
  status        String // e.g., 'Approved', 'Rejected'
  comment       String?
  createdAt     DateTime            @default(now())
}

model Role {
  name        String @id
  description String?
  users       User[]
}

enum KycStatus {
  Pending
  Verified
  Rejected
}

enum RequisitionStatus {
  Draft
  Pending_Approval
  Pending_Managerial_Approval
  Approved
  Rejected
  RFQ_In_Progress
  Pending_Committee_A_Review
  Pending_Committee_B_Review
  Pending_Final_Approval
  Approved_Awaiting_Notification
  PO_Created
  Fulfilled
  Closed
}

enum Urgency {
  Low
  Medium
  High
  Critical
}

enum PurchaseOrderStatus {
  Issued
  Acknowledged
  Shipped
  Partially_Delivered
  Delivered
  Cancelled
  Matched
  Mismatched
  On_Hold
}

enum ReceiptCondition {
  Good
  Damaged
  Incorrect
}

enum InvoiceStatus {
  Pending
  Approved_for_Payment
  Paid
  Disputed
}

enum QuestionType {
  text
  boolean
  multiple_choice
  file
}

enum ContractStatus {
  Draft
  Active
  Expired
}

enum QuotationStatus {
  Submitted
  Awarded
  Partially_Awarded
  Rejected
  Standby
  Invoice_Submitted
  Failed
  Accepted
  Declined
}
