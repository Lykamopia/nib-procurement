// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String        @id @default(cuid())
  name                  String
  email                 String        @unique
  password              String
  role                  String
  departmentId          String?
  vendorId              String?       @unique
  approvalLimit         Float?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  department            Department?   @relation("DepartmentUsers", fields: [departmentId], references: [id])
  managedDepartment     Department?   @relation("DepartmentHead")

  sentContracts         Contract[]    @relation("SentBy")
  auditLogs             AuditLog[]
  createdRequisitions   PurchaseRequisition[] @relation("CreatedBy")
  approvedRequisitions  PurchaseRequisition[] @relation("ApprovedBy")
  currentApprovals      PurchaseRequisition[] @relation("CurrentlyApproving")

  financialCommittees   PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommittees   PurchaseRequisition[] @relation("TechnicalCommitteeMembers")

  committeeAssignments  CommitteeAssignment[]
  
  scores                CommitteeScoreSet[]
  reviews               Review[]
  receipts              GoodsReceiptNote[]

  vendor                Vendor?
  
  // Self-referencing relationship for manager/subordinates
  managerId    String?
  manager      User?     @relation("ManagerSubordinates", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates User[]    @relation("ManagerSubordinates")
}

model Department {
  id           String   @id @default(cuid())
  name         String   @unique
  description  String?
  headId       String?  @unique
  
  head         User?    @relation("DepartmentHead", fields: [headId], references: [id])
  users        User[]   @relation("DepartmentUsers")
  requisitions PurchaseRequisition[]
}

model Role {
    id          String @id @default(cuid())
    name        String @unique
    description String?
}

model Vendor {
  id              String   @id @default(cuid())
  name            String
  contactPerson   String
  email           String   @unique
  phone           String
  address         String
  kycStatus       String   @default("Pending") // Pending, Verified, Rejected
  rejectionReason String?
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  
  kycDocuments    KYC_Document[]
  quotations      Quotation[]
  contracts       Contract[]
  purchaseOrders  PurchaseOrder[]
}

model KYC_Document {
    id          String @id @default(cuid())
    vendorId    String
    vendor      Vendor @relation(fields: [vendorId], references: [id])
    name        String // e.g., 'Business License', 'Tax ID'
    url         String
    submittedAt DateTime
}

model PurchaseRequisition {
  id                String   @id @default(cuid())
  transactionId     String?  @unique
  title             String
  justification     String
  status            String
  totalPrice        Float
  urgency           String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  requesterId       String
  requester         User     @relation("CreatedBy", fields: [requesterId], references: [id])
  
  departmentId      String?
  department        Department? @relation(fields: [departmentId], references: [id])

  approverId        String?
  approver          User?    @relation("ApprovedBy", fields: [approverId], references: [id])
  approverComment   String?

  currentApproverId String?
  currentApprover   User?    @relation("CurrentlyApproving", fields: [currentApproverId], references: [id])
  
  deadline          DateTime? // RFQ submission deadline
  scoringDeadline   DateTime? // Committee scoring deadline
  awardResponseDeadline DateTime? // Vendor award acceptance deadline
  awardResponseDurationMinutes Int?

  committeeName     String?
  committeePurpose  String?
  
  cpoAmount         Float?
  
  // JSON field for flexible RFQ settings
  rfqSettings       Json?

  // Many-to-many for committees
  financialCommitteeMembers    User[] @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers    User[] @relation("TechnicalCommitteeMembers")

  items             RequisitionItem[]
  customQuestions   CustomQuestion[]
  evaluationCriteria EvaluationCriteria?
  quotations        Quotation[]
  contracts         Contract[]
  reviews           Review[]

  purchaseOrderId   String?
  purchaseOrder     PurchaseOrder?

  // For partial awards
  awardedQuoteItemIds String[]
}

model CommitteeAssignment {
    userId         String
    requisitionId  String
    scoresSubmitted Boolean @default(false)
    
    user           User    @relation(fields: [userId], references: [id])
    requisition    PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    
    @@id([userId, requisitionId])
}

model RequisitionItem {
  id              String   @id @default(cuid())
  name            String
  description     String?
  quantity        Int
  unitPrice       Float
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  
  quoteItems      QuoteItem[]
  poItems         POItem[]
}

model CustomQuestion {
    id              String    @id @default(cuid())
    questionText    String
    questionType    String    // text, boolean, multiple_choice, file
    isRequired      Boolean
    options         String[]
    
    requisitionId   String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    
    answers         QuoteAnswer[]
}

model EvaluationCriteria {
    id                String    @id @default(cuid())
    requisitionId     String    @unique
    requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    
    financialWeight   Int
    technicalWeight   Int
    
    financialCriteria FinancialCriterion[]
    technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
    id                   String   @id @default(cuid())
    name                 String
    weight               Int
    evaluationCriteriaId String
    evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
}

model TechnicalCriterion {
    id                   String   @id @default(cuid())
    name                 String
    weight               Int
    evaluationCriteriaId String
    evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
}


model Quotation {
  id                String   @id @default(cuid())
  transactionId     String?
  vendorId          String
  vendorName        String
  requisitionId     String
  totalPrice        Float
  deliveryDate      DateTime
  status            String
  notes             String?
  cpoDocumentUrl    String?
  experienceDocumentUrl String?
  rank              Int?     // 1 for winner, 2 for 1st standby, 3 for 2nd
  finalAverageScore Float?
  createdAt         DateTime @default(now())

  vendor            Vendor   @relation(fields: [vendorId], references: [id])
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  
  items             QuoteItem[]
  answers           QuoteAnswer[]
  scores            CommitteeScoreSet[]
}

model QuoteAnswer {
  id          String         @id @default(cuid())
  quotation   Quotation      @relation(fields: [quotationId], references: [id])
  quotationId String
  question    CustomQuestion @relation(fields: [questionId], references: [id])
  questionId  String
  answer      String
}

model QuoteItem {
  id                String   @id @default(cuid())
  quotationId       String
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?

  quotation         Quotation       @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id], onDelete: Cascade)
  scores            ItemScore[]
}

model CommitteeScoreSet {
    id               String @id @default(cuid())
    quotationId      String
    scorerId         String
    committeeComment String?
    finalScore       Float
    submittedAt      DateTime @default(now())
    
    quotation        Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
    scorer           User      @relation(fields: [scorerId], references: [id])
    
    itemScores       ItemScore[]
    
    @@unique([quotationId, scorerId])
}

model ItemScore {
    id          String @id @default(cuid())
    scoreSetId  String
    quoteItemId String
    finalScore  Float
    
    scoreSet    CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
    quoteItem   QuoteItem         @relation(fields: [quoteItemId], references: [id], onDelete: Cascade)
    
    scores      Score[]
}

model Score {
    id          String    @id @default(cuid())
    itemScoreId String
    criterionId String    // ID of either a FinancialCriterion or TechnicalCriterion
    type        String    // 'FINANCIAL' or 'TECHNICAL'
    score       Float
    comment     String?
    
    itemScore   ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
}

model Contract {
    id              String      @id @default(cuid())
    contractNumber  String      @unique @default(cuid())
    requisitionId   String
    vendorId        String
    senderId        String
    startDate       DateTime
    endDate         DateTime
    filePath        String?
    status          String // Draft, Active, Expired
    createdAt       DateTime    @default(now())

    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    vendor          Vendor              @relation(fields: [vendorId], references: [id])
    sender          User                @relation("SentBy", fields: [senderId], references: [id])
}

model PurchaseOrder {
  id              String   @id @default(cuid())
  transactionId   String?
  requisitionId   String   @unique
  requisitionTitle String
  vendorId        String
  totalAmount     Float
  status          String
  createdAt       DateTime @default(now())
  
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendor          Vendor              @relation(fields: [vendorId], references: [id])
  
  items           POItem[]
  receipts        GoodsReceiptNote[]
  invoices        Invoice[]
}

model POItem {
  id                 String   @id @default(cuid())
  purchaseOrderId    String
  requisitionItemId  String
  name               String
  quantity           Int
  unitPrice          Float
  totalPrice         Float
  receivedQuantity   Int      @default(0)
  
  purchaseOrder      PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  requisitionItem    RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  receiptItems       ReceiptItem[]
}


model GoodsReceiptNote {
  id              String   @id @default(cuid())
  transactionId   String?
  purchaseOrderId String
  receivedById    String
  receivedDate    DateTime @default(now())

  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedBy      User          @relation(fields: [receivedById], references: [id])

  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String   @id @default(cuid())
  goodsReceiptNoteId String
  poItemId           String
  quantityReceived   Int
  condition          String // Good, Damaged, Incorrect
  notes              String?
  
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  poItem             POItem           @relation(fields: [poItemId], references: [id])
}


model Invoice {
  id               String    @id @default(cuid())
  transactionId    String?
  purchaseOrderId  String
  vendorId         String
  invoiceDate      DateTime
  totalAmount      Float
  status           String
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?

  po               PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  
  items            InvoiceItem[]
}

model InvoiceItem {
  id         String   @id @default(cuid())
  invoiceId  String
  name       String
  quantity   Int
  unitPrice  Float
  totalPrice Float
  
  invoice    Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id            String   @id @default(cuid())
  transactionId String?
  timestamp     DateTime @default(now())
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
  action        String
  entity        String
  entityId      String
  details       String
}

model Review {
    id              String @id @default(cuid())
    requisitionId   String
    reviewerId      String
    decision        String // Approved, Rejected
    comment         String?
    createdAt       DateTime @default(now())
    
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    reviewer        User                @relation(fields: [reviewerId], references: [id])
    
    @@unique([requisitionId, reviewerId])
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique // e.g., "approvalThresholds", "rfqSenderSetting"
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
