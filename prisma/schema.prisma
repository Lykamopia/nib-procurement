
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   String                 @id @default(cuid())
  name                 String
  email                String                 @unique
  password             String
  role                 String                 @default("Requester")
  approvalLimit        Float?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt

  departmentId         String?
  department           Department?            @relation("DepartmentMembers", fields: [departmentId], references: [id])
  
  headedDepartment     Department?            @relation("DepartmentHead")

  managerId            String?
  manager              User?                  @relation("ManagerSubordinates", fields: [managerId], references: [id])
  subordinates         User[]                 @relation("ManagerSubordinates")

  vendorId             String?                @unique
  vendor               Vendor?

  createdRequisitions  PurchaseRequisition[]  @relation("Requester")
  approvedRequisitions PurchaseRequisition[]  @relation("Approver")
  currentApprovals     PurchaseRequisition[]  @relation("CurrentApprover")
  
  sentContracts        Contract[]             @relation("Sender")
  
  financialCommitteeOn PurchaseRequisition[]  @relation("FinancialCommittee")
  technicalCommitteeOn PurchaseRequisition[]  @relation("TechnicalCommittee")
  
  committeeAssignments CommitteeAssignment[]
  
  scores               CommitteeScoreSet[]
  reviews              Review[]
  
  goodsReceipts        GoodsReceiptNote[]
  auditLogs            AuditLog[]
}

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  
  headId      String?                @unique
  head        User?                  @relation("DepartmentHead", fields: [headId], references: [id])
  
  users       User[]                 @relation("DepartmentMembers")

  requisitions PurchaseRequisition[]
}

model Role {
    id          String @id @default(cuid())
    name        String @unique
    description String?
}

model PurchaseRequisition {
  id                   String       @id @default(cuid())
  transactionId        String?      @unique
  requesterId          String
  requester            User         @relation("Requester", fields: [requesterId], references: [id])
  
  departmentId         String
  department           Department   @relation(fields: [departmentId], references: [id])

  title                String
  justification        String
  urgency              String
  status               String
  totalPrice           Float
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  approverId           String?
  approver             User?        @relation("Approver", fields: [approverId], references: [id])
  currentApproverId    String?
  currentApprover      User?        @relation("CurrentApprover", fields: [currentApproverId], references: [id])

  approverComment      String?
  
  purchaseOrderId      String?      @unique
  purchaseOrders       PurchaseOrder[]
  
  // RFQ fields
  allowedVendorIds     String[]
  awardedQuoteItemIds  String[]
  deadline             DateTime?
  scoringDeadline      DateTime?
  awardResponseDeadline DateTime?
  awardResponseDurationMinutes Int?
  
  committeeName        String?
  committeePurpose     String?
  cpoAmount            Float?
  
  rfqSettings          Json?

  items                RequisitionItem[]
  customQuestions      CustomQuestion[]
  evaluationCriteria   EvaluationCriteria?
  quotations           Quotation[]
  contracts            Contract[]
  reviews              Review[]
  
  financialCommitteeMembers User[] @relation("FinancialCommittee")
  technicalCommitteeMembers User[] @relation("TechnicalCommittee")

  committeeAssignments CommitteeAssignment[]
}

model RequisitionItem {
  id                   String             @id @default(cuid())
  name                 String
  description          String?
  quantity             Int
  unitPrice            Float

  requisitionId        String
  requisition          PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  
  quoteItems           QuoteItem[]
  poItems              POItem[]
}

model CustomQuestion {
    id              String      @id @default(cuid())
    requisitionId   String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    
    questionText    String
    questionType    String      // text, boolean, multiple_choice, file
    isRequired      Boolean
    options         String[]
    
    answers         QuoteAnswer[]
}

model EvaluationCriteria {
    id                  String      @id @default(cuid())
    requisitionId       String      @unique
    requisition         PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    
    financialWeight     Float
    technicalWeight     Float
    
    financialCriteria   FinancialCriterion[]
    technicalCriteria   TechnicalCriterion[]
}

model FinancialCriterion {
    id                      String      @id @default(cuid())
    evaluationCriteriaId    String
    evaluationCriteria      EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
    name                    String
    weight                  Float
}

model TechnicalCriterion {
    id                      String      @id @default(cuid())
    evaluationCriteriaId    String
    evaluationCriteria      EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
    name                    String
    weight                  Float
}

model Vendor {
  id                   String       @id @default(cuid())
  userId               String       @unique
  user                 User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  name                 String
  contactPerson        String
  email                String       @unique
  phone                String
  address              String
  kycStatus            String       // Pending, Verified, Rejected
  rejectionReason      String?

  kycDocuments         KYC_Document[]
  quotations           Quotation[]
  contracts            Contract[]
  purchaseOrders       PurchaseOrder[]
}

model KYC_Document {
    id          String @id @default(cuid())
    vendorId    String
    vendor      Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
    name        String
    url         String
    submittedAt DateTime
}

model Quotation {
    id              String      @id @default(cuid())
    transactionId   String?
    requisitionId   String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)

    vendorId        String
    vendor          Vendor      @relation(fields: [vendorId], references: [id], onDelete: Cascade)
    vendorName      String
    
    items           QuoteItem[]
    answers         QuoteAnswer[]

    totalPrice      Float
    deliveryDate    DateTime
    notes           String?
    status          String      // Submitted, Awarded, Rejected, Standby, etc.
    rank            Int?        // 1, 2, 3 for winner and standbys

    cpoDocumentUrl  String?
    experienceDocumentUrl String?
    
    scores          CommitteeScoreSet[]
    finalAverageScore Float?

    createdAt       DateTime    @default(now())
}

model QuoteItem {
    id                      String      @id @default(cuid())
    quotationId             String
    quotation               Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
    
    requisitionItemId       String
    requisitionItem         RequisitionItem @relation(fields: [requisitionItemId], references: [id])
    
    name                    String
    quantity                Int
    unitPrice               Float
    leadTimeDays            Int
    brandDetails            String?
    
    itemScores              ItemScore[]
}

model QuoteAnswer {
    id              String      @id @default(cuid())
    quotationId     String
    quotation       Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
    
    questionId      String
    question        CustomQuestion @relation(fields: [questionId], references: [id])
    
    answer          String
}

model CommitteeAssignment {
    userId          String
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    requisitionId   String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
    
    scoresSubmitted Boolean     @default(false)
    
    @@id([userId, requisitionId])
}


model CommitteeScoreSet {
    id                  String      @id @default(cuid())
    quotationId         String
    quotation           Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
    
    scorerId            String
    scorer              User        @relation(fields: [scorerId], references: [id])
    
    itemScores          ItemScore[]
    committeeComment    String?
    finalScore          Float
    
    submittedAt         DateTime    @default(now())
    
    @@unique([quotationId, scorerId])
}

model ItemScore {
    id              String      @id @default(cuid())
    scoreSetId      String
    scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
    
    quoteItemId     String
    quoteItem       QuoteItem   @relation(fields: [quoteItemId], references: [id])
    
    scores          Score[]
    finalScore      Float
    
    @@unique([scoreSetId, quoteItemId])
}

model Score {
    id              String      @id @default(cuid())
    itemScoreId     String
    itemScore       ItemScore   @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
    
    criterionId     String
    score           Float
    comment         String?
    type            String      // FINANCIAL or TECHNICAL
}


model Contract {
    id              String   @id @default(cuid())
    contractNumber  String   @unique @default(cuid())
    requisitionId   String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    
    vendorId        String
    vendor          Vendor   @relation(fields: [vendorId], references: [id])
    
    senderId        String
    sender          User     @relation("Sender", fields: [senderId], references: [id])
    
    startDate       DateTime
    endDate         DateTime
    filePath        String?
    
    status          String   // Draft, Active, Expired
    createdAt       DateTime @default(now())
}


model PurchaseOrder {
  id              String      @id @default(cuid())
  transactionId   String?
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionTitle String

  vendorId        String
  vendor          Vendor      @relation(fields: [vendorId], references: [id])

  items           POItem[]
  totalAmount     Float
  status          String      // Issued, Acknowledged, Shipped, Partially Delivered, Delivered, Cancelled
  createdAt       DateTime    @default(now())

  receipts        GoodsReceiptNote[]
  invoices        Invoice[]
}

model POItem {
    id                  String      @id @default(cuid())
    poId                String
    po                  PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)
    
    requisitionItemId   String
    requisitionItem     RequisitionItem @relation(fields: [requisitionItemId], references: [id])

    name                String
    quantity            Int
    unitPrice           Float
    totalPrice          Float
    
    receivedQuantity    Int
    
    receiptItems        ReceiptItem[]
}


model GoodsReceiptNote {
    id              String      @id @default(cuid())
    transactionId   String?
    purchaseOrderId String
    purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
    
    receivedById    String
    receivedBy      User        @relation(fields: [receivedById], references: [id])
    receivedDate    DateTime    @default(now())
    
    items           ReceiptItem[]
}

model ReceiptItem {
    id                  String      @id @default(cuid())
    goodsReceiptNoteId  String
    goodsReceiptNote    GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
    
    poItemId            String
    poItem              POItem      @relation(fields: [poItemId], references: [id])
    
    quantityReceived    Int
    condition           String      // Good, Damaged, Incorrect
    notes               String?
}


model Invoice {
  id                String      @id @default(cuid())
  transactionId     String?
  purchaseOrderId   String
  po                PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  
  vendorId          String
  invoiceDate       DateTime
  
  items             InvoiceItem[]
  totalAmount       Float
  status            String      // Pending, Approved_for_Payment, Paid, Disputed
  
  documentUrl       String?
  paymentDate       DateTime?
  paymentReference  String?
}

model InvoiceItem {
    id              String      @id @default(cuid())
    invoiceId       String
    invoice         Invoice     @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    
    name            String
    quantity        Int
    unitPrice       Float
    totalPrice      Float
}

model ApprovalThreshold {
  id    String         @id @default(cuid())
  name  String
  min   Float
  max   Float?
  steps ApprovalStep[]
}

model ApprovalStep {
  id          String            @id @default(cuid())
  thresholdId String
  threshold   ApprovalThreshold @relation(fields: [thresholdId], references: [id], onDelete: Cascade)
  role        String
  order       Int
}

model Review {
    id            String      @id @default(cuid())
    requisitionId String
    requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    
    reviewerId    String
    reviewer      User        @relation(fields: [reviewerId], references: [id])
    
    committeeType String      // 'A' or 'B'
    decision      String      // 'Approved', 'Rejected'
    comments      String?
    
    createdAt     DateTime    @default(now())
}

model AuditLog {
    id              String      @id @default(cuid())
    transactionId   String?
    timestamp       DateTime    @default(now())
    userId          String?
    user            User?       @relation(fields: [userId], references: [id])
    action          String
    entity          String
    entityId        String
    details         String
}

model Setting {
    id      String @id @default(cuid())
    key     String @unique
    value   Json
}
