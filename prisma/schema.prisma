
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(cuid())
  name            String
  email           String       @unique
  password        String
  role            String
  approvalLimit   Float?
  managerId       String?
  manager         User?        @relation("ManagerSubordinates", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates    User[]       @relation("ManagerSubordinates")
  vendorId        String?      @unique
  vendor          Vendor?      @relation(fields: [vendorId], references: [id])
  departmentId    String?
  department      Department?  @relation(fields: [departmentId], references: [id])
  createdRequisitions PurchaseRequisition[] @relation("Requester")
  approvedRequisitions PurchaseRequisition[] @relation("Approver")
  currentApproverOn   PurchaseRequisition[] @relation("CurrentApprover")
  auditLogs       AuditLog[]
  receipts        GoodsReceiptNote[]
  financialCommittees PurchaseRequisition[] @relation("FinancialCommitteeMembers")
  technicalCommittees PurchaseRequisition[] @relation("TechnicalCommitteeMembers")
  committeeAssignments CommitteeAssignment[]
  scores          CommitteeScoreSet[]

  @@map("users")
}

model Department {
  id          String                @id @default(cuid())
  name        String                @unique
  description String?
  headId      String?      
  head        User?                 @relation(fields: [headId], references: [id])
  users       User[]
  requisitions PurchaseRequisition[]

  @@map("departments")
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String?
}

model PurchaseRequisition {
  id              String        @id @default(cuid())
  transactionId   String?
  requesterId     String
  requester       User          @relation("Requester", fields: [requesterId], references: [id])
  requesterName   String
  title           String
  departmentId    String?
  department      Department?    @relation(fields: [departmentId], references: [id])
  items           RequisitionItem[]
  totalPrice      Float
  justification   String
  status          String
  urgency         String        @default("Low")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  approverId      String?
  approver        User?         @relation("Approver", fields: [approverId], references: [id])
  approverComment String?
  currentApproverId String?
  currentApprover   User?         @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  purchaseOrderId String?       @unique
  purchaseOrder   PurchaseOrder?
  allowedVendorIds String[]
  awardedQuoteItemIds String[]
  deadline        DateTime?
  scoringDeadline DateTime?
  awardResponseDeadline DateTime?
  awardResponseDurationMinutes Int?
  committeeName   String?
  committeePurpose String?
  cpoAmount       Float?
  rfqSettings     Json?
  quotations      Quotation[]
  contract        Contract?
  customQuestions CustomQuestion[]
  evaluationCriteria EvaluationCriteria?
  financialCommitteeMembers User[] @relation("FinancialCommitteeMembers")
  technicalCommitteeMembers User[] @relation("TechnicalCommitteeMembers")
  committeeAssignments CommitteeAssignment[]

  @@map("purchase_requisitions")
}

model RequisitionItem {
  id            String          @id @default(cuid())
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  name          String
  quantity      Int
  unitPrice     Float
  description   String?
  quotedItems   QuoteItem[]
  poItems       POItem[]
}

model CustomQuestion {
  id              String            @id @default(cuid())
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  questionText    String
  questionType    String // 'text', 'boolean', 'multiple-choice', 'file'
  isRequired      Boolean           @default(false)
  options         String[]
  requisitionItemId String? // Optional: link question to a specific item
  answers         QuoteAnswer[]
}

model EvaluationCriteria {
  id                String                 @id @default(cuid())
  requisitionId     String                 @unique
  requisition       PurchaseRequisition    @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  financialWeight   Int
  technicalWeight   Int
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                 String
  weight               Int
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  name                 String
  weight               Int
  scores               TechnicalScore[]
}

model Quotation {
  id                String              @id @default(cuid())
  transactionId     String?
  requisitionId     String
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  vendorId          String
  vendor            Vendor              @relation(fields: [vendorId], references: [id])
  vendorName        String
  items             QuoteItem[]
  totalPrice        Float
  deliveryDate      DateTime
  createdAt         DateTime            @default(now())
  status            String
  notes             String?
  rank              Int? // 1, 2, 3 for awarded/standby
  answers           QuoteAnswer[]
  scores            CommitteeScoreSet[]
  finalAverageScore Float?
  cpoDocumentUrl    String?
  experienceDocumentUrl String?

  @@unique([requisitionId, vendorId])
  @@map("quotations")
}

model QuoteItem {
  id                String          @id @default(cuid())
  quotationId       String
  quotation         Quotation       @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  requisitionItemId String
  requisitionItem   RequisitionItem @relation(fields: [requisitionItemId], references: [id], onDelete: Cascade)
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  itemScores        ItemScore[]
}

model QuoteAnswer {
  id          String    @id @default(cuid())
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  questionId  String
  question    CustomQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer      String
}

model CommitteeAssignment {
  userId          String
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  scoresSubmitted Boolean @default(false)

  @@id([userId, requisitionId])
}

model CommitteeScoreSet {
  id                String       @id @default(cuid())
  quotationId       String
  quotation         Quotation    @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  scorerId          String
  scorer            User         @relation(fields: [scorerId], references: [id], onDelete: Cascade)
  scorerName        String
  itemScores        ItemScore[]
  finalScore        Float
  committeeComment  String?
  submittedAt       DateTime     @default(now())
}

model ItemScore {
  id              String            @id @default(cuid())
  scoreSetId      String
  quoteItemId     String
  finalScore      Float
  financialScores FinancialScore[]
  technicalScores TechnicalScore[]
  scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
  quoteItem       QuoteItem         @relation(fields: [quoteItemId], references: [id], onDelete: Cascade)
  @@unique([scoreSetId, quoteItemId])
}

model FinancialScore {
  id          String   @id @default(cuid())
  itemScoreId String
  itemScore   ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  criterionId String
  criterion   FinancialCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  score       Int
  comment     String?
}

model TechnicalScore {
  id          String   @id @default(cuid())
  itemScoreId String
  itemScore   ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
  criterionId String
  criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id], onDelete: Cascade)
  score       Int
  comment     String?
}

model PurchaseOrder {
  id              String        @id @default(cuid())
  transactionId   String?
  requisitionId   String        @unique
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionTitle String
  vendorId        String
  vendor          Vendor        @relation(fields: [vendorId], references: [id])
  items           POItem[]
  totalAmount     Float
  status          String
  createdAt       DateTime      @default(now())
  receipts        GoodsReceiptNote[]
  invoices        Invoice[]

  @@map("purchase_orders")
}

model POItem {
  id              String      @id @default(cuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  requisitionItemId String
  requisitionItem RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  name            String
  quantity        Int
  unitPrice       Float
  totalPrice      Float
  receivedQuantity Int
  receiptItems    ReceiptItem[]
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  transactionId   String?
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedById    String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNoteId String
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  poItemId           String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  quantityReceived   Int
  condition          String
  notes              String?
}

model Invoice {
  id               String        @id @default(cuid())
  transactionId    String?
  purchaseOrderId  String
  po               PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  vendorId         String
  vendor           Vendor        @relation(fields: [vendorId], references: [id])
  items            InvoiceItem[]
  invoiceDate      DateTime
  totalAmount      Float
  status           String
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
}

model InvoiceItem {
  id         String  @id @default(cuid())
  invoiceId  String
  invoice    Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  name       String
  quantity   Int
  unitPrice  Float
  totalPrice Float
}

model Vendor {
  id            String        @id @default(cuid())
  name          String
  contactPerson String
  email         String        @unique
  phone         String
  address       String
  kycStatus     String // Pending, Verified, Rejected
  rejectionReason String?
  kycDocuments  KYC_Document[]
  user          User?
  quotations    Quotation[]
  purchaseOrders PurchaseOrder[]
  contracts     Contract[]
  invoices      Invoice[]
  
  @@map("vendors")
}

model KYC_Document {
    id          String @id @default(cuid())
    vendorId    String
    vendor      Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
    name        String
    url         String
    submittedAt DateTime @default(now())
}

model Contract {
    id              String @id @default(cuid())
    contractNumber  String @unique @default(cuid())
    requisitionId   String @unique
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    vendorId        String
    vendor          Vendor @relation(fields: [vendorId], references: [id])
    startDate       DateTime
    endDate         DateTime
    filePath        String?
    status          String // Draft, Active, Expired
    createdAt       DateTime @default(now())
}


model AuditLog {
  id          String   @id @default(cuid())
  transactionId String?
  timestamp   DateTime @default(now())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: SetNull)
  action      String
  entity      String
  entityId    String
  details     String
}
