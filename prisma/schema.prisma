// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id @default(uuid())
  name                    String
  email                   String                  @unique
  password                String
  role                    UserRole
  departmentId            String?
  department              Department?             @relation(fields: [departmentId], references: [id])
  vendorId                String?                 @unique
  vendor                  Vendor?
  createdRequisitions     PurchaseRequisition[]   @relation("RequesterOnRequisition")
  approvedRequisitions    PurchaseRequisition[]   @relation("ApproverOnRequisition")
  goodsReceipts           GoodsReceiptNote[]
  scores                  CommitteeScoreSet[]
  auditLogs               AuditLog[]
  financialCommitteeOn    PurchaseRequisition[]   @relation("FinancialCommittee")
  technicalCommitteeOn    PurchaseRequisition[]   @relation("TechnicalCommittee")
  committeeAssignments    CommitteeAssignment[]
}

model Department {
  id           String                @id @default(uuid())
  name         String                @unique
  users        User[]
  requisitions PurchaseRequisition[]
}

model Vendor {
  id             String          @id @default(uuid())
  name           String
  contactPerson  String
  email          String          @unique
  phone          String
  address        String
  kycStatus      KycStatus
  rejectionReason String?
  kycDocuments   KYC_Document[]
  userId         String          @unique
  user           User            @relation(fields: [userId], references: [id])
  quotations     Quotation[]
  purchaseOrders PurchaseOrder[]
}

model KYC_Document {
  id          String   @id @default(uuid())
  name        String
  url         String
  submittedAt DateTime
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
}

model PurchaseRequisition {
  id                             String                 @id @default(uuid())
  title                          String
  departmentId                   String?
  department                     Department?            @relation(fields: [departmentId], references: [id])
  justification                  String
  status                         RequisitionStatus
  createdAt                      DateTime
  updatedAt                      DateTime
  approverComment                String?
  contract                       Json?
  negotiationNotes               String?
  allowedVendorIds               String[]
  deadline                       DateTime?
  scoringDeadline                DateTime?
  awardResponseDeadline          DateTime?
  awardResponseDurationMinutes   Int?
  committeeName                  String?
  committeePurpose               String?
  cpoAmount                      Float?
  requesterId                    String
  requester                      User                   @relation("RequesterOnRequisition", fields: [requesterId], references: [id])
  approverId                     String?
  approver                       User?                  @relation("ApproverOnRequisition", fields: [approverId], references: [id])
  purchaseOrderId                String?                @unique
  purchaseOrder                  PurchaseOrder?
  items                          RequisitionItem[]
  customQuestions                CustomQuestion[]
  evaluationCriteria             EvaluationCriteria?
  quotations                     Quotation[]
  financialCommitteeMemberIds    String[]
  financialCommitteeMembers      User[]                 @relation("FinancialCommittee")
  technicalCommitteeMemberIds    String[]
  technicalCommitteeMembers      User[]                 @relation("TechnicalCommittee")
  committeeAssignments           CommitteeAssignment[]
}

model RequisitionItem {
  id            String              @id @default(uuid())
  name          String
  description   String
  quantity      Int
  unitPrice     Float
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
}

model CustomQuestion {
  id            String              @id @default(uuid())
  questionText  String
  questionType  QuestionType
  options       String[]
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
}

model EvaluationCriteria {
  id                 String               @id @default(uuid())
  financialWeight    Int
  technicalWeight    Int
  requisitionId      String               @unique
  requisition        PurchaseRequisition  @relation(fields: [requisitionId], references: [id])
  financialCriteria  FinancialCriterion[]
  technicalCriteria  TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String        @id @default(uuid())
  name                 String
  weight               Int
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String        @id @default(uuid())
  name                 String
  weight               Int
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  scores               TechnicalScore[]
}

model Quotation {
  id                String              @id @default(uuid())
  totalPrice        Float
  deliveryDate      DateTime
  createdAt         DateTime
  status            QuotationStatus
  notes             String?
  rank              Int?
  finalAverageScore Float?
  cpoDocumentUrl    String?
  requisitionId     String
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendorId          String
  vendor            Vendor              @relation(fields: [vendorId], references: [id])
  items             QuoteItem[]
  answers           QuoteAnswer[]
  scores            CommitteeScoreSet[]
}

model QuoteItem {
  id                String    @id @default(uuid())
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?
  quotationId       String
  quotation         Quotation @relation(fields: [quotationId], references: [id])
}

model QuoteAnswer {
  id          String    @id @default(uuid())
  questionId  String
  answer      String
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id])
}

model PurchaseOrder {
  id               String             @id @default(uuid())
  requisitionId    String             @unique
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionTitle String
  totalAmount      Float
  status           PurchaseOrderStatus
  createdAt        DateTime
  contract         Json?
  notes            String?
  vendorId         String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  items            POItem[]
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]
}

model POItem {
  id                String    @id @default(uuid())
  name              String
  quantity          Int
  unitPrice         Float
  totalPrice        Float
  receivedQuantity  Int
  purchaseOrderId   String
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receiptItems      ReceiptItem[]
}

model GoodsReceiptNote {
  id              String        @id @default(uuid())
  receivedDate    DateTime
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedById    String
  receivedBy      User          @relation(fields: [receivedById], references: [id])
  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String           @id @default(uuid())
  quantityReceived   Int
  condition          ReceiptItemCondition
  notes              String?
  goodsReceiptNoteId String
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id])
  poItemId           String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
}

model Invoice {
  id                String        @id @default(uuid())
  invoiceDate       DateTime
  totalAmount       Float
  status            InvoiceStatus
  documentUrl       String?
  paymentDate       DateTime?
  paymentReference  String?
  purchaseOrderId   String
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  items             InvoiceItem[]
}

model InvoiceItem {
  id         String  @id @default(uuid())
  name       String
  quantity   Int
  unitPrice  Float
  totalPrice Float
  invoiceId  String
  invoice    Invoice @relation(fields: [invoiceId], references: [id])
}

model AuditLog {
  id        String   @id @default(uuid())
  timestamp DateTime
  user      String
  role      UserRole
  action    String
  entity    String
  entityId  String
  details   String
  userId    String?
  dbUser    User?    @relation(fields: [userId], references: [id])
}

model CommitteeScoreSet {
  id               String           @id @default(uuid())
  finalScore       Float
  committeeComment String?
  submittedAt      DateTime
  quotationId      String
  quotation        Quotation        @relation(fields: [quotationId], references: [id])
  scorerId         String
  scorer           User             @relation(fields: [scorerId], references: [id])
  financialScores  FinancialScore[]
  technicalScores  TechnicalScore[]
}

model FinancialScore {
  id                  String            @id @default(uuid())
  score               Int
  comment             String?
  criterionId         String
  criterion           FinancialCriterion @relation(fields: [criterionId], references: [id])
  committeeScoreSetId String
  committeeScoreSet   CommitteeScoreSet @relation(fields: [committeeScoreSetId], references: [id])
}

model TechnicalScore {
  id                  String            @id @default(uuid())
  score               Int
  comment             String?
  criterionId         String
  criterion           TechnicalCriterion @relation(fields: [criterionId], references: [id])
  committeeScoreSetId String
  committeeScoreSet   CommitteeScoreSet @relation(fields: [committeeScoreSetId], references: [id])
}

model CommitteeAssignment {
  id              String              @id @default(uuid())
  scoresSubmitted Boolean
  userId          String
  user            User                @relation(fields: [userId], references: [id])
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
}

enum RequisitionStatus {
  Draft
  Pending_Approval @map("Pending Approval")
  Approved
  Rejected
  RFQ_In_Progress @map("RFQ In Progress")
  PO_Created @map("PO Created")
  Fulfilled
  Closed
}

enum PurchaseOrderStatus {
  Issued
  Acknowledged
  Shipped
  Partially_Delivered @map("Partially Delivered")
  Delivered
  Cancelled
  Matched
  Mismatched
  On_Hold @map("On Hold")
}

enum ReceiptItemCondition {
  Good
  Damaged
  Incorrect
}

enum InvoiceStatus {
  Pending
  Approved_for_Payment @map("Approved for Payment")
  Paid
  Disputed
}

enum KycStatus {
  Pending
  Verified
  Rejected
}

enum QuotationStatus {
  Submitted
  Awarded
  Rejected
  Standby
  Invoice_Submitted @map("Invoice Submitted")
  Failed
  Accepted
  Declined
}

enum UserRole {
  Requester
  Approver
  Procurement_Officer @map("Procurement Officer")
  Finance
  Admin
  Receiving
  Vendor
  Committee_Member @map("Committee Member")
  Committee
}

enum QuestionType {
  text
  boolean
  multiple_choice @map("multiple-choice")
}
