
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                @id @default(cuid())
  name                    String
  email                   String                @unique
  password                String
  role                    UserRole
  vendorId                String?               @unique
  vendor                  Vendor?
  departmentId            String?
  department              Department?           @relation(fields: [departmentId], references: [id])
  createdRequisitions     PurchaseRequisition[] @relation("Requester")
  approvedRequisitions    PurchaseRequisition[] @relation("Approver")
  goodsReceipts           GoodsReceiptNote[]    @relation("ReceivedBy")
  scores                  CommitteeScoreSet[]
  auditLogs               AuditLog[]
  financialCommitteeOn    PurchaseRequisition[] @relation("FinancialCommittee")
  technicalCommitteeOn    PurchaseRequisition[] @relation("TechnicalCommittee")
  committeeAssignments    CommitteeAssignment[]

  @@map("users")
}

model Department {
  id           String                @id @default(cuid())
  name         String                @unique
  users        User[]
  requisitions PurchaseRequisition[]

  @@map("departments")
}

model Vendor {
  id              String         @id @default(cuid())
  user            User           @relation(fields: [userId], references: [id])
  userId          String         @unique
  name            String
  contactPerson   String
  email           String         @unique
  phone           String
  address         String
  kycStatus       KycStatus
  kycDocuments    KYC_Document[]
  rejectionReason String?
  quotations      Quotation[]
  purchaseOrders  PurchaseOrder[]

  @@map("vendors")
}

model KYC_Document {
  id          String   @id @default(cuid())
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  vendorId    String
  name        String
  url         String
  submittedAt DateTime

  @@map("kyc_documents")
}

model PurchaseRequisition {
  id                             String                 @id @default(cuid())
  requester                      User                   @relation("Requester", fields: [requesterId], references: [id])
  requesterId                    String
  requesterName                  String
  title                          String
  departmentId                   String?
  department                     Department?            @relation(fields: [departmentId], references: [id])
  items                          RequisitionItem[]
  totalPrice                     Float?
  justification                  String
  status                         RequisitionStatus
  createdAt                      DateTime               @default(now())
  updatedAt                      DateTime               @updatedAt
  approver                       User?                  @relation("Approver", fields: [approverId], references: [id])
  approverId                     String?
  approverComment                String?
  contract                       Json? // Simplified for now
  negotiationNotes               String?
  purchaseOrder                  PurchaseOrder?
  allowedVendorIds               String[]
  customQuestions                CustomQuestion[]
  deadline                       DateTime?
  scoringDeadline                DateTime?
  awardResponseDeadline          DateTime?
  awardResponseDurationMinutes   Int?
  evaluationCriteria             EvaluationCriteria?
  financialCommitteeMembers      User[]                 @relation("FinancialCommittee")
  technicalCommitteeMembers      User[]                 @relation("TechnicalCommittee")
  committeeName                  String?
  committeePurpose               String?
  cpoAmount                      Float?
  quotations                     Quotation[]
  committeeAssignments           CommitteeAssignment[]
  purchaseOrderId                String?                @unique

  @@map("purchase_requisitions")
}

model RequisitionItem {
  id            String              @id @default(cuid())
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId String
  name          String
  description   String?
  quantity      Int
  unitPrice     Float

  @@map("requisition_items")
}

model CustomQuestion {
  id            String              @id @default(cuid())
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId String
  questionText  String
  questionType  QuestionType
  options       String[]

  @@map("custom_questions")
}

model EvaluationCriteria {
  id                String                @id @default(cuid())
  requisition       PurchaseRequisition   @relation(fields: [requisitionId], references: [id])
  requisitionId     String                @unique
  financialWeight   Int
  technicalWeight   Int
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]

  @@map("evaluation_criteria")
}

model FinancialCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  evaluationCriteriaId String
  name                 String
  weight               Int
  scores               FinancialScore[]

  @@map("financial_criteria")
}

model TechnicalCriterion {
  id                   String             @id @default(cuid())
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id])
  evaluationCriteriaId String
  name                 String
  weight               Int
  scores               TechnicalScore[]

  @@map("technical_criteria")
}

model Quotation {
  id                String              @id @default(cuid())
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId     String
  vendor            Vendor              @relation(fields: [vendorId], references: [id])
  vendorId          String
  vendorName        String
  items             QuoteItem[]
  totalPrice        Float
  deliveryDate      DateTime
  createdAt         DateTime            @default(now())
  status            QuotationStatus
  notes             String?
  rank              Int?
  answers           QuoteAnswer[]
  scores            CommitteeScoreSet[]
  finalAverageScore Float?
  cpoDocumentUrl    String?

  @@map("quotations")
}

model QuoteItem {
  id                String    @id @default(cuid())
  quotation         Quotation @relation(fields: [quotationId], references: [id])
  quotationId       String
  requisitionItemId String
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?

  @@map("quote_items")
}

model QuoteAnswer {
  id          String    @id @default(cuid())
  quotation   Quotation @relation(fields: [quotationId], references: [id])
  quotationId String
  questionId  String
  answer      String

  @@map("quote_answers")
}

model PurchaseOrder {
  id               String             @id @default(cuid())
  requisition      PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId    String             @unique
  requisitionTitle String
  vendor           Vendor             @relation(fields: [vendorId], references: [id])
  vendorId         String
  items            POItem[]
  totalAmount      Float
  status           PurchaseOrderStatus
  createdAt        DateTime           @default(now())
  contract         Json?
  notes            String?
  receipts         GoodsReceiptNote[]
  invoices         Invoice[]

  @@map("purchase_orders")
}

model POItem {
  id              String        @id @default(cuid())
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  name            String
  quantity        Int
  unitPrice       Float
  totalPrice      Float
  receivedQuantity Int
  receiptItems    ReceiptItem[]

  @@map("po_items")
}

model GoodsReceiptNote {
  id              String        @id @default(cuid())
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  receivedBy      User          @relation("ReceivedBy", fields: [receivedById], references: [id])
  receivedById    String
  receivedByName  String
  receivedDate    DateTime      @default(now())
  items           ReceiptItem[]
  photos          Json?

  @@map("goods_receipt_notes")
}

model ReceiptItem {
  id                 String           @id @default(cuid())
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id])
  goodsReceiptNoteId String
  poItem             POItem           @relation(fields: [poItemId], references: [id])
  poItemId           String
  name               String
  quantityOrdered    Int
  quantityReceived   Int
  condition          ReceiptItemCondition
  notes              String?

  @@map("receipt_items")
}

model Invoice {
  id               String        @id @default(cuid())
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId  String
  vendorId         String
  invoiceDate      DateTime
  items            InvoiceItem[]
  totalAmount      Float
  status           InvoiceStatus
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?

  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId   String
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float

  @@map("invoice_items")
}

model CommitteeAssignment {
  id              String              @id @default(cuid())
  user            User                @relation(fields: [userId], references: [id])
  userId          String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  requisitionId   String
  scoresSubmitted Boolean             @default(false)

  @@map("committee_assignments")
}

model CommitteeScoreSet {
  id               String           @id @default(cuid())
  quotation        Quotation        @relation(fields: [quotationId], references: [id])
  quotationId      String
  scorer           User             @relation(fields: [scorerId], references: [id])
  scorerId         String
  scorerName       String
  financialScores  FinancialScore[]
  technicalScores  TechnicalScore[]
  finalScore       Float
  committeeComment String?
  submittedAt      DateTime         @default(now())

  @@map("committee_score_sets")
}

model FinancialScore {
  id                String             @id @default(cuid())
  committeeScoreSet CommitteeScoreSet  @relation(fields: [committeeScoreSetId], references: [id])
  committeeScoreSetId String
  criterion         FinancialCriterion @relation(fields: [criterionId], references: [id])
  criterionId       String
  score             Int
  comment           String?

  @@map("financial_scores")
}

model TechnicalScore {
  id                String             @id @default(cuid())
  committeeScoreSet CommitteeScoreSet  @relation(fields: [committeeScoreSetId], references: [id])
  committeeScoreSetId String
  criterion         TechnicalCriterion @relation(fields: [criterionId], references: [id])
  criterionId       String
  score             Int
  comment           String?

  @@map("technical_scores")
}

model AuditLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  userName  String
  role      UserRole
  action    String
  entity    String
  entityId  String
  details   String

  @@map("audit_logs")
}

enum UserRole {
  Requester
  Approver
  Procurement_Officer @map("Procurement Officer")
  Finance
  Admin
  Receiving
  Vendor
  Committee_Member @map("Committee Member")
  Committee
}

enum RequisitionStatus {
  Draft
  Pending_Approval @map("Pending Approval")
  Approved
  Rejected
  RFQ_In_Progress @map("RFQ In Progress")
  PO_Created @map("PO Created")
  Fulfilled
  Closed
}

enum QuotationStatus {
  Submitted
  Awarded
  Rejected
  Standby
  Invoice_Submitted @map("Invoice Submitted")
  Failed
  Accepted
  Declined
}

enum PurchaseOrderStatus {
  Issued
  Acknowledged
  Shipped
  Partially_Delivered @map("Partially Delivered")
  Delivered
  Cancelled
  Matched
  Mismatched
  On_Hold @map("On Hold")
}

enum InvoiceStatus {
  Pending
  Approved_for_Payment @map("Approved for Payment")
  Paid
  Disputed
}

enum KycStatus {
  Pending
  Verified
  Rejected
}

enum QuestionType {
  text
  boolean
  multiple_choice @map("multiple-choice")
}

enum ReceiptItemCondition {
  Good
  Damaged
  Incorrect
}
