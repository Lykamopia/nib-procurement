// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  name        String @id @unique
  description String?
  users       User[]
}

model User {
  id                                String                @id @default(cuid())
  name                              String
  email                             String                @unique
  password                          String
  departmentId                      String?
  vendorId                          String?               @unique
  managerId                         String?
  approvalLimit                     Float?
  
  // Relations
  roleName                          String
  role                              Role                  @relation(fields: [roleName], references: [name])
  vendor                            Vendor?
  department                        Department?           @relation("DepartmentMembers", fields: [departmentId], references: [id])
  headedDepartment                  Department?           @relation("DepartmentHead")
  manager                           User?                 @relation("ManagerSubordinates", fields: [managerId], references: [id])
  subordinates                      User[]                @relation("ManagerSubordinates")
  createdRequisitions               PurchaseRequisition[] @relation("Requester")
  approvedRequisitions              PurchaseRequisition[] @relation("Approver")
  currentAssignedRequisitions       PurchaseRequisition[] @relation("CurrentApprover")
  
  // Committee & Scoring Relations
  financialCommitteesRequisitions RequisitionFinancialCommittee[]
  technicalCommitteesRequisitions RequisitionTechnicalCommittee[]
  scoresGiven                     CommitteeScoreSet[]
  committeeAssignments            CommitteeAssignment[]
  recommendations                 CommitteeRecommendation[]
  approvals                         Approval[]
  goodsReceipts                   GoodsReceiptNote[]
}

model Vendor {
  id              String        @id @default(cuid())
  name            String
  contactPerson   String
  email           String        @unique
  phone           String
  address         String
  kycStatus       String        @default("Pending") // Pending, Verified, Rejected
  rejectionReason String?
  
  // Relations
  userId        String        @unique
  user          User          @relation(fields: [userId], references: [id])
  quotations    Quotation[]
  purchaseOrders  PurchaseOrder[]
  kycDocuments    KYC_Document[]
  contracts       Contract[]
}

model Department {
  id           String  @id @default(cuid())
  name         String  @unique
  description  String?
  
  // Relations
  headId       String?   @unique
  head         User?     @relation("DepartmentHead", fields: [headId], references: [id])
  users        User[]    @relation("DepartmentMembers")
  requisitions PurchaseRequisition[]
}

model PurchaseRequisition {
  id                              String        @id @default(cuid())
  transactionId                   String?       @unique
  title                           String
  justification                   String
  status                          String        @default("Draft")
  totalPrice                      Float
  requesterName                   String
  approverComment                 String?
  urgency                         String        @default("Low")
  deadline                        DateTime?
  scoringDeadline                 DateTime?
  awardResponseDeadline           DateTime?
  awardResponseDurationMinutes    Int?
  committeeName                   String?
  committeePurpose                String?
  cpoAmount                       Float?
  rfqSettings                     Json?
  
  // Relations
  requesterId                     String
  requester                       User          @relation("Requester", fields: [requesterId], references: [id])
  departmentId                    String
  department                      Department    @relation(fields: [departmentId], references: [id])
  approverId                      String?
  approver                        User?         @relation("Approver", fields: [approverId], references: [id])
  currentApproverId               String?
  currentApprover                 User?         @relation("CurrentApprover", fields: [currentApproverId], references: [id])
  purchaseOrderId                 String?       @unique
  
  items                     RequisitionItem[]
  customQuestions           CustomQuestion[]
  quotations                Quotation[]
  purchaseOrder             PurchaseOrder?
  contracts                 Contract[]
  evaluationCriteria        EvaluationCriteria?
  recommendations           CommitteeRecommendation[]
  approvals                 Approval[]
  
  // Many-to-Many for committees
  financialCommitteeMembers   RequisitionFinancialCommittee[]
  technicalCommitteeMembers   RequisitionTechnicalCommittee[]

  // Temporary fields for award logic
  allowedVendorIds      String[]
  awardedQuoteItemIds   String[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model RequisitionItem {
  id              String  @id @default(cuid())
  name            String
  quantity        Int
  unitPrice       Float
  description     String?
  
  // Relations
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  quoteItems      QuoteItem[]
  poItems         POItem[]
}

model CustomQuestion {
  id              String   @id @default(cuid())
  questionText    String
  questionType    String // text, boolean, multiple-choice, file
  isRequired      Boolean  @default(false)
  options         String[]
  
  // Relations
  requisitionId   String
  requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  answers         QuoteAnswer[]
}

model EvaluationCriteria {
  id                String  @id @default(cuid())
  financialWeight   Int
  technicalWeight   Int
  
  // Relations
  requisitionId     String              @unique
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  financialCriteria FinancialCriterion[]
  technicalCriteria TechnicalCriterion[]
}

model FinancialCriterion {
  id                   String  @id @default(cuid())
  name                 String
  weight               Int
  
  // Relations
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  scores               FinancialScore[]
}

model TechnicalCriterion {
  id                   String @id @default(cuid())
  name                 String
  weight               Int
  
  // Relations
  evaluationCriteriaId String
  evaluationCriteria   EvaluationCriteria @relation(fields: [evaluationCriteriaId], references: [id], onDelete: Cascade)
  scores               TechnicalScore[]
}


model Quotation {
  id                    String      @id @default(cuid())
  transactionId         String?
  vendorName            String
  totalPrice            Float
  deliveryDate          DateTime
  status                String      @default("Submitted")
  notes                 String?
  rank                  Int?
  finalAverageScore     Float?
  cpoDocumentUrl        String?
  experienceDocumentUrl String?
  
  // Relations
  requisitionId         String
  requisition           PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  vendorId              String
  vendor                Vendor      @relation(fields: [vendorId], references: [id])
  items                 QuoteItem[]
  answers               QuoteAnswer[]
  scores                CommitteeScoreSet[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model QuoteItem {
  id                String  @id @default(cuid())
  name              String
  quantity          Int
  unitPrice         Float
  leadTimeDays      Int
  brandDetails      String?

  // Relations
  requisitionItemId String
  quotationId       String
  quotation         Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  itemScores        ItemScore[]
}

model QuoteAnswer {
  id          String   @id @default(cuid())
  answer      String
  
  // Relations
  questionId  String
  question    CustomQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  quotationId String
  quotation   Quotation      @relation(fields: [quotationId], references: [id], onDelete: Cascade)
}

model PurchaseOrder {
  id                String   @id @default(cuid())
  transactionId     String?
  requisitionTitle  String
  totalAmount       Float
  status            String   @default("Issued")
  notes             String?
  
  // Relations
  requisitionId     String      @unique
  requisition       PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  vendorId          String
  vendor            Vendor      @relation(fields: [vendorId], references: [id])
  items             POItem[]
  receipts          GoodsReceiptNote[]
  invoices          Invoice[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model POItem {
  id               String  @id @default(cuid())
  name             String
  quantity         Int
  unitPrice        Float
  totalPrice       Float
  receivedQuantity Int     @default(0)
  
  // Relations
  purchaseOrderId  String
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  requisitionItemId String
  requisitionItem  RequisitionItem @relation(fields: [requisitionItemId], references: [id])
  receiptItems     ReceiptItem[]
}

model GoodsReceiptNote {
  id            String      @id @default(cuid())
  transactionId String?
  receivedDate  DateTime    @default(now())

  // Relations
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  receivedById    String
  receivedBy      User        @relation(fields: [receivedById], references: [id])
  items           ReceiptItem[]
}

model ReceiptItem {
  id                 String  @id @default(cuid())
  quantityReceived   Int
  condition          String  // Good, Damaged, Incorrect
  notes              String?
  
  // Relations
  goodsReceiptNoteId String
  goodsReceiptNote   GoodsReceiptNote @relation(fields: [goodsReceiptNoteId], references: [id], onDelete: Cascade)
  poItemId           String
  poItem             POItem         @relation(fields: [poItemId], references: [id])
}

model Invoice {
  id               String   @id @default(cuid())
  transactionId    String?
  invoiceDate      DateTime
  totalAmount      Float
  status           String   @default("Pending")
  documentUrl      String?
  paymentDate      DateTime?
  paymentReference String?
  
  // Relations
  purchaseOrderId  String
  po               PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  vendorId         String
  items            InvoiceItem[]
}

model InvoiceItem {
  id          String  @id @default(cuid())
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  
  // Relations
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model KYC_Document {
    id          String   @id @default(cuid())
    name        String
    url         String
    submittedAt DateTime
    
    // Relations
    vendorId    String
    vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model Contract {
    id              String @id @default(cuid())
    contractNumber  String @default(cuid())
    startDate       DateTime
    endDate         DateTime
    filePath        String?
    status          String @default("Draft")

    // Relations
    requisitionId   String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    vendorId        String
    vendor          Vendor @relation(fields: [vendorId], references: [id])

    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model CommitteeScoreSet {
    id               String      @id @default(cuid())
    scorerName       String
    finalScore       Float
    committeeComment String?
    submittedAt      DateTime    @default(now())

    // Relations
    quotationId      String
    quotation        Quotation   @relation(fields: [quotationId], references: [id], onDelete: Cascade)
    scorerId         String
    scorer           User        @relation(fields: [scorerId], references: [id])
    itemScores       ItemScore[]
}

model ItemScore {
    id              String    @id @default(cuid())
    finalScore      Float

    // Relations
    scoreSetId      String
    scoreSet        CommitteeScoreSet @relation(fields: [scoreSetId], references: [id], onDelete: Cascade)
    quoteItemId     String
    quoteItem       QuoteItem @relation(fields: [quoteItemId], references: [id], onDelete: Cascade)
    financialScores FinancialScore[]
    technicalScores TechnicalScore[]
}

model FinancialScore {
    id          String  @id @default(cuid())
    score       Int
    comment     String?

    // Relations
    itemScoreId String
    itemScore   ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
    criterionId String
    criterion   FinancialCriterion @relation(fields: [criterionId], references: [id])
}

model TechnicalScore {
    id          String  @id @default(cuid())
    score       Int
    comment     String?

    // Relations
    itemScoreId String
    itemScore   ItemScore @relation(fields: [itemScoreId], references: [id], onDelete: Cascade)
    criterionId String
    criterion   TechnicalCriterion @relation(fields: [criterionId], references: [id])
}

model CommitteeAssignment {
  userId        String
  requisitionId String
  scoresSubmitted Boolean @default(false)

  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  requisition PurchaseRequisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)

  @@id([userId, requisitionId])
}

model CommitteeRecommendation {
    id              String @id @default(cuid())
    recommendation  String // "Recommend for Approval", "Request Changes"
    comment         String?
    committeeRole   String
    
    // Relations
    requisitionId   String
    requisition     PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    userId          String
    user            User @relation(fields: [userId], references: [id])

    createdAt       DateTime @default(now())
}

model Approval {
  id            String    @id @default(cuid())
  decision      String // Approved, Rejected, Escalated
  comment       String?
  
  // Relations
  requisitionId String
  requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
  approverId    String
  approver      User      @relation(fields: [approverId], references: [id])

  createdAt     DateTime  @default(now())
}


model AuditLog {
  id            String   @id @default(cuid())
  transactionId String?
  timestamp     DateTime @default(now())
  action        String
  entity        String
  entityId      String
  details       String
  
  // Relations
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
}

//--- Join Tables for Many-to-Many ---//

model RequisitionFinancialCommittee {
    requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    requisitionId String
    user          User                @relation(fields: [userId], references: [id])
    userId        String

    @@id([requisitionId, userId])
}

model RequisitionTechnicalCommittee {
    requisition   PurchaseRequisition @relation(fields: [requisitionId], references: [id])
    requisitionId String
    user          User                @relation(fields: [userId], references: [id])
    userId        String

    @@id([requisitionId, userId])
}
