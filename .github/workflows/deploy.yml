name: Deploy Next.js to IIS Remotely

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: windows-latest
    env:
      SERVER: ${{ secrets.IIS_SERVER }}
      USER: ${{ secrets.IIS_USER }}
      PASSWORD: ${{ secrets.IIS_PASSWORD }}

    steps:
    # 1. Checkout repository
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. Setup Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    # 3. Install dependencies (including Prisma)
    - name: Install dependencies
      run: npm install

    # 4. Build Next.js app
    - name: Build Next.js app
      run: npm run build

    # 5. Run Prisma migrations and seeding
    - name: Prisma Migrations & Seed
      run: |
        echo "Applying Prisma migrations..."
        npx prisma migrate deploy
        echo "Generating Prisma client..."
        npx prisma generate
        echo "Seeding database..."
        npm run db:seed
      shell: pwsh

    # 6. Deploy to IIS remotely via PowerShell Remoting
    - name: Deploy to IIS via PowerShell Remoting
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"

        # Convert password to secure string and create credential object
        $secPassword = ConvertTo-SecureString $env:PASSWORD -AsPlainText -Force
        $cred = New-Object System.Management.Automation.PSCredential ($env:USER, $secPassword)

        # Remote script block
        $scriptBlock = {
            param($sourcePath, $destinationPath, $appPool, $siteName)

            Write-Host "Stopping IIS App Pool and Website..."
            try { Stop-WebAppPool -Name $appPool -ErrorAction Stop; Write-Host "App Pool stopped." } catch { Write-Host $_ }
            try { Stop-Website -Name $siteName -ErrorAction Stop; Write-Host "Website stopped." } catch { Write-Host $_ }

            Write-Host "Copying files to IIS..."
            robocopy $sourcePath "$destinationPath\.next" /E /MIR
            robocopy $sourcePath\public "$destinationPath\public" /E /MIR
            robocopy $sourcePath\node_modules "$destinationPath\node_modules" /E /MIR
            Copy-Item "$sourcePath\package.json" "$destinationPath\package.json" -Force

            if ($LASTEXITCODE -ge 8) { throw "File copy failed with exit code $LASTEXITCODE" }
            Write-Host "Files copied successfully."

            Write-Host "Starting IIS App Pool and Website..."
            try { Start-WebAppPool -Name $appPool -ErrorAction Stop; Write-Host "App Pool started." } catch { throw }
            try { Start-Website -Name $siteName -ErrorAction Stop; Write-Host "Website started." } catch { throw }
        }

        # Define parameters for remote execution
        $sourcePath = "${{ github.workspace }}"  # workspace of GitHub runner
        $destinationPath = "C:\inetpub\wwwroot\YourAppName"
        $appPool = "YourAppPoolName"
        $siteName = "YourSiteName"

        # Execute remotely on IIS server
        Invoke-Command -ComputerName $env:SERVER -Credential $cred -ScriptBlock $scriptBlock -ArgumentList $sourcePath, $destinationPath, $appPool, $siteName

    # 7. Post-deployment notifications
    - name: Post-deployment status
      if: always()
      shell: pwsh
      run: |
        if (${{ job.status }} -eq 'success') { 
          Write-Host "Deployment succeeded ✅"
          # Example: send email notification
          Send-MailMessage -To "tade2024bdu@gmail.com" -From "ci-cd@company.com" -Subject "Deployment Success" -Body "Next.js app deployed successfully." -SmtpServer "smtp.yourserver.com"
        } 
        else { 
          Write-Host "Deployment failed ❌"; 
          Send-MailMessage -To "tade2024bdu@gmail.com" -From "ci-cd@company.com" -Subject "Deployment Failed" -Body "Next.js app deployment failed!" -SmtpServer "smtp.yourserver.com"
          exit 1 
        }